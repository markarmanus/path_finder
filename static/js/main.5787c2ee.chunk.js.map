{"version":3,"sources":["Constants/Textures.js","Components/Texture.js","Constants/Constants.js","Constants/Config.js","Components/Character.js","HelperFunctions.js","AStar.js","Components/Grid.js","Constants/BreakPoints.js","Components/Footer.js","Constants/Levels.js","Components/App.js","serviceWorker.js","index.js","Components/AppRoute.js"],"names":["TEXTURES","FIRE","CHICKEN_RUNNING","CHICKEN_IDLE","CHICKEN_UP","CHICKEN_DOWN","PLAYER_IDLE","PLAYER_UP","PLAYER_DOWN","PLAYER_RUNNING","WALL","HEALTH_PACK","TRANSPARENT","FLOOR_BOTTOM","FLOOR_TOP","FLOOR_RIGHT","FLOOR_LEFT","FLOOR_TOP_LEFT","FLOOR_TOP_RIGHT","FLOOR_BOTTOM_RIGHT","FLOOR_BOTTOM_LEFT","FLOOR","TEXTURE_DATA","2","animationSpeed","animated","numberOfSprites","src","icon","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","Sprite","styled","div","props","textureData","translationTo","keyframes","getAnimation","ProgressBarUnder","textureSize","ProgressBarOver","healthBarPercentage","Texture","state","nextProps","texture","this","x","y","xOffset","yOffset","onMouseDown","onMouseUp","onMouseHoverTextureEnter","onMouseHoverTextureLeave","zIndex","style","position","height","width","top","left","overflow","userSelect","undefined","onMouseEnter","onMouseLeave","onTouchMove","onTouchEnd","onTouchStart","Component","CONSTANTS","CONFIG","DEFAULT_PLAYER_SPEED","DEFAULT_CHICKEN_SPEED","DEFAULT_PLAYER_HEALTH","DEFAULT_CHICKEN_HEALTH","MAIN_APP_COLOR","SECONDARY_APP_COLOR","DEFAULT_SELECTED_LEVEL","DEFAULT_SEARCH_PRIORITY","EDITING_BORDER","CharacterSprite","Character","walking","currentTexture","type","toUpperCase","currentMovementSpeed","movementSpeed","takeAction","bind","setCorrectTexture","setCorrectDirection","doNextAction","action","getNextAction","typeUpperCase","setState","onRef","character","document","getElementById","inProgress","paused","renderOnScreen","direction","entity","transform","firstChild","stepsCount","Math","floor","remainder","counter","id","setInterval","offsetLeft","offsetTop","clearInterval","onCharacterFinishMove","initialCharacterLocation","onPlaceCharacter","healthBar","currentHealth","maxHealth","calculateBestTextureSize","window","screen","calculateMaxTextureSize","min","calculateMinTextureSize","max","isSide","costToLocation","from","to","dx","dy","sqrt","isLegalAction","destinationPos","actionType","abs","getActionType","isOutOfBoundaries","gridWidth","gridHeight","isDestinationWall","texturesMap","isHorizontalWall","isVerticalWall","getPath","node","parent","Node","health","g","h","characterType","actions","allowDiagonalActions","concat","chickenSpeed","bestAction","chickenLocation","currentChickenLocation","playerLocation","currentPlayerLocation","leastDistance","i","length","newChickenLocation","distance","getNextChickenAction","start","goal","foundPath","bestPathNode","bestPathFoundHealth","actionsCost","closed","Array","map","playerMaxHealth","fill","open","push","currentPlayerHealth","pop","searchPriority","forEach","index","newLocation","healthPackOnLocation","overLayMap","isLava","nodeToAdd","added","nodeToAddF","splice","addToOpen","Container","EditorDoneButton","Button","EditorContainer","expanded","EditorArrow","TextureLabel","Typography","Text","Image","img","Grid","edits","modalMessage","showModal","editorExpanded","finishAfterNextAnimation","initialPlayerLocation","initialChickenLocation","currentChickenHealth","chickenMaxHealth","mouseOverX","mouseOverY","mouseDown","handleHoverWhilePlacingCharacter","getNextCharacterAction","setCharacterCurrentHealth","updateURL","value","capitalized","charAt","slice","e","persist","setSelectedEditTexture","resetCharactersLocation","player","chicken","newURLObject","playerSpeed","initialTexturesMap","initialOverLayMap","minHeight","minWidth","firstRenderPlayerLocation","firstRenderChickenLocation","history","replaceState","queryString","stringify","arrayFormat","selectedEditTexture","editing","followCursor","side","touchX","touches","pageX","touchY","pageY","target","parentElement","border","newOverLayMap","newTexturesMap","handleFollowCursor","prevProps","initializeGridWithTextureSize","tMap","oMap","useURL","container","offsetWidth","offsetHeight","envIsReady","newPosition","editsCopy","editToUndo","texturesMapCopy","overLayMapCopy","validTextureSize","mapCanFit","URLParams","addEventListener","characterLocation","currentCharacterHealth","onFinishGame","onClickRestart","levelData","setEditing","isEditingOverLay","ref","el","closable","footer","onClick","title","visible","size","shape","onClickTexture","right","bottom","floorTexture","textureToRenderIfSide","isBeingEdited","key","overLayTexture","BREAKPOINTS","FlexDivCenter","StyledText","StyledGitButton","StyledButton","Left","Center","Right","Label","StyledSlider","Slider","SliderContainer","StyledTitle","Title","LeftRightContainer","PlayButton","margin","fontSize","smallScreen","component","onChange","setCharacterMaxHealth","disabled","step","tooltipPlacement","placement","item","speed","setCharacterSpeed","Footer","minTextureSize","maxTextureSize","select","setSelectionRange","execCommand","smallScreenWidth","parseInt","smallScreenHeight","defaultValue","location","href","copyLinkToClipBoard","level","enableFollowCursor","onClickUndo","ready","onClickResume","onClickPause","ghost","onClickStart","getPlayButton","generateLink","setTextureSize","Group","selectedLevel","setSelectedLevel","setSearchPriority","LEVELS","1","MainContainer","App","params","parseLevelData","search","setAllowDiagonalActions","parse","parseNumbers","parseBooleans","grid","onSelectCustomLevel","message","error","undoEdit","isEditing","Boolean","hostname","match","ReactDOM","render","path","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.5787c2ee.chunk.js","sourcesContent":["export const TEXTURES = {\n  FIRE: 2,\n  CHICKEN_RUNNING: 3,\n  CHICKEN_IDLE: 4,\n  CHICKEN_UP: 5,\n  CHICKEN_DOWN: 6,\n  PLAYER_IDLE: 7,\n  PLAYER_UP: 8,\n  PLAYER_DOWN: 9,\n  PLAYER_RUNNING: 10,\n  WALL: 11,\n  HEALTH_PACK: 12,\n  TRANSPARENT: 13,\n  FLOOR_BOTTOM: 14,\n  FLOOR_TOP: 15,\n  FLOOR_RIGHT: 16,\n  FLOOR_LEFT: 17,\n  FLOOR_TOP_LEFT: 18,\n  FLOOR_TOP_RIGHT: 19,\n  FLOOR_BOTTOM_RIGHT: 20,\n  FLOOR_BOTTOM_LEFT: 21,\n  FLOOR: 22\n}\nexport const TEXTURE_DATA = {\n  2: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"campFire.png\",\n    icon: \"campFireIcon.png\"\n  },\n  3: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenRight.png\"\n  },\n  4: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"ChickenIdle.png\"\n  },\n  5: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenUp.png\"\n  },\n  6: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenDown.png\"\n  },\n  7: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"PlayerIdle.png\"\n  },\n  8: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerUp.png\"\n  },\n  9: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerDown.png\"\n  },\n  10: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerRight.png\"\n  },\n  11: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Rock.png\"\n  },\n  12: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"Character_Right.png\"\n  },\n  13: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Transparent.png\"\n  },\n  14: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottom.png\"\n  },\n  15: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTop.png\"\n  },\n  16: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorRight.png\"\n  },\n  17: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorLeft.png\"\n  },\n  18: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTopLeft.png\"\n  },\n  19: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTopRight.png\"\n  },\n  20: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottomRight.png\"\n  },\n  21: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottomLeft.png\"\n  },\n  22: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor.png\"\n  }\n}\n","import React, { Component } from \"react\"\nimport { TEXTURE_DATA } from \"../Constants/Textures\"\nimport styled, { keyframes } from \"styled-components\"\n\nconst getAnimation = numberOfSprites => {\n  const translationTo = ((numberOfSprites - 1) / numberOfSprites) * 100\n  const transform = keyframes`\n  from { \n    transform: translateX(0); \n  }\n  to { \n    transform: translateX(-${translationTo}%); \n  }\n}\n`\n  return transform\n}\nconst Sprite = styled.div`\n  width: ${props => props.textureData.numberOfSprites * 100}%;\n  height: 100%;\n  background-image: url(${props => props.textureData.src});\n  background-size: 100%, 100%;\n  background-repeat: ${props => (props.textureData.animated ? \"no-repeat\" : \"unset\")};\n  animation: ${props => getAnimation(props.textureData.numberOfSprites)}\n    ${props => props.textureData.animationSpeed}\n    steps(${props => props.textureData.numberOfSprites - 1})\n    ${props => (props.textureData.animated ? \"infinite\" : 0)};\n  position: absolute;\n  user-select: none;\n\n  left: 0;\n  top: 0;\n`\nconst ProgressBarUnder = styled.div`\n  width: 80%;\n  position: relative;\n  background-color: #661918;\n  margin: auto;\n  border-radius: 10px;\n  height: ${props => props.textureSize * 0.1}px;\n  overflow: hidden;\n`\nconst ProgressBarOver = styled.div`\n  width: 100%;\n  position: relative;\n  background-color: #e03836;\n  margin: auto;\n  border-radius: 10px;\n  transition: right 0.5s;\n  right: ${props => 100 - props.healthBarPercentage}%;\n  height: ${props => props.textureSize * 0.1}px;\n`\nexport class Texture extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  shouldComponentUpdate(nextProps) {\n    return (\n      nextProps.texture !== this.props.texture ||\n      nextProps.textureSize !== this.props.textureSize ||\n      nextProps.x !== this.props.x ||\n      nextProps.y !== this.props.y ||\n      nextProps.xOffset !== this.props.xOffset ||\n      nextProps.yOffset !== this.props.yOffset ||\n      nextProps.healthBarPercentage !== this.props.healthBarPercentage\n    )\n  }\n\n  render() {\n    const {\n      yOffset,\n      xOffset,\n      y,\n      x,\n      onMouseDown,\n      onMouseUp,\n      onMouseHoverTextureEnter,\n      onMouseHoverTextureLeave,\n      texture,\n      zIndex,\n      textureSize,\n      healthBarPercentage\n    } = this.props\n    const textureData = TEXTURE_DATA[texture]\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          height: textureSize + \"px\",\n          width: textureSize + \"px\",\n          top: yOffset ? y * textureSize + yOffset : y * textureSize,\n          left: xOffset ? x * textureSize + xOffset : x * textureSize,\n          zIndex: zIndex,\n          overflow: \"hidden\",\n          userSelect: \"none\"\n        }}\n      >\n        {healthBarPercentage !== undefined ? (\n          <ProgressBarUnder textureSize={textureSize}>\n            <ProgressBarOver\n              healthBarPercentage={healthBarPercentage}\n              textureSize={textureSize}\n            ></ProgressBarOver>\n          </ProgressBarUnder>\n        ) : null}\n        <Sprite\n          textureData={textureData}\n          onMouseDown={onMouseDown}\n          onMouseUp={onMouseUp}\n          onMouseEnter={onMouseHoverTextureEnter}\n          onMouseLeave={onMouseHoverTextureLeave}\n          onTouchMove={onMouseHoverTextureEnter}\n          onTouchEnd={onMouseUp}\n          onTouchStart={onMouseDown}\n        ></Sprite>\n      </div>\n    )\n  }\n}\n\nexport default Texture\n","export const CONSTANTS = {\n  PLAYER: \"player\",\n  CHICKEN: \"chicken\",\n  OVERLAY: \"overLay\",\n  TEXTURE: \"texture\",\n  HEALTH: \"health\",\n  SPEED: \"speed\"\n}\n","import { CONSTANTS } from \"./Constants\"\n\nexport const CONFIG = {\n  DEFAULT_PLAYER_SPEED: 1,\n  DEFAULT_CHICKEN_SPEED: 0,\n  DEFAULT_PLAYER_HEALTH: 5,\n  DEFAULT_CHICKEN_HEALTH: 100,\n  MAIN_APP_COLOR: \"#274029\",\n  SECONDARY_APP_COLOR: \"#012622\",\n  DEFAULT_SELECTED_LEVEL: 1,\n  DEFAULT_SEARCH_PRIORITY: CONSTANTS.HEALTH,\n  EDITING_BORDER: \"5px solid purple\"\n}\n","import React, { Component } from \"react\"\nimport Texture from \"./Texture\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport styled from \"styled-components\"\n\nconst CharacterSprite = styled.div`\n  position: absolute;\n`\nexport class Character extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      walking: false,\n      currentTexture: TEXTURES[props.type.toUpperCase() + \"_IDLE\"],\n      currentMovementSpeed: this.props.movementSpeed\n    }\n    this.takeAction = this.takeAction.bind(this)\n    this.setCorrectTexture = this.setCorrectTexture.bind(this)\n    this.setCorrectDirection = this.setCorrectDirection.bind(this)\n    this.doNextAction = this.doNextAction.bind(this)\n  }\n\n  doNextAction() {\n    let action = this.props.getNextAction(this.props.type)\n    let typeUpperCase = this.props.type.toUpperCase()\n    if (action[0] !== 0 || action[1] !== 0) {\n      this.setState({ walking: true })\n      this.takeAction(action)\n    } else if (this.state.currentTexture !== TEXTURES[typeUpperCase + \"_IDLE\"]) {\n      this.setState({ currentTexture: TEXTURES[typeUpperCase + \"_IDLE\"] })\n    }\n  }\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n  onClickRestart() {\n    let character = document.getElementById(this.props.type)\n    character.style.left = 0\n    character.style.top = 0\n    this.setState({ currentTexture: TEXTURES[this.props.type.toUpperCase() + \"_IDLE\"] })\n  }\n  componentDidUpdate() {\n    if (\n      !this.state.walking &&\n      this.props.inProgress &&\n      !this.props.paused &&\n      this.props.renderOnScreen\n    ) {\n      this.doNextAction()\n    }\n  }\n  setCorrectTexture(direction) {\n    let typeUpperCase = this.props.type.toUpperCase()\n    let texture =\n      direction[1] === -1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_UP\"]\n        : direction[1] === 1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_DOWN\"]\n        : TEXTURES[typeUpperCase + \"_RUNNING\"]\n    this.setState({ currentTexture: texture })\n  }\n  setCorrectDirection(entity, direction) {\n    if (entity !== null) {\n      if (direction[0] === -1) {\n        entity.style.transform = \"scaleX(-1)\"\n      } else {\n        entity.style.transform = \"scaleX(1)\"\n      }\n    }\n  }\n  takeAction(direction) {\n    this.setCorrectTexture(direction)\n    let character = document.getElementById(this.props.type)\n    this.setCorrectDirection(character.firstChild, direction)\n    let stepsCount = Math.floor(this.props.textureSize / this.props.movementSpeed)\n    let remainder = this.props.textureSize % this.props.movementSpeed\n\n    let counter = 0\n    this.setState({ currentMovementSpeed: this.props.movementSpeed })\n    var id = setInterval(frame.bind(this), 0)\n    function frame() {\n      if (counter === stepsCount || !this.props.inProgress) {\n        clearInterval(id)\n        character.style.left = character.offsetLeft + direction[0] * remainder + \"px\"\n        character.style.top = character.offsetTop + direction[1] * remainder + \"px\"\n        this.props.onCharacterFinishMove(this.props.type, direction)\n        this.setState({ walking: false })\n      } else {\n        counter++\n        character.style.left =\n          character.offsetLeft + direction[0] * this.state.currentMovementSpeed + \"px\"\n        character.style.top =\n          character.offsetTop + direction[1] * this.state.currentMovementSpeed + \"px\"\n      }\n    }\n  }\n  render() {\n    const {\n      initialCharacterLocation,\n      type,\n      textureSize,\n      xOffset,\n      yOffset,\n      onPlaceCharacter,\n      renderOnScreen,\n      healthBar,\n      currentHealth,\n      zIndex,\n      maxHealth\n    } = this.props\n    let healthBarPercentage = healthBar ? (currentHealth / maxHealth) * 100 : undefined\n    return (\n      <CharacterSprite id={type}>\n        {initialCharacterLocation !== null && renderOnScreen ? (\n          <Texture\n            x={initialCharacterLocation[0]}\n            y={initialCharacterLocation[1]}\n            healthBarPercentage={healthBarPercentage}\n            textureSize={textureSize}\n            xOffset={xOffset}\n            yOffset={yOffset}\n            type={type}\n            zIndex={zIndex}\n            onMouseDown={() => onPlaceCharacter(type)}\n            texture={this.state.currentTexture}\n          ></Texture>\n        ) : null}\n      </CharacterSprite>\n    )\n  }\n}\n\nexport default Character\n","const calculateBestTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  const lowerValue = height > width ? width : height\n\n  return lowerValue / 10\n}\nconst calculateMaxTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  return Math.floor(Math.min(...[height / 4, width / 4]))\n}\nconst calculateMinTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n\n  return Math.floor(Math.max(...[height / 50, width / 50]))\n}\nconst isSide = (x, y, width, height) => {\n  const left = x === 0\n  const right = x === width - 1\n  const top = y === 0\n  const bottom = y === height - 1\n  return bottom || top || right || left\n}\n\nexport { calculateMinTextureSize, calculateBestTextureSize, calculateMaxTextureSize, isSide }\n","import { TEXTURES } from \"./Constants/Textures\"\nimport { CONSTANTS } from \"./Constants/Constants\"\nimport { isSide } from \"./HelperFunctions\"\nconst costToLocation = (from, to) => {\n  let dx = to[0] - from[0]\n  let dy = to[1] - from[1]\n  let distance = Math.sqrt(dx * dx + dy * dy)\n  return distance * 100\n}\nconst getActionType = action => {\n  return action[0] + action[1] === 0 || Math.abs(action[0] + action[1]) === 2\n    ? \"diagonal\"\n    : \"cardinal\"\n}\nconst isLegalAction = (x, y, action, state) => {\n  const destinationPos = { x: x + action[0], y: y + action[1] }\n  const actionType = getActionType(action)\n  if (isOutOfBoundaries(destinationPos, state.gridWidth, state.gridHeight)) return false\n  const isDestinationWall =\n    state.texturesMap[destinationPos.y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n  if (actionType === \"diagonal\") {\n    const isHorizontalWall =\n      state.texturesMap[y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n    const isVerticalWall =\n      state.texturesMap[destinationPos.y * state.gridWidth + x] === TEXTURES.WALL\n\n    return !(isHorizontalWall || isVerticalWall || isDestinationWall)\n  } else {\n    return !isDestinationWall\n  }\n}\nconst addToOpen = (nodeToAdd, open) => {\n  let added = false\n  // check if its already in the open list.\n  for (let index = 0; index < open.length; index++) {\n    let node = open[index]\n    if (\n      nodeToAdd.x === node.x &&\n      nodeToAdd.y === node.y &&\n      nodeToAdd.g >= node.g &&\n      nodeToAdd.health <= node.health\n    ) {\n      added = true\n      break\n    }\n  }\n  // if its not already in the open list add where it belongs based on the f value.\n  if (!added) {\n    const nodeToAddF = nodeToAdd.g + nodeToAdd.h\n    // keep going until the f value is more than or qrual to the one in the open list and that where you add the node.\n    for (let index = 0; index < open.length; index++) {\n      const node = open[index]\n      const nodeF = node.g + node.h\n      if (nodeToAddF >= nodeF) {\n        added = true\n        open.splice(index, 0, nodeToAdd)\n        break\n      }\n    }\n  }\n  // if was not added because it the smallest f then add it to the end..\n  if (!added) {\n    open.push(nodeToAdd)\n  }\n}\n\nconst getPath = node => {\n  let action = node.action\n  let parent = node.parent\n  while (parent !== null && parent.action !== null) {\n    action = parent.action\n    parent = parent.parent\n  }\n\n  return action\n}\nconst isOutOfBoundaries = (position, gridWidth, gridHeight) => {\n  return position.x < 0 || position.y < 0 || position.x >= gridWidth || position.y >= gridHeight\n}\nconst getNextChickenAction = (actions, state, props) => {\n  if (props.chickenSpeed === 0) return [0, 0]\n  let bestAction = [0, 0]\n  let chickenLocation = state.currentChickenLocation\n  let playerLocation = state.currentPlayerLocation\n  let leastDistance = costToLocation(chickenLocation, playerLocation)\n  for (let i = 0; i < actions.length; i++) {\n    let action = actions[i]\n    if (!isLegalAction(chickenLocation[0], chickenLocation[1], action, state)) continue\n    let newChickenLocation = [chickenLocation[0] + action[0], chickenLocation[1] + action[1]]\n    if (isSide(newChickenLocation[0], newChickenLocation[1], state.gridWidth, state.gridHeight))\n      continue\n    let distance = costToLocation(newChickenLocation, playerLocation)\n    if (distance > leastDistance) {\n      leastDistance = distance\n      bestAction = action\n    }\n  }\n  return bestAction\n}\nconst getNextAction = (state, props, characterType) => {\n  let actions = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0]\n  ]\n  let diagonalActions = [\n    [1, 1],\n    [-1, 1],\n    [1, -1],\n    [-1, -1]\n  ]\n  if (props.allowDiagonalActions) actions = actions.concat(diagonalActions)\n  if (characterType === CONSTANTS.CHICKEN) return getNextChickenAction(actions, state, props)\n  let start = state.currentPlayerLocation\n  let goal = state.currentChickenLocation\n  let foundPath = false\n  let bestPathNode = null\n  let bestPathFoundHealth = 0\n  //edge case when start is the goal.\n  if (start[0] === goal[0] && start[1] === goal[1]) {\n    return [0, 0]\n  }\n\n  let actionsCost = [100, 100, 100, 100, 144, 141, 141, 141]\n  let closed = [...new Array(state.gridWidth * state.gridHeight)].map(() =>\n    new Array(props.playerMaxHealth).fill(false)\n  )\n\n  let open = []\n  open.push(\n    new Node(start[0], start[1], state.currentPlayerHealth, null, null, 0, costToLocation(start, goal))\n  )\n  while (true) {\n    if (open.length === 0) {\n      if (foundPath) {\n        return getPath(bestPathNode)\n      }\n      return [0, 0]\n    }\n\n    let node = open.pop()\n    if (node.x === goal[0] && node.y === goal[1]) {\n      if (node.health === props.playerMaxHealth || props.searchPriority === CONSTANTS.SPEED) {\n        return getPath(node)\n      } else if (node.health > bestPathFoundHealth) {\n        foundPath = true\n        bestPathFoundHealth = node.health\n        bestPathNode = node\n      }\n    }\n\n    // checks if node in closed, where closed is an array with true false values for any state at x,y by accessing index at y * the with + x\n    if (closed[node.y * state.gridWidth + node.x][node.health - 1]) {\n      continue\n    }\n\n    closed[node.y * state.gridWidth + node.x][node.health - 1] = true\n    if (node.health <= 0) continue\n    actions.forEach((action, index) => {\n      if (\n        isLegalAction(node.x, node.y, action, state) &&\n        !isSide(node.x, node.y, state.gridWidth, state.gridHeight)\n      ) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        let g = node.g + actionsCost[index]\n        const h = costToLocation([newLocation.x, newLocation.y], goal)\n        const healthPackOnLocation =\n          state.overLayMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.HEALTH_PACK\n        const isLava =\n          state.texturesMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.FIRE\n\n        const health = healthPackOnLocation\n          ? props.playerMaxHealth\n          : isLava\n          ? node.health - 1\n          : node.health\n        if (isLava && !healthPackOnLocation) g += 20\n\n        const newNode = new Node(newLocation.x, newLocation.y, health, node, action, g, h)\n        addToOpen(newNode, open)\n      }\n    })\n  }\n}\n\nclass Node {\n  constructor(x, y, health, parent, action, g, h) {\n    this.x = x\n    this.y = y\n    this.health = health\n    this.action = action\n    this.parent = parent\n    this.g = g\n    this.h = h\n  }\n}\nexport default getNextAction\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport Texture from \"./Texture\"\nimport { TEXTURES, TEXTURE_DATA } from \"../Constants/Textures\"\nimport { CONFIG } from \"../Constants/Config\"\nimport Character from \"./Character\"\nimport getNextAction from \"../AStar.js\"\nimport { Modal, Button, Typography } from \"antd\"\n\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport queryString from \"query-string\"\nimport { isSide, calculateMaxTextureSize, calculateMinTextureSize } from \"../HelperFunctions\"\n\nconst Container = styled.div`\n  flex: 1;\n  position: relative;\n  // background-image: url(\"background2.png\");\n  background: #f6d688;\n`\nconst EditorDoneButton = styled(Button)`\n  border-radius: 20px !important;\n`\nconst EditorContainer = styled.div`\n  width: 80px;\n  height: 380px;\n  position: absolute;\n  display: flex;\n  padding: 15px 0;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  left: ${props => (props.expanded ? 0 : -70)}px;\n  transition: left 1s;\n  top: ${props => props.top}px;\n  border-radius: 10px;\n  z-index: 6;\n  background-color: ${CONFIG.SECONDARY_APP_COLOR};\n`\nconst EditorArrow = styled(Button)`\n  position: absolute !important;\n  transform: ${props => (props.expanded === \"true\" ? \"rotateZ(-180deg)\" : \"\")};\n  transition: transform 1s;\n  left: 68px;\n  top: 25px;\n`\nconst TextureLabel = styled(Typography.Text)`\n  color: white !important;\n  margin-bottom: 5px;\n`\nconst Image = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 10px;\n  cursor: pointer;\n`\nexport class Grid extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      texturesMap: [],\n      overLayMap: [],\n      edits: [],\n      modalMessage: \"\",\n      showModal: false,\n      gridWidth: 0,\n      editorExpanded: true,\n      finishAfterNextAnimation: false,\n      gridHeight: 0,\n      xOffset: 0,\n      yOffset: 0,\n      initialPlayerLocation: null,\n      currentPlayerLocation: null,\n      initialChickenLocation: null,\n      currentChickenLocation: null,\n      currentPlayerHealth: props.playerMaxHealth,\n      currentChickenHealth: props.chickenMaxHealth,\n      mouseOverX: null,\n      mouseOverY: null,\n      mouseDown: false\n    }\n    this.onMouseDown = this.onMouseDown.bind(this)\n    this.onMouseUp = this.onMouseUp.bind(this)\n    this.onMouseHoverTextureEnter = this.onMouseHoverTextureEnter.bind(this)\n    this.onMouseHoverTextureLeave = this.onMouseHoverTextureLeave.bind(this)\n    this.onPlaceCharacter = this.onPlaceCharacter.bind(this)\n    this.handleHoverWhilePlacingCharacter = this.handleHoverWhilePlacingCharacter.bind(this)\n    this.getNextCharacterAction = this.getNextCharacterAction.bind(this)\n    this.setCharacterCurrentHealth = this.setCharacterCurrentHealth.bind(this)\n    this.onCharacterFinishMove = this.onCharacterFinishMove.bind(this)\n    this.updateURL = this.updateURL.bind(this)\n  }\n\n  setCharacterCurrentHealth(character, value) {\n    let capitalized = character.charAt(0).toUpperCase() + character.slice(1)\n    this.setState({ [\"current\" + capitalized + \"Health\"]: value })\n  }\n  onMouseDown(e, x, y) {\n    e.persist()\n    this.setState({ mouseDown: true }, () => {\n      this.onMouseHoverTextureEnter(e, x, y)\n    })\n  }\n  onPlaceCharacter() {\n    this.props.setSelectedEditTexture(null)\n  }\n  onMouseUp() {\n    this.setState({ mouseDown: false })\n  }\n  handleHoverWhilePlacingCharacter(characterType, x, y) {\n    if (characterType === TEXTURES.CHICKEN_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.CHICKEN)\n      this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n    }\n    if (characterType === TEXTURES.PLAYER_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.PLAYER)\n      this.setState({ initialPlayerLocation: [x, y], currentPlayerLocation: [x, y] })\n    }\n  }\n  resetCharactersLocation(character) {\n    if (character === CONSTANTS.PLAYER) {\n      let player = document.getElementById(CONSTANTS.PLAYER)\n      player.style.left = 0\n      player.style.top = 0\n    } else {\n      let chicken = document.getElementById(CONSTANTS.CHICKEN)\n      chicken.style.left = 0\n      chicken.style.top = 0\n    }\n  }\n  handleFollowCursor(x, y) {\n    this.resetCharactersLocation(CONSTANTS.CHICKEN)\n    this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n  }\n\n  updateURL() {\n    let newURLObject = {\n      playerSpeed: this.props.playerSpeed,\n      playerMaxHealth: this.props.playerMaxHealth,\n      initialTexturesMap: this.state.texturesMap,\n      searchPriority: this.props.searchPriority,\n      allowDiagonalActions: this.props.allowDiagonalActions,\n      initialOverLayMap: this.state.overLayMap,\n      minHeight: window.screen.height,\n      minWidth: window.screen.width,\n      chickenSpeed: this.props.chickenSpeed,\n      textureSize: this.props.textureSize,\n      firstRenderPlayerLocation: this.state.initialPlayerLocation,\n      firstRenderChickenLocation: this.state.initialChickenLocation\n    }\n\n    window.history.replaceState(\n      {},\n      null,\n      \"?\" +\n        queryString.stringify(newURLObject, {\n          arrayFormat: \"comma\"\n        })\n    )\n  }\n\n  onMouseHoverTextureEnter(e, x, y) {\n    const { selectedEditTexture, editing, followCursor, textureSize } = this.props\n    const {\n      texturesMap,\n      mouseDown,\n      edits,\n      overLayMap,\n      xOffset,\n      yOffset,\n      gridWidth,\n      gridHeight\n    } = this.state\n    let index = y * gridWidth + x\n\n    let side = isSide(x, y, gridWidth, gridHeight)\n    if (e.type === \"touchmove\") {\n      let touchX = Math.floor((e.touches[0].pageX - xOffset) / textureSize)\n      let touchY = Math.floor((e.touches[0].pageY - yOffset) / textureSize)\n      if (touchX >= gridWidth || touchY >= gridHeight) return\n      index = touchY * gridWidth + touchX\n    }\n    if (!side) {\n      if (\n        selectedEditTexture === TEXTURES.PLAYER_IDLE ||\n        selectedEditTexture === TEXTURES.CHICKEN_IDLE\n      ) {\n        this.handleHoverWhilePlacingCharacter(selectedEditTexture, x, y)\n      } else if (editing) {\n        if (e.target !== null && !(\"ontouchstart\" in window)) {\n          e.target.parentElement.style.border = CONFIG.EDITING_BORDER\n        }\n        if (selectedEditTexture === TEXTURES.HEALTH_PACK) {\n          if (mouseDown) {\n            let newOverLayMap = overLayMap.slice()\n            newOverLayMap[index] =\n              overLayMap[index] === TEXTURES.HEALTH_PACK\n                ? TEXTURES.TRANSPARENT\n                : selectedEditTexture\n            this.setState({\n              overLayMap: newOverLayMap,\n              mouseOverX: x,\n              mouseOverY: y,\n              mouseDown: false,\n              edits: [...edits, { type: CONSTANTS.OVERLAY, texture: overLayMap[index], x, y }]\n            })\n          } else {\n            this.setState({ mouseOverX: x, mouseOverY: y })\n          }\n        } else if (texturesMap[index] !== selectedEditTexture) {\n          if (mouseDown) {\n            let newTexturesMap = texturesMap.slice()\n            newTexturesMap[index] = selectedEditTexture\n            this.setState({\n              texturesMap: newTexturesMap,\n              mouseOverX: x,\n              mouseOverY: y,\n              edits: [...edits, { type: CONSTANTS.TEXTURE, texture: texturesMap[index], x, y }]\n            })\n          } else {\n            this.setState({ mouseOverX: x, mouseOverY: y })\n          }\n        }\n      } else if (followCursor) {\n        this.handleFollowCursor(x, y)\n      }\n    }\n  }\n  onMouseHoverTextureLeave(e) {\n    if (this.props.editing) {\n      this.setState({ mouseOverX: null, mouseOverY: null })\n      e.target.parentElement.style.border = \"0\"\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.textureSize !== this.props.textureSize) {\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    }\n    if (prevProps.playerMaxHealth !== this.props.playerMaxHealth) {\n      this.setState({ currentPlayerHealth: this.props.playerMaxHealth })\n    }\n  }\n\n  initializeGridWithTextureSize(textureSize, tMap, oMap, useURL) {\n    let gridWidth = Math.floor(this.container.offsetWidth / textureSize)\n    let gridHeight = Math.floor(this.container.offsetHeight / textureSize)\n    let xOffset = (this.container.offsetWidth % textureSize) / 2\n    let yOffset = (this.container.offsetHeight % textureSize) / 2\n    let playerLocation =\n      useURL !== undefined && this.props.firstRenderPlayerLocation !== null\n        ? this.props.firstRenderPlayerLocation\n        : [1, 1]\n    let chickenLocation =\n      useURL !== undefined && this.props.firstRenderChickenLocation !== null\n        ? this.props.firstRenderChickenLocation\n        : [gridWidth - 2, 1]\n    let texturesMap =\n      tMap === undefined\n        ? new Array(gridWidth * gridHeight).fill(TEXTURES.FLOOR)\n        : new Array(gridWidth * gridHeight).fill(TEXTURES.FLOOR).map((value, index) => {\n            return tMap[index] !== undefined ? tMap[index] : value\n          })\n    let overLayMap =\n      oMap === undefined\n        ? new Array(gridWidth * gridHeight).fill(TEXTURES.TRANSPARENT)\n        : new Array(gridWidth * gridHeight).fill(TEXTURES.TRANSPARENT).map((value, index) => {\n            return oMap[index] !== undefined ? oMap[index] : value\n          })\n\n    this.setState({\n      texturesMap: texturesMap,\n      overLayMap: overLayMap,\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      initialPlayerLocation: playerLocation,\n      initialChickenLocation: chickenLocation,\n      currentPlayerLocation: playerLocation,\n      currentChickenLocation: chickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      edits: []\n    })\n    this.props.envIsReady()\n  }\n\n  getNextCharacterAction(type) {\n    let action = getNextAction(this.state, this.props, type)\n    if (action[0] !== 0 || action[1] !== 0) {\n      if (type === CONSTANTS.PLAYER) {\n        let newPosition = [\n          this.state.currentPlayerLocation[0] + action[0],\n          this.state.currentPlayerLocation[1] + action[1]\n        ]\n        this.setState({ currentPlayerLocation: newPosition })\n      } else {\n        let newPosition = [\n          this.state.currentChickenLocation[0] + action[0],\n          this.state.currentChickenLocation[1] + action[1]\n        ]\n        this.setState({ currentChickenLocation: newPosition })\n      }\n    }\n\n    return action\n  }\n  undoEdit() {\n    if (this.state.edits.length > 0) {\n      let editsCopy = this.state.edits.slice()\n      let editToUndo = editsCopy.pop()\n      let index = editToUndo.y * this.state.gridWidth + editToUndo.x\n      if (editToUndo.type === CONSTANTS.TEXTURE) {\n        let texturesMapCopy = this.state.texturesMap.slice()\n        texturesMapCopy[index] = editToUndo.texture\n        this.setState({ texturesMap: texturesMapCopy, edits: editsCopy })\n      } else if (editToUndo.type === CONSTANTS.OVERLAY) {\n        let overLayMapCopy = this.state.overLayMap.slice()\n        overLayMapCopy[index] = editToUndo.texture\n        this.setState({ overLayMap: overLayMapCopy, edits: editsCopy })\n      }\n    }\n  }\n  componentDidMount() {\n    let validTextureSize =\n      this.props.textureSize >= calculateMinTextureSize(window) &&\n      this.props.textureSize <= calculateMaxTextureSize(window)\n    let mapCanFit =\n      this.props.URLParams.minHeight <= window.screen.height &&\n      this.props.URLParams.minWidth <= window.screen.width\n    if (validTextureSize && mapCanFit) {\n      if (this.props.initialTexturesMap.length > 0 && this.props.initialOverLayMap.length > 0) {\n        this.initializeGridWithTextureSize(\n          this.props.textureSize,\n          this.props.initialTexturesMap,\n          this.props.initialOverLayMap,\n          true\n        )\n      } else {\n        this.initializeGridWithTextureSize(this.props.textureSize)\n      }\n    } else {\n      if (!mapCanFit && this.props.URLParams.initialTexturesMap !== undefined) {\n        this.setState({\n          showModal: true,\n          modalMessage:\n            \"We could not load the map from the link, the map was created on a screen bigger than the one you are using currently. Try again using a bigger screen.\"\n        })\n      }\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    }\n    this.props.onRef(this)\n    window.addEventListener(\"resize\", e =>\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    )\n  }\n  onCharacterFinishMove(characterType, action) {\n    const { overLayMap, currentPlayerLocation, currentChickenLocation, texturesMap } = this.state\n    let capitalized = characterType.charAt(0).toUpperCase() + characterType.slice(1)\n    let characterLocation = this.state[\"current\" + capitalized + \"Location\"]\n    let currentCharacterHealth = this.state[\"current\" + capitalized + \"Health\"]\n    let index = characterLocation[1] * this.state.gridWidth + characterLocation[0]\n    if (texturesMap[index] === TEXTURES.FIRE) {\n      this.setCharacterCurrentHealth(characterType, currentCharacterHealth - 1)\n    }\n    if (overLayMap[index] === TEXTURES.HEALTH_PACK) {\n      let newOverLayMap = overLayMap.slice()\n      newOverLayMap[index] = TEXTURES.TRANSPARENT\n      this.setState({\n        overLayMap: newOverLayMap\n      })\n      this.setCharacterCurrentHealth(characterType, this.props.playerMaxHealth)\n    }\n    if (this.state.finishAfterNextAnimation) {\n      this.props.onFinishGame()\n      this.props.onClickRestart()\n    }\n    if (\n      currentPlayerLocation[0] === currentChickenLocation[0] &&\n      currentPlayerLocation[1] === currentChickenLocation[1]\n    ) {\n      if (this.props.chickenSpeed === 0) {\n        this.props.onFinishGame()\n        this.props.onClickRestart()\n      } else if (characterType === CONSTANTS.PLAYER && !this.props.followCursor) {\n        this.setState({ finishAfterNextAnimation: true })\n      }\n    }\n    if (\n      currentPlayerLocation[0] === currentChickenLocation[0] &&\n      currentPlayerLocation[1] === currentChickenLocation[1] &&\n      characterType === CONSTANTS.PLAYER &&\n      !this.props.followCursor\n    ) {\n      this.setState({ finishAfterNextAnimation: true })\n    }\n  }\n  onSelectCustomLevel(levelData) {\n    this.initializeGridWithTextureSize(\n      levelData.textureSize,\n      levelData.initialTexturesMap,\n      levelData.initialOverLayMap,\n      true\n    )\n  }\n  onClickTexture(texture) {\n    this.props.setEditing(true)\n    this.props.setSelectedEditTexture(texture)\n  }\n  onClickRestart() {\n    this.player.onClickRestart()\n    this.chicken.onClickRestart()\n    this.setState({\n      currentPlayerLocation: this.state.initialPlayerLocation,\n      currentChickenLocation: this.state.initialChickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      finishAfterNextAnimation: false\n    })\n  }\n  render() {\n    const {\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      texturesMap,\n      overLayMap,\n      mouseOverX,\n      mouseOverY,\n      initialPlayerLocation,\n      initialChickenLocation,\n      showModal,\n      modalMessage,\n      currentPlayerHealth,\n      editorExpanded\n    } = this.state\n    const {\n      textureSize,\n      inProgress,\n      paused,\n      followCursor,\n      editing,\n      selectedEditTexture,\n      playerSpeed,\n      setEditing,\n      playerMaxHealth,\n      chickenSpeed\n    } = this.props\n    let isEditingOverLay = selectedEditTexture === TEXTURES.HEALTH_PACK\n    return (\n      <Container onMouseLeave={this.onMouseUp} ref={el => (this.container = el)}>\n        <Modal\n          closable={false}\n          footer={[\n            <Button type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          title={\"Sorry\"}\n          visible={showModal}\n        >\n          {modalMessage}\n        </Modal>\n        <EditorContainer\n          top={this.container !== undefined ? this.container.offsetHeight / 2 : 0}\n          expanded={editorExpanded}\n        >\n          <EditorArrow\n            expanded={editorExpanded ? \"true\" : \"false\"}\n            onClick={() => this.setState({ editorExpanded: !editorExpanded })}\n            size=\"small\"\n            shape=\"circle\"\n            icon=\"arrow-right\"\n          ></EditorArrow>\n          <Image\n            onClick={() => this.onClickTexture(22)}\n            src={TEXTURE_DATA[TEXTURES.FLOOR].src}\n          ></Image>\n          <TextureLabel>Floor</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.FIRE)}\n            src={TEXTURE_DATA[TEXTURES.FIRE].icon}\n          ></Image>\n          <TextureLabel>Fire</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.WALL)}\n            src={TEXTURE_DATA[TEXTURES.WALL].src}\n          ></Image>\n          <TextureLabel>Rock</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.HEALTH_PACK)}\n            src={TEXTURE_DATA[TEXTURES.WALL].src}\n          ></Image>\n          <TextureLabel>Health</TextureLabel>\n          <EditorDoneButton\n            onClick={() => {\n              setEditing(false)\n              this.setState({ editorExpanded: false })\n            }}\n            size=\"small\"\n          >\n            Done\n          </EditorDoneButton>\n        </EditorContainer>\n        {texturesMap.map((texture, index) => {\n          const x = index % gridWidth\n          const y = Math.floor(index / gridWidth)\n          const left = x === 0\n          const right = x === gridWidth - 1\n          const top = y === 0\n          const bottom = y === gridHeight - 1\n          let side = isSide(x, y, gridWidth, gridHeight)\n          let floorTexture = \"FLOOR\"\n          if (top) floorTexture += \"_TOP\"\n          if (bottom) floorTexture += \"_BOTTOM\"\n          if (left) floorTexture += \"_LEFT\"\n          if (right) floorTexture += \"_RIGHT\"\n          let textureToRenderIfSide = TEXTURES[floorTexture]\n          let isBeingEdited = editing && mouseOverX === x && mouseOverY === y\n          return (\n            <Texture\n              x={x}\n              y={y}\n              key={index}\n              textureSize={textureSize}\n              xOffset={xOffset}\n              zIndex={1}\n              yOffset={yOffset}\n              texture={\n                isBeingEdited && !isEditingOverLay\n                  ? selectedEditTexture\n                  : side\n                  ? textureToRenderIfSide\n                  : texture\n              }\n            ></Texture>\n          )\n        })}\n        {overLayMap.map((overLayTexture, index) => {\n          const x = index % gridWidth\n          const y = Math.floor(index / gridWidth)\n          let isBeingEdited = editing && mouseOverX === x && mouseOverY === y\n          return (\n            <Texture\n              x={x}\n              y={y}\n              key={index}\n              onMouseHoverTextureEnter={e => this.onMouseHoverTextureEnter(e, x, y)}\n              onMouseHoverTextureLeave={e => this.onMouseHoverTextureLeave(e)}\n              textureSize={textureSize}\n              onMouseDown={e => this.onMouseDown(e, x, y)}\n              zIndex={2}\n              onMouseUp={this.onMouseUp}\n              xOffset={xOffset}\n              yOffset={yOffset}\n              texture={isBeingEdited && isEditingOverLay ? selectedEditTexture : overLayTexture}\n            ></Texture>\n          )\n        })}\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.player = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialPlayerLocation}\n          textureSize={textureSize}\n          movementSpeed={playerSpeed}\n          inProgress={inProgress}\n          paused={paused}\n          getNextAction={this.getNextCharacterAction}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          currentHealth={currentPlayerHealth}\n          maxHealth={playerMaxHealth}\n          renderOnScreen={true}\n          healthBar={true}\n          type={CONSTANTS.PLAYER}\n          zIndex={5}\n        ></Character>\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.chicken = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialChickenLocation}\n          textureSize={textureSize}\n          movementSpeed={chickenSpeed}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          inProgress={inProgress}\n          paused={paused}\n          getNextAction={this.getNextCharacterAction}\n          renderOnScreen={!followCursor}\n          type={CONSTANTS.CHICKEN}\n          zIndex={4}\n        ></Character>\n      </Container>\n    )\n  }\n}\n\nexport default Grid\n","export const BREAKPOINTS = {\n  MEDIUM_WIDTH: \"1100px\",\n  SMALL_WIDTH: \"900px\",\n  VERY_SMALL_WIDTH: \"720px\",\n  MEDIUM_HEIGHT: \"960px\",\n  SMALL_HEIGHT: \"820px\",\n  VERY_SMALL_HEIGHT: \"700px\"\n}\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport { Slider, Button, Typography, Radio, Tooltip, Modal, Input } from \"antd\"\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport { CONFIG } from \"../Constants/Config\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport { BREAKPOINTS } from \"../Constants/BreakPoints\"\n\nimport { calculateMaxTextureSize, calculateMinTextureSize } from \"../HelperFunctions\"\nconst Container = styled.div`\n  width: 100%;\n  height: fit-content;\n  background-color: ${CONFIG.MAIN_APP_COLOR};\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  padding-top: 15px;\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    font-size: 11px;\n  }\n  @media (max-width: ${BREAKPOINTS.SMALL_WIDTH}) {\n    font-size: 11px;\n  }\n`\nconst FlexDivCenter = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 10px;\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    margin-bottom: 6px;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    margin-bottom: 4px;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    margin-bottom: 2px;\n  }\n`\nconst StyledText = styled(Typography.Text)`\n  color: white !important;\n`\nconst StyledGitButton = styled(Button)`\n  display: block;\n`\nconst StyledButton = styled(Button)`\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    height: 35px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    height: 30px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    height: 25px !important;\n  }\n  border-radius: 20px !important;\n  height: 43px !important;\n`\nconst Left = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  flex-direction: column;\n  flex-grow: 1;\n  height: 100%;\n  align-self: flex-start;\n  padding-top: 30px;\n`\nconst Center = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  flex-direction: column;\n  align-self: center;\n  flex-grow: 0.3;\n`\nconst Right = styled.div`\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  margin: auto;\n  flex-direction: column;\n  flex-grow: 1;\n  align-self: flex-end;\n  padding-top: 30px;\n`\nconst Label = styled(Typography.Text)`\n  margin-left: 6px;\n  margin-right: 6px;\n  display: inline-block;\n  width: 20%;\n  color: white !important;\n`\nconst StyledSlider = styled(Slider)`\n  width: 70%;\n  display: inline-block;\n  min-width: 50px;\n  margin: 0 !important;\n`\nconst SliderContainer = styled.div`\n  width: 100%;\n  margin-bottom: 60px;\n  @media (max-width: ${BREAKPOINTS.VERY_SMALL_WIDTH}) {\n    margin-bottom: 0;\n  }\n  display: flex;\n  align-items: center;\n`\nconst StyledTitle = styled(Typography.Title)`\n  color: white !important;\n`\nconst LeftRightContainer = styled.div`\n  width: 60%;\n  @media (max-width: ${BREAKPOINTS.MEDIUM_WIDTH}) {\n    width: 100%;\n  }\n  display: flex;\n  flex-direction: column;\n`\nconst PlayButton = styled(Button)`\n  margin: ${props => props.margin};\n  font-size: ${props => props.fontSize + \"px !important\"};\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    font-size: 25px !important;\n  }\n  height: fit-content !important;\n  width: fit-content !important;\n  &:focus,\n  &:active {\n    color: white !important;\n  }\n  &:hover {\n    color: #40a9ff !important;\n  }\n`\nconst playerMaxHealth = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerMaxHealthLabel\">{smallScreen ? \"player Max Health\" : \"Max Health\"}</Label>,\n    <StyledSlider\n      key=\"playerMaxHealthSlider\"\n      onChange={value => props.setCharacterMaxHealth(CONSTANTS.PLAYER, value)}\n      value={props.playerMaxHealth}\n      disabled={props.inProgress}\n      min={1}\n      max={10}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Max Health \">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst playerSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerSpeedLabel\">{smallScreen ? \"player Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"playerSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.PLAYER, speed)}\n      value={props.playerSpeed}\n      min={1}\n      max={4}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst chickenSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"chickenSpeedLabel\">{smallScreen ? \"Chicken Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"chickenSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.CHICKEN, speed)}\n      value={props.chickenSpeed}\n      min={0}\n      max={4}\n      disabled={true}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Chicken AI Coming Soon!\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst getPlayButton = props => {\n  return props.inProgress ? (\n    <div>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => (props.paused ? props.onClickResume() : props.onClickPause())}\n        ghost={true}\n        margin={\"0 4px 0 15px\"}\n        icon={props.paused ? \"play-circle\" : \"pause-circle\"}\n      ></PlayButton>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => props.onClickRestart()}\n        margin={\"0 15px 0 4px\"}\n        ghost={true}\n        icon={\"stop\"}\n      ></PlayButton>\n    </div>\n  ) : (\n    <PlayButton\n      disabled={!props.ready}\n      type={\"link\"}\n      ghost={true}\n      fontSize={35}\n      margin={\"0 15px 0 15px\"}\n      onClick={() => props.onClickStart()}\n      icon={\"play-circle\"}\n    ></PlayButton>\n  )\n}\nexport default class Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      minTextureSize: calculateMinTextureSize(window),\n      maxTextureSize: calculateMaxTextureSize(window)\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", e => {\n      this.setState({\n        minTextureSize: calculateMinTextureSize(window),\n        maxTextureSize: calculateMaxTextureSize(window)\n      })\n    })\n  }\n  copyLinkToClipBoard() {\n    let el = document.getElementById(\"shareLinkInput\")\n    el.select()\n    el.setSelectionRange(0, 99999)\n    document.execCommand(\"copy\")\n  }\n  render() {\n    const smallScreenWidth = window.screen.width <= parseInt(BREAKPOINTS.VERY_SMALL_WIDTH, 10)\n    const smallScreenHeight = window.screen.height <= parseInt(BREAKPOINTS.SMALL_HEIGHT, 10)\n    const props = this.props\n    const { minTextureSize, maxTextureSize, showModal } = this.state\n    return (\n      <Container>\n        <Modal\n          closable={false}\n          footer={[\n            <Button key={1} type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          visible={showModal}\n          title={\"Share Your Map!\"}\n        >\n          <Typography.Text>Copy This Link and Send it To your Friends</Typography.Text>\n          <div>\n            <Input\n              id={\"shareLinkInput\"}\n              style={{ margin: \"20px 20px 20px 0\", width: \"80%\" }}\n              defaultValue={window.location.href}\n            ></Input>\n            <Button onClick={() => this.copyLinkToClipBoard()} type=\"secondary\">\n              Copy\n            </Button>\n          </div>\n          <Typography.Text type={\"secondary\"}>\n            Note that your friend's screen needs to be at least as big as your screen to maintain\n            the shape of the map!\n          </Typography.Text>\n        </Modal>\n        {smallScreenWidth ? null : (\n          <Left>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Player Options</StyledTitle>\n              </FlexDivCenter>\n              {playerMaxHealth(props, false)}\n              {playerSpeed(props, false)}\n            </LeftRightContainer>\n          </Left>\n        )}\n\n        <Center>\n          <FlexDivCenter>\n            <Tooltip placement=\"top\" title=\"The player Will Follow The Mouse Cursor on The Screen\">\n              <StyledButton onClick={() => props.enableFollowCursor()} style={{ margin: \"0\" }}>\n                Follow Cursor\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Undo The Last Edit to The Map\">\n              <StyledButton onClick={() => props.onClickUndo()} style={{ margin: \"0 15px 0 0\" }}>\n                Undo Edit\n              </StyledButton>\n            </Tooltip>\n            {getPlayButton(props)}\n            <Tooltip placement=\"right\" title=\"Share This Map With a Friend\">\n              <StyledButton\n                onClick={() => {\n                  props.generateLink()\n                  this.setState({ showModal: true })\n                }}\n                style={{ margin: \"0 0 0 15px\" }}\n              >\n                Share Map\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Position The Start Location of The player\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.PLAYER_IDLE)}\n                style={{ margin: \"0 10px 0 0\" }}\n              >\n                Place Player\n              </StyledButton>\n            </Tooltip>\n            <Tooltip placement=\"right\" title=\"Position The Start Location of The Chicken\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.CHICKEN_IDLE)}\n                style={{ margin: \"0 0 0 10px\" }}\n              >\n                Place Chicken\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <Tooltip placement=\"right\" title=\"Changes The Grid Size\">\n            <FlexDivCenter>\n              <Label>Map Scale</Label>\n              <StyledSlider\n                min={minTextureSize}\n                max={maxTextureSize}\n                onChange={props.setTextureSize}\n                disabled={props.inProgress}\n                value={props.textureSize}\n                tooltipPlacement={\"top\"}\n              />\n            </FlexDivCenter>\n          </Tooltip>\n          {smallScreenWidth\n            ? [\n                <Tooltip key={1} placement=\"topLeft\" title=\"Changes The player Max Health\">\n                  <FlexDivCenter>{playerMaxHealth(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={2} placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n                  <FlexDivCenter>{playerSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={3} placement=\"topLeft\" title=\"Chicken AI Coming Soon!\">\n                  <FlexDivCenter>{chickenSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>\n              ]\n            : null}\n\n          <Tooltip placement=\"right\" title=\"Loads a Pre Made Level Created By The Developer\">\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Pre made Levels</Label>\n              <Radio.Group\n                value={props.selectedLevel}\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                onChange={e => props.setSelectedLevel(e.target.value)}\n              >\n                <Radio.Button value={1}>1</Radio.Button>\n                <Radio.Button value={2}>2</Radio.Button>\n                <Radio.Button value={3}>3</Radio.Button>\n                <Radio.Button value={4}>4</Radio.Button>\n                <Radio.Button value={5}>5</Radio.Button>\n                <Radio.Button value={6}>6</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <Tooltip\n            placement=\"right\"\n            title=\"Changes Wether The player Maximizes Health or Minimizes Distance\"\n          >\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Search Priority</Label>\n              <Radio.Group\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                value={props.searchPriority}\n                onChange={e => props.setSearchPriority(e.target.value)}\n              >\n                <Radio.Button value={CONSTANTS.HEALTH}>HEALTH</Radio.Button>\n                <Radio.Button value={CONSTANTS.SPEED}>SPEED</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <StyledText>Made By Mark Armanious © 2019</StyledText>\n          <StyledGitButton\n            href={\"https://github.com/markarmanus/path_finder\"}\n            target={\"_blank\"}\n            shape={\"circle\"}\n            ghost={true}\n            icon={\"github\"}\n            type={\"link\"}\n          ></StyledGitButton>\n        </Center>\n        {smallScreenWidth ? null : (\n          <Right>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Chicken Options</StyledTitle>\n              </FlexDivCenter>\n              {chickenSpeed(props, false)}\n            </LeftRightContainer>\n          </Right>\n        )}\n      </Container>\n    )\n  }\n}\n","export const LEVELS = {\n  1: \"chickenSpeed=0&firstRenderChickenLocation=4,1&firstRenderPlayerLocation=1,1&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=22,22,22,22,22,22,22,22,11,11,22,22,22,2,11,11,22,22,22,2,22,22,22,22,22,22,22,22,22,22&minHeight=640&minWidth=360&playerMaxHealth=4&playerSpeed=1&searchPriority=health&textureSize=52\",\n  2: \"allowDiagonalActions=false&firstRenderPlayerLocation=0,0&firstRenderChickenLocation=28,0&initialOverLayMapinitialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,2,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,2,1,2,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,2,2,2,2,1,2,2,2,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,2,2,1,2,1,1,2,1,2,2,1,1,2,1,2,2,1,1,1,1,1,1,1,1,1,2,1,1,1,2,2,1,2,1,2,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,2,1,2,1,2,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&playerMaxHealth=5&playerSpeed=1&searchPriority=health&textureSize=66&chickenSpeed=1\",\n  3: \"minWidth=1920&minHeight=600&allowDiagonalActions=true&firstRenderPlayerLocation=3,0&firstRenderChickenLocation=5,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&playerMaxHealth=10&playerSpeed=2&searchPriority=speed&textureSize=197&chickenSpeed=3\",\n  4: \"http://localhost:3000/?allowDiagonalActions=true&firstRenderPlayerLocation=0,0&firstRenderChickenLocation=11,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&minHeight=937&minWidth=1920&playerMaxHealth=10&playerSpeed=3&searchPriority=speed&textureSize=159&chickenSpeed=3\",\n  5: \"allowDiagonalActions=false&firstRenderPlayerLocation=3,2&firstRenderChickenLocation=5,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1&playerMaxHealth=10&playerSpeed=4&searchPriority=health&textureSize=211&chickenSpeed=1\"\n}\n","import React, { Component } from \"react\"\nimport Grid from \"./Grid\"\nimport Footer from \"./Footer\"\nimport { CONFIG } from \"../Constants/Config\"\nimport styled from \"styled-components\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport queryString from \"query-string\"\nimport { LEVELS } from \"../Constants/Levels\"\nimport { message } from \"antd\"\nimport { calculateBestTextureSize } from \"../HelperFunctions\"\nimport \"antd/dist/antd.css\"\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n`\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    let params = this.parseLevelData(this.props.location.search)\n    this.state = {\n      textureSize: params.textureSize ? params.textureSize : calculateBestTextureSize(window),\n      selectedEditTexture: null,\n      editing: false,\n      selectedLevel: CONFIG.DEFAULT_SELECTED_LEVEL,\n      inProgress: false,\n      URLParams: params,\n      paused: false,\n      ready: false,\n      followCursor: false,\n      // allowDiagonalActions: params.allowDiagonalActions ? params.allowDiagonalActions : false,\n      initialTexturesMap: params.initialTexturesMap ? params.initialTexturesMap : [],\n      initialOverLayMap: params.initialOverLayMap ? params.initialOverLayMap : [],\n      playerSpeed: params.playerSpeed ? params.playerSpeed : CONFIG.DEFAULT_PLAYER_SPEED,\n      firstRenderPlayerLocation: params.firstRenderPlayerLocation\n        ? params.firstRenderPlayerLocation\n        : null,\n      firstRenderChickenLocation: params.firstRenderChickenLocation\n        ? params.firstRenderChickenLocation\n        : null,\n      playerMaxHealth: params.playerMaxHealth\n        ? params.playerMaxHealth\n        : CONFIG.DEFAULT_PLAYER_HEALTH,\n      searchPriority: params.searchPriority\n        ? params.searchPriority\n        : CONFIG.DEFAULT_SEARCH_PRIORITY,\n      chickenSpeed: params.chickenSpeed ? params.chickenSpeed : CONFIG.DEFAULT_CHICKEN_SPEED\n    }\n    this.onClickUndo = this.onClickUndo.bind(this)\n    this.setTextureSize = this.setTextureSize.bind(this)\n    this.setSelectedEditTexture = this.setSelectedEditTexture.bind(this)\n    this.setEditing = this.setEditing.bind(this)\n    this.onClickStart = this.onClickStart.bind(this)\n    this.onClickRestart = this.onClickRestart.bind(this)\n    this.onClickPause = this.onClickPause.bind(this)\n    this.onClickResume = this.onClickResume.bind(this)\n    this.setCharacterSpeed = this.setCharacterSpeed.bind(this)\n    this.envIsReady = this.envIsReady.bind(this)\n    this.enableFollowCursor = this.enableFollowCursor.bind(this)\n    this.setCharacterMaxHealth = this.setCharacterMaxHealth.bind(this)\n    this.setSearchPriority = this.setSearchPriority.bind(this)\n    this.onFinishGame = this.onFinishGame.bind(this)\n    this.generateLink = this.generateLink.bind(this)\n    this.setAllowDiagonalActions = this.setAllowDiagonalActions.bind(this)\n    this.setSelectedLevel = this.setSelectedLevel.bind(this)\n    this.parseLevelData = this.parseLevelData.bind(this)\n  }\n  parseLevelData(value) {\n    return queryString.parse(value, {\n      arrayFormat: \"comma\",\n      parseNumbers: true,\n      parseBooleans: true\n    })\n  }\n  setSelectedLevel(level) {\n    let levelData = this.parseLevelData(LEVELS[level])\n\n    if (levelData.minHeight <= window.screen.height && levelData.minWidth <= window.screen.width) {\n      this.setState({ selectedLevel: level, ...levelData }, () => {\n        this.grid.onSelectCustomLevel(levelData)\n      })\n    } else {\n      message.error(\"Your Screen is Too Small For This Map!\")\n    }\n  }\n  setAllowDiagonalActions(value) {\n    this.setState({ allowDiagonalActions: value })\n  }\n  onFinishGame() {\n    this.setState({ inProgress: false })\n  }\n  generateLink() {\n    this.grid.updateURL()\n  }\n  setCharacterMaxHealth(type, value) {\n    this.setState({ [type + \"MaxHealth\"]: value })\n  }\n  enableFollowCursor() {\n    if (this.state.ready) {\n      this.setState({ followCursor: true, inProgress: true })\n    }\n  }\n  setCharacterSpeed(type, speed) {\n    this.setState({ [type + \"Speed\"]: speed })\n  }\n  onClickUndo() {\n    this.grid.undoEdit()\n  }\n  setTextureSize(size) {\n    this.setState({ textureSize: size })\n    this.onClickRestart()\n  }\n  envIsReady() {\n    this.setState({ ready: true })\n  }\n  setEditing(value) {\n    this.setState({ editing: value })\n  }\n  setSelectedEditTexture(texture) {\n    let isEditing =\n      texture !== null && texture !== TEXTURES.PLAYER_IDLE && texture !== TEXTURES.CHICKEN_IDLE\n    this.setState({\n      selectedEditTexture: texture,\n      editing: isEditing\n    })\n  }\n  onClickStart() {\n    this.setState({ inProgress: true })\n  }\n  onClickRestart() {\n    this.setState({\n      paused: false,\n      inProgress: false,\n      selectedEditTexture: null,\n      editing: false,\n      followCursor: false\n    })\n    this.grid.onClickRestart()\n  }\n  onClickPause() {\n    this.setState({ paused: true })\n  }\n  onClickResume() {\n    this.setState({ paused: false })\n  }\n  setSearchPriority(value) {\n    this.setState({ searchPriority: value })\n  }\n  render() {\n    return (\n      <MainContainer>\n        <Grid onRef={ref => (this.grid = ref)} {...this.state} {...this}></Grid>\n        <Footer {...this} {...this.state}></Footer>\n      </MainContainer>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport AppRoute from \"./Components/AppRoute\"\n\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<AppRoute />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport App from \"./App\"\nexport default function AppRoute() {\n  return (\n    <Router>\n      <Route path={\"/\"} component={App}></Route>\n    </Router>\n  )\n}\n"],"sourceRoot":""}