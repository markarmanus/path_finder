{"version":3,"sources":["Constants/Textures.js","Constants/Constants.js","Constants/Config.js","HelperFunctions.js","Components/Texture.js","Components/Character.js","AI.js","Components/Grid.js","Constants/BreakPoints.js","Components/Footer.js","Constants/Levels.js","Components/App.js","serviceWorker.js","index.js","Components/AppRoute.js"],"names":["TEXTURES","FIRE","CHICKEN_RUNNING","CHICKEN_IDLE","CHICKEN_UP","CHICKEN_DOWN","PLAYER_IDLE","PLAYER_UP","PLAYER_DOWN","PLAYER_RUNNING","WALL","HEALTH_PACK","TRANSPARENT","FLOOR_BOTTOM","FLOOR_TOP","FLOOR_RIGHT","FLOOR_LEFT","FLOOR_TOP_LEFT","FLOOR_TOP_RIGHT","FLOOR_BOTTOM_RIGHT","FLOOR_BOTTOM_LEFT","FLOOR","TEXTURE_DATA","2","animationSpeed","animated","numberOfSprites","src","icon","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","CONSTANTS","CONFIG","DEFAULT_PLAYER_SPEED","DEFAULT_CHICKEN_SPEED","DEFAULT_PLAYER_HEALTH","DEFAULT_CHICKEN_HEALTH","MIN_APPLICATION_HEIGHT","MIN_APPLICATION_WIDTH","MAIN_APP_COLOR","SECONDARY_APP_COLOR","DEFAULT_SELECTED_LEVEL","DEFAULT_SEARCH_PRIORITY","EDITING_BORDER","calculateMaxTextureSize","window","height","screen","width","Math","floor","min","calculateMinTextureSize","max","isSide","x","y","isTouchDevice","getTextureSizeForMap","gridWidth","gridHeight","container","textureSizeBasedOnHeigh","offsetHeight","textureSizeBasedOnWidth","offsetWidth","Sprite","styled","div","props","textureData","Array","isArray","random","length","getTextureSrc","translationTo","keyframes","getAnimation","ProgressBarUnder","textureSize","ProgressBarOver","healthBarPercentage","Texture","state","mouseOver","value","this","setState","nextProps","nextState","texture","xOffset","yOffset","onMouseDown","onMouseUp","onMouseHoverTextureEnter","onMouseHoverTextureLeave","selectedEditTexture","zIndex","editing","selectedEditTextureData","style","position","top","left","overflow","userSelect","undefined","onMouseOut","e","onTouchEnd","onTouchStart","onTouchMove","onMouseOver","Component","CharacterSprite","Character","walking","currentTexture","type","toUpperCase","currentMovementSpeed","movementSpeed","takeAction","bind","setCorrectTexture","setCorrectDirection","doNextAction","action","getNextAction","typeUpperCase","inProgress","paused","currentHealth","initialCharacterLocation","otherCharacterLocation","maxHealth","renderOnScreen","onRef","character","document","getElementById","direction","entity","transform","firstChild","stepsCount","remainder","counter","id","setInterval","offsetLeft","offsetTop","clearInterval","onCharacterFinishMove","onPlaceCharacter","healthBar","costToLocation","from","to","dx","dy","sqrt","isLegalAction","destinationPos","actionType","abs","getActionType","isOutOfBoundaries","isDestinationWall","texturesMap","isHorizontalWall","isVerticalWall","addToOpen","nodeToAdd","open","added","index","node","g","health","nodeToAddF","h","splice","push","getPath","parent","BFSFromPlayer","actions","connected","fill","closed","chickenLocation","currentChickenLocation","Node","shift","forEach","newLocation","isCloseToPlayerX","currentPlayerLocation","isCloseToPlayerY","calculateChickenCollectedPaths","playerLocation","currentPlayerHealth","values","indexOf","pop","isFire","newCost","newHealth","newNode","characterType","allowDiagonalActions","concat","chickenSpeed","start","goal","isPlayerLocation","overLayMap","getNextChickenAction","foundPath","bestPathNode","bestPathFoundHealth","actionsCost","map","playerMaxHealth","searchPriority","healthPackOnLocation","isLava","Container","EditorDoneButton","Button","EditorContainer","expanded","EditorArrow","TextureLabel","Typography","Text","Image","img","Grid","edits","modalMessage","showModal","editorExpanded","initialPlayerLocation","initialChickenLocation","currentChickenHealth","chickenMaxHealth","leftMouseDown","rightMouseDown","handleHoverWhilePlacingCharacter","getNextCharacterAction","setCharacterCurrentHealth","updateURL","capitalized","charAt","slice","persist","button","setSelectedEditTexture","resetCharactersLocation","player","chicken","newURLObject","playerSpeed","initialTexturesMap","initialOverLayMap","firstRenderPlayerLocation","firstRenderChickenLocation","history","replaceState","queryString","stringify","arrayFormat","followCursor","side","touchX","touches","pageX","touchY","pageY","target","parentElement","border","newOverLayMap","newTexturesMap","stateUpdate","editsUpdate","shouldUpdateState","setMouseOver","handleFollowCursor","prevProps","reRenderGrid","initializeGridWithTextureSize","data","playerLocationFromURL","chickenLocationFromURL","envIsReady","newPosition","editsCopy","editToUndo","texturesMapCopy","overLayMapCopy","rendered","URLParams","textureSizeForURLMap","setTextureSize","setTimeout","initializeGridFromData","lowerValue","calculateBestTextureSize","addEventListener","onClickRestart","oncontextmenu","characterLocation","currentCharacterHealth","onFinishGame","levelData","textureSizeForLevel","message","error","onClickPause","setEditing","onMouseLeave","ref","el","closable","footer","onClick","title","visible","size","shape","onClickTexture","overLayTexture","right","bottom","floorTexture","textureToRenderIfSide","key","BREAKPOINTS","TutorialDescription","TutorialImage","TutorialButtonContainer","FlexDivCenter","StyledText","StyledGitButton","StyledButton","Left","Center","Right","Label","StyledSlider","Slider","SliderContainer","StyledTitle","Title","LeftRightContainer","PlayButton","margin","fontSize","smallScreen","component","onChange","setCharacterMaxHealth","disabled","step","tooltipPlacement","placement","item","speed","setCharacterSpeed","Footer","minTextureSize","maxTextureSize","showTutorial","select","setSelectionRange","execCommand","smallScreenWidth","parseInt","smallScreenHeight","onCancel","bodyStyle","padding","textAlign","level","ghost","carousel","prev","next","dots","defaultValue","location","href","copyLinkToClipBoard","enableFollowCursor","onClickUndo","ready","onClickResume","generateLink","onClickStart","getPlayButton","Group","selectedLevel","setSelectedLevel","setSearchPriority","LEVELS","1","MainContainer","App","params","parseLevelData","search","setAllowDiagonalActions","parse","parseNumbers","parseBooleans","grid","onSelectCustomLevel","deviceIsTooSmall","info","toLowerCase","undoEdit","reRender","isEditing","Boolean","hostname","match","ReactDOM","render","path","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.622f8083.chunk.js","sourcesContent":["export const TEXTURES = {\n  FIRE: 2,\n  CHICKEN_RUNNING: 3,\n  CHICKEN_IDLE: 4,\n  CHICKEN_UP: 5,\n  CHICKEN_DOWN: 6,\n  PLAYER_IDLE: 7,\n  PLAYER_UP: 8,\n  PLAYER_DOWN: 9,\n  PLAYER_RUNNING: 10,\n  WALL: 11,\n  HEALTH_PACK: 12,\n  TRANSPARENT: 13,\n  FLOOR_BOTTOM: 14,\n  FLOOR_TOP: 15,\n  FLOOR_RIGHT: 16,\n  FLOOR_LEFT: 17,\n  FLOOR_TOP_LEFT: 18,\n  FLOOR_TOP_RIGHT: 19,\n  FLOOR_BOTTOM_RIGHT: 20,\n  FLOOR_BOTTOM_LEFT: 21,\n  FLOOR: 22\n}\nexport const TEXTURE_DATA = {\n  2: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"campFire.png\",\n    icon: \"campFireIcon.png\"\n  },\n  3: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenRight.png\"\n  },\n  4: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"ChickenIdle.png\"\n  },\n  5: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenUp.png\"\n  },\n  6: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenDown.png\"\n  },\n  7: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"PlayerIdle.png\"\n  },\n  8: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerUp.png\"\n  },\n  9: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerDown.png\"\n  },\n  10: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerRight.png\"\n  },\n  11: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Rock.png\",\n    icon: \"Rock_Icon.png\"\n  },\n  12: {\n    animationSpeed: \"1s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"Health_Pack.png\",\n    icon: \"Health_Icon.png\"\n  },\n  13: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Transparent.png\"\n  },\n  14: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Bottom_1.png\"\n  },\n  15: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Top_1.png\"\n  },\n  16: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Right_1.png\"\n  },\n  17: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Left_1.png\"\n  },\n  18: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Top_Left_1.png\"\n  },\n  19: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Top_Right_1.png\"\n  },\n  20: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Bottom_Right_1.png\"\n  },\n  21: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor_Bottom_Left_1.png\"\n  },\n  22: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: [\"Floor_1.png\", \"Floor_2.png\", \"Floor_3.png\", \"Floor_1.png\"],\n    icon: \"Floor_1.png\"\n  }\n}\n","export const CONSTANTS = {\n  PLAYER: \"player\",\n  CHICKEN: \"chicken\",\n  OVERLAY: \"overLay\",\n  TEXTURE: \"texture\",\n  HEALTH: \"health\",\n  SPEED: \"speed\"\n}\n","import { CONSTANTS } from \"./Constants\"\n\nexport const CONFIG = {\n  DEFAULT_PLAYER_SPEED: 1,\n  DEFAULT_CHICKEN_SPEED: 0,\n  DEFAULT_PLAYER_HEALTH: 5,\n  DEFAULT_CHICKEN_HEALTH: 100,\n  MIN_APPLICATION_HEIGHT: 450,\n  MIN_APPLICATION_WIDTH: 300,\n  MAIN_APP_COLOR: \"#274029\",\n  SECONDARY_APP_COLOR: \"#012622\",\n  DEFAULT_SELECTED_LEVEL: 1,\n  DEFAULT_SEARCH_PRIORITY: CONSTANTS.HEALTH,\n  EDITING_BORDER: \"5px solid purple\"\n}\n","import { CONFIG } from \"./Constants/Config\"\n\nconst calculateBestTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  const lowerValue = height > width ? width : height\n\n  return Math.floor(lowerValue / 10)\n}\nconst calculateMaxTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  return Math.floor(Math.min(...[height / 4, width / 4]))\n}\nconst calculateMinTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n\n  return Math.floor(Math.max(...[height / 50, width / 50]))\n}\nconst isSide = (x, y, width, height) => {\n  const left = x === 0\n  const right = x === width - 1\n  const top = y === 0\n  const bottom = y === height - 1\n  return bottom || top || right || left\n}\nconst isTouchDevice = window => {\n  return \"ontouchstart\" in window\n}\nconst deviceIsTooSmall = window => {\n  return (\n    window.screen.height <= CONFIG.MIN_APPLICATION_HEIGHT ||\n    window.screen.width <= CONFIG.MIN_APPLICATION_WIDTH\n  )\n}\n// Calculates the texture size that will fit a certain grid width and height into the passed in container.\nconst getTextureSizeForMap = (gridWidth, gridHeight, container) => {\n  let textureSizeBasedOnHeigh = Math.floor(container.offsetHeight / gridHeight)\n  let textureSizeBasedOnWidth = Math.floor(container.offsetWidth / gridWidth)\n  return Math.min(textureSizeBasedOnHeigh, textureSizeBasedOnWidth)\n}\n\nexport {\n  calculateMinTextureSize,\n  calculateBestTextureSize,\n  calculateMaxTextureSize,\n  isSide,\n  deviceIsTooSmall,\n  getTextureSizeForMap,\n  isTouchDevice\n}\n","import React, { Component } from \"react\"\nimport { TEXTURE_DATA } from \"../Constants/Textures\"\nimport styled, { keyframes } from \"styled-components\"\nimport { isTouchDevice } from \"../HelperFunctions\"\nconst getTextureSrc = src => {\n  if (Array.isArray(src)) {\n    let random = Math.floor(Math.random() * src.length)\n\n    return src[random]\n  } else {\n    return src\n  }\n}\nconst getAnimation = numberOfSprites => {\n  const translationTo = ((numberOfSprites - 1) / numberOfSprites) * 100\n  const transform = keyframes`\n  from { \n    transform: translateX(0); \n  }\n  to { \n    transform: translateX(-${translationTo}%); \n  }\n}\n`\n  return transform\n}\nconst Sprite = styled.div`\n  width: ${props => props.textureData.numberOfSprites * 100}%;\n  height: 100%;\n  background-image: url(${props => getTextureSrc(props.textureData.src)});\n  background-size: 100%, 100%;\n  background-repeat: ${props => (props.textureData.animated ? \"no-repeat\" : \"unset\")};\n  animation: ${props => getAnimation(props.textureData.numberOfSprites)}\n    ${props => props.textureData.animationSpeed}\n    steps(${props => props.textureData.numberOfSprites - 1})\n    ${props => (props.textureData.animated ? \"infinite\" : 0)};\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  user-select: none;\n\n  left: 0;\n  top: 0;\n`\nconst ProgressBarUnder = styled.div`\n  width: 80%;\n  position: relative;\n  background-color: #661918;\n  margin: auto;\n  border-radius: 10px;\n  height: ${props => props.textureSize * 0.1}px;\n  overflow: hidden;\n`\nconst ProgressBarOver = styled.div`\n  width: 100%;\n  position: relative;\n  background-color: #e03836;\n  margin: auto;\n  border-radius: 10px;\n  transition: right 0.5s;\n  right: ${props => 100 - props.healthBarPercentage}%;\n  height: ${props => props.textureSize * 0.1}px;\n`\nexport class Texture extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: false\n    }\n  }\n  setMouseOver(value) {\n    if (this.state.mouseOver !== value) this.setState({ mouseOver: value })\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      nextProps.texture !== this.props.texture ||\n      nextProps.textureSize !== this.props.textureSize ||\n      nextProps.x !== this.props.x ||\n      nextProps.y !== this.props.y ||\n      nextProps.xOffset !== this.props.xOffset ||\n      nextProps.yOffset !== this.props.yOffset ||\n      nextProps.healthBarPercentage !== this.props.healthBarPercentage ||\n      nextState !== this.state\n    )\n  }\n\n  render() {\n    const {\n      yOffset,\n      xOffset,\n      y,\n      x,\n      onMouseDown,\n      onMouseUp,\n      onMouseHoverTextureEnter,\n      onMouseHoverTextureLeave,\n      texture,\n      selectedEditTexture,\n      zIndex,\n      textureSize,\n      editing,\n      healthBarPercentage\n    } = this.props\n    const textureData = TEXTURE_DATA[texture]\n    const selectedEditTextureData = TEXTURE_DATA[selectedEditTexture]\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          height: textureSize + \"px\",\n          width: textureSize + \"px\",\n          top: yOffset ? y * textureSize + yOffset : y * textureSize,\n          left: xOffset ? x * textureSize + xOffset : x * textureSize,\n          zIndex: zIndex,\n          overflow: \"hidden\",\n          userSelect: \"none\"\n        }}\n      >\n        {healthBarPercentage !== undefined ? (\n          <ProgressBarUnder textureSize={textureSize}>\n            <ProgressBarOver\n              healthBarPercentage={healthBarPercentage}\n              textureSize={textureSize}\n            ></ProgressBarOver>\n          </ProgressBarUnder>\n        ) : null}\n        <Sprite\n          onMouseOut={e => {\n            if (onMouseHoverTextureLeave) onMouseHoverTextureLeave(this, e)\n          }}\n          onMouseUp={onMouseUp}\n          onTouchEnd={onMouseUp}\n          onTouchStart={onMouseDown}\n          textureData={this.state.mouseOver && editing ? selectedEditTextureData : textureData}\n          onTouchMove={e => {\n            if (onMouseHoverTextureEnter) onMouseHoverTextureEnter(this, e)\n          }}\n        >\n          <div\n            style={{ width: \"85%\", height: \"85%\" }}\n            onMouseDown={e => {\n              if (!isTouchDevice(window)) onMouseDown(e)\n            }}\n            onMouseOver={e => {\n              if (onMouseHoverTextureEnter && !isTouchDevice(window))\n                onMouseHoverTextureEnter(this, e)\n            }}\n          ></div>\n        </Sprite>\n      </div>\n    )\n  }\n}\n\nexport default Texture\n","import React, { Component } from \"react\"\nimport Texture from \"./Texture\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport styled from \"styled-components\"\n\nconst CharacterSprite = styled.div`\n  position: absolute;\n`\nexport class Character extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      walking: false,\n      currentTexture: TEXTURES[props.type.toUpperCase() + \"_IDLE\"],\n      currentMovementSpeed: this.props.movementSpeed\n    }\n    this.takeAction = this.takeAction.bind(this)\n    this.setCorrectTexture = this.setCorrectTexture.bind(this)\n    this.setCorrectDirection = this.setCorrectDirection.bind(this)\n    this.doNextAction = this.doNextAction.bind(this)\n  }\n\n  doNextAction() {\n    let action = this.props.getNextAction(this.props.type)\n    let typeUpperCase = this.props.type.toUpperCase()\n    if (action[0] !== 0 || action[1] !== 0) {\n      this.setState({ walking: true })\n      this.takeAction(action)\n    } else if (this.state.currentTexture !== TEXTURES[typeUpperCase + \"_IDLE\"]) {\n      this.setState({ currentTexture: TEXTURES[typeUpperCase + \"_IDLE\"] })\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    const {\n      xOffset,\n      yOffset,\n      textureSize,\n      movementSpeed,\n      inProgress,\n      paused,\n      currentHealth,\n      initialCharacterLocation,\n      otherCharacterLocation,\n      maxHealth,\n      renderOnScreen\n    } = this.props\n    return (\n      nextProps.xOffset !== xOffset ||\n      nextProps.yOffset !== yOffset ||\n      nextProps.textureSize !== textureSize ||\n      nextProps.movementSpeed !== movementSpeed ||\n      nextProps.inProgress !== inProgress ||\n      nextProps.paused !== paused ||\n      nextProps.currentHealth !== currentHealth ||\n      nextProps.maxHealth !== maxHealth ||\n      nextProps.renderOnScreen !== renderOnScreen ||\n      nextProps.initialCharacterLocation !== initialCharacterLocation ||\n      nextProps.otherCharacterLocation !== otherCharacterLocation ||\n      nextState !== this.state\n    )\n  }\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n  onClickRestart() {\n    let character = document.getElementById(this.props.type)\n    character.style.left = 0\n    character.style.top = 0\n    this.setState({ currentTexture: TEXTURES[this.props.type.toUpperCase() + \"_IDLE\"] })\n  }\n  componentDidUpdate() {\n    if (\n      !this.state.walking &&\n      this.props.inProgress &&\n      !this.props.paused &&\n      this.props.renderOnScreen\n    ) {\n      this.doNextAction()\n    }\n  }\n  setCorrectTexture(direction) {\n    let typeUpperCase = this.props.type.toUpperCase()\n    let texture =\n      direction[1] === -1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_UP\"]\n        : direction[1] === 1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_DOWN\"]\n        : TEXTURES[typeUpperCase + \"_RUNNING\"]\n    if (this.state.currentTexture !== texture) this.setState({ currentTexture: texture })\n  }\n  setCorrectDirection(entity, direction) {\n    if (entity !== null) {\n      if (direction[0] === -1) {\n        entity.style.transform = \"scaleX(-1)\"\n      } else {\n        entity.style.transform = \"scaleX(1)\"\n      }\n    }\n  }\n  takeAction(direction) {\n    this.setCorrectTexture(direction)\n    let character = document.getElementById(this.props.type)\n    this.setCorrectDirection(character.firstChild, direction)\n    let stepsCount = Math.floor(this.props.textureSize / this.props.movementSpeed)\n    let remainder = this.props.textureSize % this.props.movementSpeed\n\n    let counter = 0\n    if (this.state.currentMovementSpeed !== this.props.movementSpeed)\n      this.setState({ currentMovementSpeed: this.props.movementSpeed })\n    var id = setInterval(frame.bind(this), 0)\n    function frame() {\n      if (counter === stepsCount || !this.props.inProgress) {\n        clearInterval(id)\n        character.style.left = character.offsetLeft + direction[0] * remainder + \"px\"\n        character.style.top = character.offsetTop + direction[1] * remainder + \"px\"\n        this.props.onCharacterFinishMove(this.props.type, direction)\n        this.setState({ walking: false })\n      } else {\n        counter++\n        character.style.left =\n          character.offsetLeft + direction[0] * this.state.currentMovementSpeed + \"px\"\n        character.style.top =\n          character.offsetTop + direction[1] * this.state.currentMovementSpeed + \"px\"\n      }\n    }\n  }\n  render() {\n    const {\n      initialCharacterLocation,\n      type,\n      textureSize,\n      xOffset,\n      yOffset,\n      onPlaceCharacter,\n      renderOnScreen,\n      healthBar,\n      currentHealth,\n      zIndex,\n      maxHealth\n    } = this.props\n    let healthBarPercentage = healthBar ? (currentHealth / maxHealth) * 100 : undefined\n    return (\n      <CharacterSprite id={type}>\n        {initialCharacterLocation !== null && renderOnScreen ? (\n          <Texture\n            x={initialCharacterLocation[0]}\n            y={initialCharacterLocation[1]}\n            healthBarPercentage={healthBarPercentage}\n            textureSize={textureSize}\n            xOffset={xOffset}\n            yOffset={yOffset}\n            type={type}\n            zIndex={zIndex}\n            onMouseDown={() => onPlaceCharacter(type)}\n            texture={this.state.currentTexture}\n          ></Texture>\n        ) : null}\n      </CharacterSprite>\n    )\n  }\n}\n\nexport default Character\n","import { TEXTURES } from \"./Constants/Textures\"\nimport { CONSTANTS } from \"./Constants/Constants\"\nimport { CONFIG } from \"./Constants/Config\"\nimport { isSide } from \"./HelperFunctions\"\nconst costToLocation = (from, to) => {\n  let dx = to[0] - from[0]\n  let dy = to[1] - from[1]\n  let distance = Math.sqrt(dx * dx + dy * dy)\n  return distance * 100\n}\nconst getActionType = action => {\n  return action[0] + action[1] === 0 || Math.abs(action[0] + action[1]) === 2\n    ? \"diagonal\"\n    : \"cardinal\"\n}\nconst isLegalAction = (x, y, action, state) => {\n  const destinationPos = { x: x + action[0], y: y + action[1] }\n  const actionType = getActionType(action)\n  if (isOutOfBoundaries(destinationPos, state.gridWidth, state.gridHeight)) return false\n  if (isSide(destinationPos.x, destinationPos.y, state.gridWidth, state.gridHeight)) return false\n  const isDestinationWall =\n    state.texturesMap[destinationPos.y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n  if (actionType === \"diagonal\") {\n    const isHorizontalWall =\n      state.texturesMap[y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n    const isVerticalWall =\n      state.texturesMap[destinationPos.y * state.gridWidth + x] === TEXTURES.WALL\n\n    return !(isHorizontalWall || isVerticalWall || isDestinationWall)\n  } else {\n    return !isDestinationWall\n  }\n}\nconst addToOpen = (nodeToAdd, open) => {\n  let added = false\n  // check if its already in the open list.\n  for (let index = 0; index < open.length; index++) {\n    let node = open[index]\n    if (\n      nodeToAdd.x === node.x &&\n      nodeToAdd.y === node.y &&\n      nodeToAdd.g >= node.g &&\n      nodeToAdd.health <= node.health\n    ) {\n      added = true\n      break\n    }\n  }\n  // if its not already in the open list add where it belongs based on the f value.\n  if (!added) {\n    const nodeToAddF = nodeToAdd.g + nodeToAdd.h\n    // keep going until the f value is more than or qrual to the one in the open list and that where you add the node.\n    for (let index = 0; index < open.length; index++) {\n      const node = open[index]\n      const nodeF = node.g + node.h\n      if (nodeToAddF >= nodeF) {\n        added = true\n        open.splice(index, 0, nodeToAdd)\n        break\n      }\n    }\n  }\n  // if was not added because it the smallest f then add it to the end..\n  if (!added) {\n    open.push(nodeToAdd)\n  }\n}\n\nconst getPath = node => {\n  let action = node.action\n  let parent = node.parent\n  while (parent !== null && parent.action !== null) {\n    action = parent.action\n    parent = parent.parent\n  }\n\n  return action\n}\nconst calculateChickenCollectedPaths = (state, actions) => {\n  let connected = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let open = []\n  let chickenLocation = state.currentChickenLocation\n  open.push(new Node(chickenLocation[0], chickenLocation[1], null, null, null, 0, 0))\n  while (true) {\n    if (open.length === 0) {\n      return connected\n    }\n    let node = open.shift()\n    const index = node.y * state.gridWidth + node.x\n\n    if (closed[index]) {\n      continue\n    }\n    closed[index] = true\n    connected[index] = true\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        const isCloseToPlayerX =\n          Math.abs(newLocation.x - state.currentPlayerLocation[0]) === 1 &&\n          newLocation.y === state.currentPlayerLocation[1]\n        const isCloseToPlayerY =\n          Math.abs(newLocation.y - state.currentPlayerLocation[1]) === 1 &&\n          newLocation.x === state.currentPlayerLocation[0]\n\n        const isPlayerLocation =\n          newLocation.x === state.currentPlayerLocation[0] &&\n          newLocation.y === state.currentPlayerLocation[1]\n        if (!isPlayerLocation && !isCloseToPlayerX && !isCloseToPlayerY) {\n          open.push(new Node(newLocation.x, newLocation.y, null, node, action, 0, 0))\n        }\n      }\n    })\n  }\n}\nconst debug = (array, state, props, printValue) => {\n  array.forEach((value, index) => {\n    const y = Math.floor(index / state.gridWidth)\n    const x = Math.floor(index % state.gridWidth)\n    if (value) {\n      let div = document.createElement(\"div\")\n      div.style.position = \"absolute\"\n      div.style.top = state.yOffset\n        ? y * props.textureSize + state.yOffset + \"px\"\n        : y * props.textureSize + \"px\"\n      div.style.left = state.xOffset\n        ? x * props.textureSize + state.xOffset + \"px\"\n        : x * props.textureSize + \"px\"\n      div.style.zIndex = \"4\"\n      div.style.height = props.textureSize + \"px\"\n      div.style.width = props.textureSize + \"px\"\n      div.style.border = CONFIG.EDITING_BORDER\n\n      if (printValue) {\n        let h3 = document.createElement(\"h3\")\n        h3.innerText = value\n        div.appendChild(h3)\n      }\n      document.body.appendChild(div)\n    }\n  })\n}\nconst BFSFromPlayer = (state, props, actions) => {\n  let connected = calculateChickenCollectedPaths(state, actions)\n  let open = []\n  let playerLocation = state.currentPlayerLocation\n  open.push(\n    new Node(playerLocation[0], playerLocation[1], state.currentPlayerHealth, null, null, 0, 0)\n  )\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let values = new Array(state.gridWidth * state.gridHeight).fill(0)\n  while (true) {\n    if (open.length === 0) {\n      let index = values.indexOf(Math.max(...values))\n      let y = Math.floor(index / state.gridWidth)\n      let x = Math.floor(index % state.gridWidth)\n      return [x, y]\n    }\n    let node = open.pop()\n    const index = node.y * state.gridWidth + node.x\n\n    if (closed[index]) {\n      continue\n    }\n\n    closed[index] = true\n    values[index] = node.g\n\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = [node.x + action[0], node.y + action[1]]\n        const index = newLocation[1] * state.gridWidth + newLocation[0]\n        if (\n          connected[index] ||\n          (node.x === state.currentPlayerLocation[0] && node.y === state.currentPlayerLocation[1])\n        ) {\n          const isFire = state.texturesMap[index] === TEXTURES.FIRE\n          let newCost = node.g + 100\n          newCost = isFire ? newCost + 500 : newCost\n          const newHealth = isFire ? node.health - 1 : node.health\n          if (newHealth <= 0) newCost = 100000000 + newCost\n          let newNode = new Node(\n            newLocation[0],\n            newLocation[1],\n            newHealth,\n            node,\n            action,\n            newCost,\n            0\n          )\n          addToOpen(newNode, open)\n        }\n      }\n    })\n  }\n}\nconst isOutOfBoundaries = (position, gridWidth, gridHeight) => {\n  return position.x < 0 || position.y < 0 || position.x >= gridWidth || position.y >= gridHeight\n}\nconst getNextChickenAction = (actions, state, props) => {\n  if (props.chickenSpeed === 0) return [0, 0]\n  const start = state.currentChickenLocation\n  if (\n    state.texturesMap[start[1] * state.gridWidth + start[0]] === TEXTURES.FIRE &&\n    state.currentPlayerHealth === 1\n  )\n    return [0, 0]\n  const goal = BFSFromPlayer(state, props, actions)\n  if (start[0] === goal[0] && start[1] === goal[1]) {\n    return [0, 0]\n  }\n\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let open = []\n  open.push(new Node(start[0], start[1], 0, null, null, 0, costToLocation(start, goal)))\n  while (true) {\n    if (open.length === 0) {\n      return [0, 0]\n    }\n    let node = open.pop()\n    if (node.x === goal[0] && node.y === goal[1]) {\n      return getPath(node)\n    }\n    if (closed[node.y * state.gridWidth + node.x]) {\n      continue\n    }\n    closed[node.y * state.gridWidth + node.x] = true\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        const isCloseToPlayerX =\n          Math.abs(newLocation.x - state.currentPlayerLocation[0]) === 1 &&\n          newLocation.y === state.currentPlayerLocation[1]\n        const isCloseToPlayerY =\n          Math.abs(newLocation.y - state.currentPlayerLocation[1]) === 1 &&\n          newLocation.x === state.currentPlayerLocation[0]\n\n        const isPlayerLocation =\n          newLocation.x === state.currentPlayerLocation[0] &&\n          newLocation.y === state.currentPlayerLocation[1]\n        if (!(isCloseToPlayerX || isCloseToPlayerY)) {\n          if (!isPlayerLocation) {\n            const index = newLocation.y * state.gridWidth + newLocation.x\n            const g =\n              state.texturesMap[index] === TEXTURES.FIRE\n                ? node.g - 500\n                : state.overLayMap[index] === TEXTURES.HEALTH_PACK\n                ? node.g - 1000\n                : node.g + 100\n\n            const h = costToLocation([newLocation.x, newLocation.y], goal)\n            const newNode = new Node(newLocation.x, newLocation.y, 0, node, action, g, h)\n            addToOpen(newNode, open)\n          } else {\n          }\n        } else {\n        }\n      }\n    })\n  }\n}\nconst getNextAction = (state, props, characterType) => {\n  let actions = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0]\n  ]\n  let diagonalActions = [\n    [1, 1],\n    [-1, 1],\n    [1, -1],\n    [-1, -1]\n  ]\n  if (props.allowDiagonalActions) actions = actions.concat(diagonalActions)\n  if (characterType === CONSTANTS.CHICKEN) return getNextChickenAction(actions, state, props)\n  let start = state.currentPlayerLocation\n  let goal = state.currentChickenLocation\n  let foundPath = false\n  let bestPathNode = null\n  let bestPathFoundHealth = 0\n  //edge case when start is the goal.\n  if (start[0] === goal[0] && start[1] === goal[1]) {\n    return [0, 0]\n  }\n\n  let actionsCost = [100, 100, 100, 100, 144, 141, 141, 141]\n  let closed = [...new Array(state.gridWidth * state.gridHeight)].map(() =>\n    new Array(props.playerMaxHealth).fill(false)\n  )\n\n  let open = []\n  open.push(\n    new Node(\n      start[0],\n      start[1],\n      state.currentPlayerHealth,\n      null,\n      null,\n      0,\n      costToLocation(start, goal)\n    )\n  )\n  while (true) {\n    if (open.length === 0) {\n      if (foundPath) {\n        return getPath(bestPathNode)\n      }\n      return [0, 0]\n    }\n\n    let node = open.pop()\n    if (node.x === goal[0] && node.y === goal[1] && node.health > 0) {\n      if (node.health === props.playerMaxHealth || props.searchPriority === CONSTANTS.SPEED) {\n        return getPath(node)\n      } else if (node.health > bestPathFoundHealth) {\n        foundPath = true\n        bestPathFoundHealth = node.health\n        bestPathNode = node\n      }\n    }\n\n    // checks if node in closed, where closed is an array with true false values for any state at x,y by accessing index at y * the with + x\n    if (closed[node.y * state.gridWidth + node.x][node.health - 1]) {\n      continue\n    }\n\n    closed[node.y * state.gridWidth + node.x][node.health - 1] = true\n    if (node.health <= 0) continue\n    actions.forEach((action, index) => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        let g = node.g + actionsCost[index]\n        const h = costToLocation([newLocation.x, newLocation.y], goal)\n        const healthPackOnLocation =\n          state.overLayMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.HEALTH_PACK\n        const isLava =\n          state.texturesMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.FIRE\n\n        const health = healthPackOnLocation\n          ? props.playerMaxHealth\n          : isLava\n          ? node.health - 1\n          : node.health\n        if (isLava && !healthPackOnLocation) g += 20\n\n        const newNode = new Node(newLocation.x, newLocation.y, health, node, action, g, h)\n        addToOpen(newNode, open)\n      }\n    })\n  }\n}\n\nclass Node {\n  constructor(x, y, health, parent, action, g, h) {\n    this.x = x\n    this.y = y\n    this.health = health\n    this.action = action\n    this.parent = parent\n    this.g = g\n    this.h = h\n  }\n}\nexport default getNextAction\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport Texture from \"./Texture\"\nimport { TEXTURES, TEXTURE_DATA } from \"../Constants/Textures\"\nimport { CONFIG } from \"../Constants/Config\"\nimport Character from \"./Character\"\nimport getNextAction from \"../AI.js\"\nimport { Modal, Button, Typography, message } from \"antd\"\n\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport queryString from \"query-string\"\nimport {\n  isSide,\n  calculateMaxTextureSize,\n  calculateMinTextureSize,\n  isTouchDevice,\n  getTextureSizeForMap,\n  calculateBestTextureSize\n} from \"../HelperFunctions\"\n\nconst Container = styled.div`\n  flex: 1;\n  position: relative;\n  background: #81ba44;\n`\nconst EditorDoneButton = styled(Button)`\n  border-radius: 20px !important;\n`\nconst EditorContainer = styled.div`\n  width: 80px;\n  height: 380px;\n  position: absolute;\n  display: flex;\n  padding: 15px 0;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  left: ${props => (props.expanded ? 0 : -70)}px;\n  transition: left 1s;\n  top: ${props => props.top}px;\n  border-radius: 10px;\n  z-index: 6;\n  background-color: ${CONFIG.SECONDARY_APP_COLOR};\n`\nconst EditorArrow = styled(Button)`\n  position: absolute !important;\n  transform: ${props => (props.expanded === \"true\" ? \"rotateZ(-180deg)\" : \"\")};\n  transition: transform 1s;\n  left: 68px;\n  top: 25px;\n`\nconst TextureLabel = styled(Typography.Text)`\n  color: white !important;\n  margin-bottom: 5px;\n`\nconst Image = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 10px;\n  cursor: pointer;\n`\nexport class Grid extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      texturesMap: [],\n      overLayMap: [],\n      edits: [],\n      modalMessage: \"\",\n      showModal: false,\n      gridWidth: 0,\n      editorExpanded: true,\n      gridHeight: 0,\n      xOffset: 0,\n      yOffset: 0,\n      initialPlayerLocation: null,\n      currentPlayerLocation: null,\n      initialChickenLocation: null,\n      currentChickenLocation: null,\n      currentPlayerHealth: props.playerMaxHealth,\n      currentChickenHealth: props.chickenMaxHealth,\n      leftMouseDown: false,\n      rightMouseDown: false\n    }\n    this.onMouseDown = this.onMouseDown.bind(this)\n    this.onMouseUp = this.onMouseUp.bind(this)\n    this.onMouseHoverTextureEnter = this.onMouseHoverTextureEnter.bind(this)\n    this.onMouseHoverTextureLeave = this.onMouseHoverTextureLeave.bind(this)\n    this.onPlaceCharacter = this.onPlaceCharacter.bind(this)\n    this.handleHoverWhilePlacingCharacter = this.handleHoverWhilePlacingCharacter.bind(this)\n    this.getNextCharacterAction = this.getNextCharacterAction.bind(this)\n    this.setCharacterCurrentHealth = this.setCharacterCurrentHealth.bind(this)\n    this.onCharacterFinishMove = this.onCharacterFinishMove.bind(this)\n    this.updateURL = this.updateURL.bind(this)\n  }\n\n  setCharacterCurrentHealth(character, value) {\n    let capitalized = character.charAt(0).toUpperCase() + character.slice(1)\n    this.setState({ [\"current\" + capitalized + \"Health\"]: value })\n  }\n  onMouseDown(e, x, y) {\n    e.persist()\n    if (e.button === 0 || e.type === \"touchstart\") {\n      this.setState({ leftMouseDown: true }, () => {\n        this.onMouseHoverTextureEnter(e, x, y)\n      })\n    } else if (e.button === 2) {\n      this.setState({ rightMouseDown: true }, () => {\n        this.onMouseHoverTextureEnter(e, x, y)\n      })\n    }\n  }\n  onPlaceCharacter() {\n    this.props.setSelectedEditTexture(null)\n  }\n  onMouseUp(e) {\n    this.setState({ leftMouseDown: false, rightMouseDown: false })\n  }\n  handleHoverWhilePlacingCharacter(characterType, x, y) {\n    if (characterType === TEXTURES.CHICKEN_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.CHICKEN)\n      this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n    }\n    if (characterType === TEXTURES.PLAYER_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.PLAYER)\n      this.setState({ initialPlayerLocation: [x, y], currentPlayerLocation: [x, y] })\n    }\n  }\n  resetCharactersLocation(character) {\n    if (character === CONSTANTS.PLAYER) {\n      let player = document.getElementById(CONSTANTS.PLAYER)\n      player.style.left = 0\n      player.style.top = 0\n    } else {\n      let chicken = document.getElementById(CONSTANTS.CHICKEN)\n      chicken.style.left = 0\n      chicken.style.top = 0\n    }\n  }\n  handleFollowCursor(x, y) {\n    this.resetCharactersLocation(CONSTANTS.CHICKEN)\n    this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n  }\n\n  updateURL() {\n    let newURLObject = {\n      playerSpeed: this.props.playerSpeed,\n      playerMaxHealth: this.props.playerMaxHealth,\n      initialTexturesMap: this.state.texturesMap,\n      searchPriority: this.props.searchPriority,\n      allowDiagonalActions: this.props.allowDiagonalActions,\n      initialOverLayMap: this.state.overLayMap,\n      gridWidth: this.state.gridWidth,\n      gridHeight: this.state.gridHeight,\n      chickenSpeed: this.props.chickenSpeed,\n      firstRenderPlayerLocation: this.state.initialPlayerLocation,\n      firstRenderChickenLocation: this.state.initialChickenLocation\n    }\n\n    window.history.replaceState(\n      {},\n      null,\n      \"?\" +\n        queryString.stringify(newURLObject, {\n          arrayFormat: \"comma\"\n        })\n    )\n  }\n\n  onMouseHoverTextureEnter(e, x, y, texture) {\n    const { selectedEditTexture, editing, followCursor, textureSize } = this.props\n    const {\n      texturesMap,\n      leftMouseDown,\n      rightMouseDown,\n      edits,\n      overLayMap,\n      xOffset,\n      yOffset,\n      gridWidth,\n      gridHeight\n    } = this.state\n    let index = 0\n    let side = true\n    if (e.type === \"touchmove\") {\n      let touchX = Math.floor((e.touches[0].pageX - xOffset) / textureSize)\n      let touchY = Math.floor((e.touches[0].pageY - yOffset) / textureSize)\n      if (touchX >= gridWidth || touchY >= gridHeight) return\n      index = touchY * gridWidth + touchX\n      side = isSide(touchX, touchY, gridWidth, gridHeight)\n    } else {\n      index = y * gridWidth + x\n      side = isSide(x, y, gridWidth, gridHeight)\n    }\n    if (!side) {\n      if (\n        selectedEditTexture === TEXTURES.PLAYER_IDLE ||\n        selectedEditTexture === TEXTURES.CHICKEN_IDLE\n      ) {\n        this.handleHoverWhilePlacingCharacter(selectedEditTexture, x, y)\n      } else if (editing) {\n        if (e.target !== null && !isTouchDevice(window)) {\n          e.target.parentElement.parentElement.style.border = CONFIG.EDITING_BORDER\n        }\n        if (leftMouseDown) {\n          if (selectedEditTexture === TEXTURES.HEALTH_PACK) {\n            if (overLayMap[index] !== TEXTURES.HEALTH_PACK || e.type === \"touchstart\") {\n              let newOverLayMap = overLayMap.slice()\n              newOverLayMap[index] =\n                overLayMap[index] === TEXTURES.HEALTH_PACK\n                  ? TEXTURES.TRANSPARENT\n                  : TEXTURES.HEALTH_PACK\n              this.setState({\n                overLayMap: newOverLayMap,\n                leftMouseDown: isTouchDevice(window) ? false : leftMouseDown,\n                edits: [...edits, { type: CONSTANTS.OVERLAY, texture: overLayMap[index], x, y }]\n              })\n            }\n          } else if (texturesMap[index] !== selectedEditTexture) {\n            let newTexturesMap = texturesMap.slice()\n            newTexturesMap[index] = selectedEditTexture\n            this.setState({\n              texturesMap: newTexturesMap,\n              edits: [...edits, { type: CONSTANTS.TEXTURE, texture: texturesMap[index], x, y }]\n            })\n          }\n        } else if (rightMouseDown) {\n          let stateUpdate = {}\n          let editsUpdate = [...edits]\n          let shouldUpdateState = false\n          if (overLayMap[index] !== TEXTURES.TRANSPARENT) {\n            shouldUpdateState = true\n            let newOverLayMap = overLayMap.slice()\n            newOverLayMap[index] = TEXTURES.TRANSPARENT\n            stateUpdate.overLayMap = newOverLayMap\n            editsUpdate.push({ type: CONSTANTS.OVERLAY, texture: overLayMap[index], x, y })\n          }\n          if (texturesMap[index] !== TEXTURES.FLOOR) {\n            shouldUpdateState = true\n            let newTexturesMap = texturesMap.slice()\n            newTexturesMap[index] = TEXTURES.FLOOR\n            stateUpdate.texturesMap = newTexturesMap\n            editsUpdate.push({ type: CONSTANTS.TEXTURE, texture: texturesMap[index], x, y })\n          }\n          if (shouldUpdateState) {\n            stateUpdate.edits = editsUpdate\n\n            this.setState({ ...stateUpdate })\n          }\n        } else {\n          texture.setMouseOver(true)\n        }\n      } else if (followCursor) {\n        this.handleFollowCursor(x, y)\n      }\n    }\n  }\n  onMouseHoverTextureLeave(e, texture) {\n    if (this.props.editing) {\n      texture.setMouseOver(false)\n      e.target.parentElement.parentElement.style.border = \"0\"\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.textureSize !== this.props.textureSize && this.props.reRenderGrid) {\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    }\n    if (prevProps.playerMaxHealth !== this.props.playerMaxHealth) {\n      this.setState({ currentPlayerHealth: this.props.playerMaxHealth })\n    }\n  }\n\n  initializeGridFromData(data) {\n    if (this.container === null) return\n    let yOffset = (this.container.offsetHeight - data.gridHeight * this.props.textureSize) / 2\n    let xOffset = (this.container.offsetWidth - data.gridWidth * this.props.textureSize) / 2\n    let playerLocationFromURL = data.firstRenderPlayerLocation\n    let chickenLocationFromURL = data.firstRenderChickenLocation\n    let playerLocation = playerLocationFromURL !== undefined ? playerLocationFromURL : [1, 1]\n    let chickenLocation =\n      chickenLocationFromURL !== undefined ? chickenLocationFromURL : [data.gridWidth - 2, 1]\n    this.setState({\n      texturesMap: data.initialTexturesMap,\n      overLayMap: data.initialOverLayMap,\n      gridWidth: data.gridWidth,\n      gridHeight: data.gridHeight,\n      xOffset,\n      yOffset,\n      initialPlayerLocation: playerLocation,\n      initialChickenLocation: chickenLocation,\n      currentPlayerLocation: playerLocation,\n      currentChickenLocation: chickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      edits: []\n    })\n    this.props.envIsReady()\n  }\n  initializeGridWithTextureSize(textureSize) {\n    let gridWidth = Math.floor(this.container.offsetWidth / textureSize)\n    let gridHeight = Math.floor(this.container.offsetHeight / textureSize)\n    let xOffset = (this.container.offsetWidth % textureSize) / 2\n    let yOffset = (this.container.offsetHeight % textureSize) / 2\n    let playerLocation = [1, 1]\n    let chickenLocation = [gridWidth - 2, 1]\n    let texturesMap = new Array(gridWidth * gridHeight).fill(TEXTURES.FLOOR)\n    let overLayMap = new Array(gridWidth * gridHeight).fill(TEXTURES.TRANSPARENT)\n    this.setState({\n      texturesMap: texturesMap,\n      overLayMap: overLayMap,\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      initialPlayerLocation: playerLocation,\n      initialChickenLocation: chickenLocation,\n      currentPlayerLocation: playerLocation,\n      currentChickenLocation: chickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      edits: []\n    })\n    this.props.envIsReady()\n  }\n\n  getNextCharacterAction(type) {\n    let action = getNextAction(this.state, this.props, type)\n    if (action[0] !== 0 || action[1] !== 0) {\n      if (type === CONSTANTS.PLAYER) {\n        let newPosition = [\n          this.state.currentPlayerLocation[0] + action[0],\n          this.state.currentPlayerLocation[1] + action[1]\n        ]\n        this.setState({ currentPlayerLocation: newPosition })\n      } else {\n        let newPosition = [\n          this.state.currentChickenLocation[0] + action[0],\n          this.state.currentChickenLocation[1] + action[1]\n        ]\n        this.setState({ currentChickenLocation: newPosition })\n      }\n    }\n\n    return action\n  }\n  undoEdit() {\n    if (this.state.edits.length > 0) {\n      let editsCopy = this.state.edits.slice()\n      let editToUndo = editsCopy.pop()\n      let index = editToUndo.y * this.state.gridWidth + editToUndo.x\n      if (editToUndo.type === CONSTANTS.TEXTURE) {\n        let texturesMapCopy = this.state.texturesMap.slice()\n        texturesMapCopy[index] = editToUndo.texture\n        this.setState({ texturesMap: texturesMapCopy, edits: editsCopy })\n      } else if (editToUndo.type === CONSTANTS.OVERLAY) {\n        let overLayMapCopy = this.state.overLayMap.slice()\n        overLayMapCopy[index] = editToUndo.texture\n        this.setState({ overLayMap: overLayMapCopy, edits: editsCopy })\n      }\n    }\n  }\n  componentDidMount() {\n    let rendered = false\n    if (this.props.URLParams !== null) {\n      if (\n        this.props.URLParams.initialTexturesMap.length > 0 &&\n        this.props.URLParams.initialOverLayMap.length > 0\n      ) {\n        const textureSizeForURLMap = getTextureSizeForMap(\n          this.props.URLParams.gridWidth,\n          this.props.URLParams.gridHeight,\n          this.container\n        )\n\n        if (\n          textureSizeForURLMap <= calculateMaxTextureSize(window) &&\n          textureSizeForURLMap >= calculateMinTextureSize(window)\n        ) {\n          rendered = true\n          this.props.setTextureSize(textureSizeForURLMap, false)\n          setTimeout(() => {\n            this.initializeGridFromData(this.props.URLParams)\n          }, 0)\n        } else {\n          this.setState({\n            showModal: true,\n            modalMessage:\n              \"We could not load the map from the link, the map was created on a screen much different than the one you are using currently. Please Try again with a different device.\"\n          })\n        }\n      } else {\n        this.setState({\n          showModal: true,\n          modalMessage:\n            \"We Could Not Load The Map, There Seems to Be Something wrong with the link shared with you.\"\n        })\n      }\n    }\n    if (!rendered) {\n      this.props.setTextureSize(calculateBestTextureSize(window), false)\n      setTimeout(() => {\n        this.initializeGridWithTextureSize(this.props.textureSize)\n      }, 0)\n    }\n\n    this.props.onRef(this)\n    window.addEventListener(\"resize\", e => {\n      this.props.onClickRestart()\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    })\n    this.container.oncontextmenu = function() {\n      return false\n    }\n  }\n  onCharacterFinishMove(characterType, action) {\n    const { overLayMap, currentPlayerLocation, currentChickenLocation, texturesMap } = this.state\n    let capitalized = characterType.charAt(0).toUpperCase() + characterType.slice(1)\n    let characterLocation = this.state[\"current\" + capitalized + \"Location\"]\n    let currentCharacterHealth = this.state[\"current\" + capitalized + \"Health\"]\n    let index = characterLocation[1] * this.state.gridWidth + characterLocation[0]\n    if (texturesMap[index] === TEXTURES.FIRE) {\n      this.setCharacterCurrentHealth(characterType, currentCharacterHealth - 1)\n    }\n    if (overLayMap[index] === TEXTURES.HEALTH_PACK) {\n      let newOverLayMap = overLayMap.slice()\n      newOverLayMap[index] = TEXTURES.TRANSPARENT\n      this.setState({\n        overLayMap: newOverLayMap\n      })\n      this.setCharacterCurrentHealth(characterType, this.props.playerMaxHealth)\n    }\n\n    if (\n      currentPlayerLocation[0] === currentChickenLocation[0] &&\n      currentPlayerLocation[1] === currentChickenLocation[1] &&\n      !this.props.followCursor\n    ) {\n      if (this.props.chickenSpeed === 0) {\n        this.props.onFinishGame()\n        this.props.onClickRestart()\n      } else if (characterType === CONSTANTS.PLAYER) {\n        this.props.onFinishGame()\n        this.props.onClickRestart()\n      }\n    }\n  }\n  onSelectCustomLevel(levelData) {\n    const textureSizeForLevel = getTextureSizeForMap(\n      levelData.gridWidth,\n      levelData.gridHeight,\n      this.container\n    )\n\n    if (\n      textureSizeForLevel <= calculateMaxTextureSize(window) &&\n      textureSizeForLevel >= calculateMinTextureSize(window)\n    ) {\n      this.props.setTextureSize(textureSizeForLevel, false)\n      setTimeout(() => {\n        this.initializeGridFromData(levelData)\n      }, 0)\n    } else {\n      message.error(\"Your Screen is Not Compatible with this Level!\")\n    }\n  }\n  onClickTexture(texture) {\n    if (this.props.followCursor) this.props.onClickPause()\n    this.props.setEditing(true)\n    this.props.setSelectedEditTexture(texture)\n  }\n  onClickRestart() {\n    this.player.onClickRestart()\n    this.chicken.onClickRestart()\n    this.setState({\n      currentPlayerLocation: this.state.initialPlayerLocation,\n      currentChickenLocation: this.state.initialChickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth\n    })\n  }\n  render() {\n    const {\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      texturesMap,\n      overLayMap,\n      initialPlayerLocation,\n      initialChickenLocation,\n      showModal,\n      modalMessage,\n      currentPlayerHealth,\n      rightMouseDown,\n      currentPlayerLocation,\n      currentChickenLocation,\n      leftMouseDown,\n      editorExpanded\n    } = this.state\n    const {\n      textureSize,\n      inProgress,\n      paused,\n      followCursor,\n      editing,\n      selectedEditTexture,\n      playerSpeed,\n      setEditing,\n      playerMaxHealth,\n      chickenSpeed\n    } = this.props\n    return (\n      <Container\n        onMouseLeave={() => (leftMouseDown || rightMouseDown ? this.onMouseUp : null)}\n        ref={el => (this.container = el)}\n      >\n        <Modal\n          closable={false}\n          footer={[\n            <Button type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          title={\"Sorry\"}\n          visible={showModal}\n        >\n          {modalMessage}\n        </Modal>\n        <EditorContainer\n          top={this.container !== undefined ? this.container.offsetHeight / 2 : 0}\n          expanded={editorExpanded}\n        >\n          <EditorArrow\n            expanded={editorExpanded ? \"true\" : \"false\"}\n            onClick={() => this.setState({ editorExpanded: !editorExpanded })}\n            size=\"small\"\n            shape=\"circle\"\n            icon=\"arrow-right\"\n          ></EditorArrow>\n          <Image\n            onClick={() => this.onClickTexture(22)}\n            src={TEXTURE_DATA[TEXTURES.FLOOR].icon}\n          ></Image>\n          <TextureLabel>Floor</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.FIRE)}\n            src={TEXTURE_DATA[TEXTURES.FIRE].icon}\n          ></Image>\n          <TextureLabel>Fire</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.WALL)}\n            src={TEXTURE_DATA[TEXTURES.WALL].icon}\n          ></Image>\n          <TextureLabel>Rock</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.HEALTH_PACK)}\n            src={TEXTURE_DATA[TEXTURES.HEALTH_PACK].icon}\n          ></Image>\n          <TextureLabel>Health</TextureLabel>\n          <EditorDoneButton\n            onClick={() => {\n              setEditing(false)\n              this.setState({ editorExpanded: false })\n            }}\n            size=\"small\"\n          >\n            Done\n          </EditorDoneButton>\n        </EditorContainer>\n        {texturesMap.map((texture, index) => {\n          const x = index % gridWidth\n          const y = Math.floor(index / gridWidth)\n          const overLayTexture = overLayMap[index]\n          const left = x === 0\n          const right = x === gridWidth - 1\n          const top = y === 0\n          const bottom = y === gridHeight - 1\n          let side = bottom || top || right || left\n          let floorTexture = \"FLOOR\"\n          let textureToRenderIfSide = \"FLOOR\"\n          if (side) {\n            if (top) floorTexture += \"_TOP\"\n            if (bottom) floorTexture += \"_BOTTOM\"\n            if (left) floorTexture += \"_LEFT\"\n            if (right) floorTexture += \"_RIGHT\"\n            textureToRenderIfSide = TEXTURES[floorTexture]\n          }\n          return [\n            <Texture\n              x={x}\n              y={y}\n              key={index + \"texture\"}\n              textureSize={textureSize}\n              xOffset={xOffset}\n              zIndex={1}\n              yOffset={yOffset}\n              texture={side ? textureToRenderIfSide : texture}\n            ></Texture>,\n            <Texture\n              x={x}\n              y={y}\n              key={index + \"overLay\"}\n              onMouseHoverTextureEnter={(texture, e) =>\n                this.onMouseHoverTextureEnter(e, x, y, texture)\n              }\n              onMouseHoverTextureLeave={(texture, e) => this.onMouseHoverTextureLeave(e, texture)}\n              selectedEditTexture={selectedEditTexture}\n              editing={editing}\n              textureSize={textureSize}\n              onMouseDown={e => this.onMouseDown(e, x, y)}\n              zIndex={2}\n              onMouseUp={this.onMouseUp}\n              xOffset={xOffset}\n              yOffset={yOffset}\n              texture={overLayTexture}\n            ></Texture>\n          ]\n        })}\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.chicken = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialChickenLocation}\n          textureSize={textureSize}\n          movementSpeed={chickenSpeed}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          inProgress={inProgress}\n          paused={paused}\n          getNextAction={this.getNextCharacterAction}\n          otherCharacterLocation={currentPlayerLocation}\n          renderOnScreen={!followCursor}\n          type={CONSTANTS.CHICKEN}\n          zIndex={4}\n        ></Character>\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.player = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialPlayerLocation}\n          textureSize={textureSize}\n          movementSpeed={playerSpeed}\n          inProgress={inProgress}\n          paused={paused}\n          otherCharacterLocation={currentChickenLocation}\n          getNextAction={this.getNextCharacterAction}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          currentHealth={currentPlayerHealth}\n          maxHealth={playerMaxHealth}\n          renderOnScreen={true}\n          healthBar={true}\n          type={CONSTANTS.PLAYER}\n          zIndex={5}\n        ></Character>\n      </Container>\n    )\n  }\n}\n\nexport default Grid\n","export const BREAKPOINTS = {\n  MEDIUM_WIDTH: \"1100px\",\n  SMALL_WIDTH: \"900px\",\n  VERY_SMALL_WIDTH: \"720px\",\n  MEDIUM_HEIGHT: \"960px\",\n  SMALL_HEIGHT: \"820px\",\n  VERY_SMALL_HEIGHT: \"700px\"\n}\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport { Slider, Button, Typography, Radio, Tooltip, Modal, Input, Carousel } from \"antd\"\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport { CONFIG } from \"../Constants/Config\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport { BREAKPOINTS } from \"../Constants/BreakPoints\"\n\nimport { calculateMaxTextureSize, calculateMinTextureSize } from \"../HelperFunctions\"\nconst Container = styled.div`\n  width: 100%;\n  height: fit-content;\n  background-color: ${CONFIG.MAIN_APP_COLOR};\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  padding-top: 15px;\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    font-size: 11px;\n  }\n  @media (max-width: ${BREAKPOINTS.SMALL_WIDTH}) {\n    font-size: 11px;\n  }\n`\nconst TutorialDescription = styled(Typography.Text)`\n  font-size: 15px;\n`\nconst TutorialImage = styled.img`\n  width: 100%;\n  height: 230px;\n  object-fit: cover;\n`\nconst TutorialButtonContainer = styled.div`\n  position: absolute;\n  top: 35%;\n  width: 100%;\n  display: flex;\n  left: 0;\n  padding: 0 24px 0 24px;\n  justify-content: space-between;\n`\nconst FlexDivCenter = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 10px;\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    margin-bottom: 6px;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    margin-bottom: 4px;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    margin-bottom: 2px;\n  }\n`\nconst StyledText = styled(Typography.Text)`\n  color: white !important;\n`\nconst StyledGitButton = styled(Button)`\n  display: inline-block;\n`\nconst StyledButton = styled(Button)`\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    height: 35px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    height: 30px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    height: 25px !important;\n  }\n  border-radius: 20px !important;\n  height: 43px !important;\n`\nconst Left = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  flex-direction: column;\n  flex-grow: 1;\n  height: 100%;\n  align-self: flex-start;\n  padding-top: 30px;\n`\nconst Center = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  flex-direction: column;\n  align-self: center;\n  flex-grow: 0.3;\n`\nconst Right = styled.div`\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  margin: auto;\n  flex-direction: column;\n  flex-grow: 1;\n  align-self: flex-end;\n  padding-top: 30px;\n`\nconst Label = styled(Typography.Text)`\n  margin-left: 6px;\n  margin-right: 6px;\n  display: inline-block;\n  width: 20%;\n  color: white !important;\n`\nconst StyledSlider = styled(Slider)`\n  width: 70%;\n  display: inline-block;\n  min-width: 50px;\n  margin: 0 !important;\n`\nconst SliderContainer = styled.div`\n  width: 100%;\n  margin-bottom: 60px;\n  @media (max-width: ${BREAKPOINTS.VERY_SMALL_WIDTH}) {\n    margin-bottom: 0;\n  }\n  display: flex;\n  align-items: center;\n`\nconst StyledTitle = styled(Typography.Title)`\n  color: white !important;\n`\nconst LeftRightContainer = styled.div`\n  width: 60%;\n  @media (max-width: ${BREAKPOINTS.MEDIUM_WIDTH}) {\n    width: 100%;\n  }\n  display: flex;\n  flex-direction: column;\n`\nconst PlayButton = styled(Button)`\n  margin: ${props => props.margin};\n  font-size: ${props => props.fontSize + \"px !important\"};\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    font-size: 25px !important;\n  }\n  height: fit-content !important;\n  width: fit-content !important;\n  &:focus,\n  &:active {\n    color: white !important;\n  }\n  &:hover {\n    color: #40a9ff !important;\n  }\n`\nconst playerMaxHealth = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerMaxHealthLabel\">{smallScreen ? \"player Max Health\" : \"Max Health\"}</Label>,\n    <StyledSlider\n      key=\"playerMaxHealthSlider\"\n      onChange={value => props.setCharacterMaxHealth(CONSTANTS.PLAYER, value)}\n      value={props.playerMaxHealth}\n      disabled={props.inProgress}\n      min={1}\n      max={10}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Max Health \">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst playerSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerSpeedLabel\">{smallScreen ? \"player Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"playerSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.PLAYER, speed)}\n      value={props.playerSpeed}\n      min={1}\n      max={4}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst chickenSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"chickenSpeedLabel\">{smallScreen ? \"Chicken Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"chickenSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.CHICKEN, speed)}\n      value={props.chickenSpeed}\n      min={0}\n      max={4}\n      disabled={false}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The Chicken Movement Speed\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst getPlayButton = props => {\n  return props.inProgress ? (\n    <div>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => {\n          if (props.followCursor) props.setEditing(false)\n          props.paused ? props.onClickResume() : props.onClickPause()\n        }}\n        ghost={true}\n        margin={\"0 4px 0 15px\"}\n        icon={props.paused ? \"play-circle\" : \"pause-circle\"}\n      ></PlayButton>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => props.onClickRestart()}\n        margin={\"0 15px 0 4px\"}\n        ghost={true}\n        icon={\"stop\"}\n      ></PlayButton>\n    </div>\n  ) : (\n    <PlayButton\n      disabled={!props.ready}\n      type={\"link\"}\n      ghost={true}\n      fontSize={35}\n      margin={\"0 15px 0 15px\"}\n      onClick={() => {\n        props.generateLink()\n        props.onClickStart()\n      }}\n      icon={\"play-circle\"}\n    ></PlayButton>\n  )\n}\nexport default class Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      minTextureSize: calculateMinTextureSize(window),\n      maxTextureSize: calculateMaxTextureSize(window),\n      showTutorial: false,\n      showModal: false\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", e => {\n      this.setState({\n        minTextureSize: calculateMinTextureSize(window),\n        maxTextureSize: calculateMaxTextureSize(window)\n      })\n    })\n  }\n  copyLinkToClipBoard() {\n    let el = document.getElementById(\"shareLinkInput\")\n    el.select()\n    el.setSelectionRange(0, 99999)\n    document.execCommand(\"copy\")\n  }\n  render() {\n    const smallScreenWidth = window.screen.width <= parseInt(BREAKPOINTS.VERY_SMALL_WIDTH, 10)\n    const smallScreenHeight = window.screen.height <= parseInt(BREAKPOINTS.SMALL_HEIGHT, 10)\n    const props = this.props\n    const { minTextureSize, maxTextureSize, showModal, showTutorial } = this.state\n    return (\n      <Container>\n        <Modal\n          onCancel={() => this.setState({ showTutorial: false })}\n          closable={true}\n          footer={null}\n          visible={showTutorial}\n          title={null}\n          bodyStyle={{ padding: \"10px\" }}\n        >\n          <Typography.Title style={{ textAlign: \"center\" }} level={4}>\n            Run Chicken!!\n          </Typography.Title>\n          <TutorialButtonContainer>\n            <Button\n              style={{ zIndex: 1 }}\n              ghost={true}\n              type=\"link\"\n              shape=\"circle\"\n              onClick={() => this.carousel.prev()}\n              icon=\"left\"\n            ></Button>\n            <Button\n              style={{ zIndex: 1 }}\n              ghost={true}\n              onClick={() => this.carousel.next()}\n              type=\"link\"\n              shape=\"circle\"\n              icon=\"right\"\n            ></Button>\n          </TutorialButtonContainer>\n\n          <Carousel dots={false} ref={node => (this.carousel = node)}>\n            <div>\n              <TutorialImage src=\"Grid.PNG\"></TutorialImage>\n              <TutorialDescription>\n                <br></br>\n                The goal of the player is to catch the chicken. He uses A* to update the optimal\n                path in realtime.\n                <br></br>\n                <br></br>\n                The chicken is invincible to the camp fires, but the player has a health bar and he\n                needs to be smart if he wants to catch that chicken.\n              </TutorialDescription>\n            </div>\n            <div>\n              <TutorialImage src=\"Editor.PNG\"></TutorialImage>\n              <TutorialDescription>\n                <br></br>\n                You can edit the map while the game is running through the editor on the left of the\n                screen, simply click on the texture you wont to add and drag your mouse to draw.\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n                <br></br>\n                <b>Hint</b>: You can use right click to delete anything on the map.\n              </TutorialDescription>\n            </div>\n            <div>\n              <TutorialImage src=\"Options.PNG\"></TutorialImage>\n              <TutorialDescription>\n                <br></br>\n                These are the options that control how the AI behaves, you can control the speed of\n                the either the chicken or the player and how much health the player has.\n              </TutorialDescription>\n            </div>\n            <div>\n              <TutorialImage src=\"ControlPanel.PNG\"></TutorialImage>\n              <TutorialDescription>\n                <br></br>\n                This is where you control the game.\n                <br></br>\n                <br></br>\n                <b>Place Chicken/Player</b>: Set the starting position of the chicken/player.\n                <br></br> <b>Undo Edit</b>: Undo your last edit to the map.\n                <br></br>\n                <b>Share Map</b>: Share the current map with a friend through a link.\n                <br></br> <b>Follow Cursor</b>: Replace the chicken with your mouse, and the player\n                will follow it in real time.\n                <br></br>\n                <br></br>\n                <b>Hint</b>: You can use the space bar to start, resume and pause the game.\n              </TutorialDescription>\n            </div>\n            <div>\n              <TutorialImage src=\"MapOptions.PNG\"></TutorialImage>\n              <TutorialDescription>\n                <br></br>\n                This is where you control the map options\n                <br></br>\n                <br></br> <b>Map Scale</b>: How big is the grid.\n                <br></br> <b>Pre Made Levels</b>: Load any pre-made levels created by the\n                developers.\n                <br></br> <b>search Priority</b>: Weather the player cares more about health or\n                speed.\n              </TutorialDescription>\n            </div>\n          </Carousel>\n          <div></div>\n        </Modal>\n\n        <Modal\n          closable={false}\n          footer={[\n            <Button key={1} type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          visible={showModal}\n          title={\"Share Your Map!\"}\n        >\n          <Typography.Text>Copy This Link and Send it To your Friends</Typography.Text>\n          <div>\n            <Input\n              id={\"shareLinkInput\"}\n              style={{ margin: \"20px 20px 20px 0\", width: \"80%\" }}\n              defaultValue={window.location.href}\n            ></Input>\n            <Button onClick={() => this.copyLinkToClipBoard()} type=\"secondary\">\n              Copy\n            </Button>\n          </div>\n          <Typography.Text type={\"secondary\"}>\n            Note that your friend's screen needs to be at least as big as your screen to maintain\n            the shape of the map!\n          </Typography.Text>\n        </Modal>\n        {smallScreenWidth ? null : (\n          <Left>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Player Options</StyledTitle>\n              </FlexDivCenter>\n              {playerMaxHealth(props, false)}\n              {playerSpeed(props, false)}\n            </LeftRightContainer>\n          </Left>\n        )}\n\n        <Center>\n          <FlexDivCenter>\n            <Tooltip placement=\"top\" title=\"The player Will Follow The Mouse Cursor on The Screen\">\n              <StyledButton\n                onClick={() => {\n                  props.setEditing(false)\n                  if (props.followCursor) props.onClickRestart()\n                  else props.enableFollowCursor()\n                }}\n                style={{ margin: \"0\" }}\n              >\n                Follow Cursor\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Undo The Last Edit to The Map\">\n              <StyledButton onClick={() => props.onClickUndo()} style={{ margin: \"0 15px 0 0\" }}>\n                Undo Edit\n              </StyledButton>\n            </Tooltip>\n            {getPlayButton(props)}\n            <Tooltip placement=\"right\" title=\"Share This Map With a Friend\">\n              <StyledButton\n                onClick={() => {\n                  props.generateLink()\n                  this.setState({ showModal: true })\n                }}\n                style={{ margin: \"0 0 0 15px\" }}\n              >\n                Share Map\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Position The Start Location of The player\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.PLAYER_IDLE)}\n                style={{ margin: \"0 10px 0 0\" }}\n              >\n                Place Player\n              </StyledButton>\n            </Tooltip>\n            <Tooltip placement=\"right\" title=\"Position The Start Location of The Chicken\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.CHICKEN_IDLE)}\n                style={{ margin: \"0 0 0 10px\" }}\n              >\n                Place Chicken\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <Tooltip placement=\"right\" title=\"Changes The Grid Size\">\n            <FlexDivCenter>\n              <Label>Map Scale</Label>\n              <StyledSlider\n                min={minTextureSize}\n                max={maxTextureSize}\n                onChange={value => props.setTextureSize(value, true)}\n                disabled={props.inProgress}\n                value={props.textureSize !== null ? props.textureSize : 0}\n                tooltipPlacement={\"top\"}\n              />\n            </FlexDivCenter>\n          </Tooltip>\n          {smallScreenWidth\n            ? [\n                <Tooltip key={1} placement=\"topLeft\" title=\"Changes The player Max Health\">\n                  <FlexDivCenter>{playerMaxHealth(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={2} placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n                  <FlexDivCenter>{playerSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={3} placement=\"topLeft\" title=\"Changes The Chicken Movement Speed\">\n                  <FlexDivCenter>{chickenSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>\n              ]\n            : null}\n\n          <Tooltip placement=\"right\" title=\"Loads a Pre Made Level Created By The Developer\">\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Pre made Levels</Label>\n              <Radio.Group\n                value={props.selectedLevel}\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                onChange={e => props.setSelectedLevel(e.target.value)}\n              >\n                <Radio.Button value={1}>1</Radio.Button>\n                <Radio.Button value={2}>2</Radio.Button>\n                <Radio.Button value={3}>3</Radio.Button>\n                <Radio.Button value={4}>4</Radio.Button>\n                <Radio.Button value={5}>5</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <Tooltip\n            placement=\"right\"\n            title=\"Changes Wether The player Maximizes Health or Minimizes Distance\"\n          >\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Search Priority</Label>\n              <Radio.Group\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                value={props.searchPriority}\n                onChange={e => props.setSearchPriority(e.target.value)}\n              >\n                <Radio.Button value={CONSTANTS.HEALTH}>HEALTH</Radio.Button>\n                <Radio.Button value={CONSTANTS.SPEED}>SPEED</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <StyledText>Made By Mark Armanious © 2019</StyledText>\n          <div>\n            <StyledGitButton\n              shape={\"circle\"}\n              ghost={true}\n              icon={\"question-circle\"}\n              type={\"link\"}\n              onClick={() => this.setState({ showTutorial: true })}\n            ></StyledGitButton>\n            <StyledGitButton\n              href={\"https://github.com/markarmanus/runChicken\"}\n              target={\"_blank\"}\n              shape={\"circle\"}\n              ghost={true}\n              icon={\"github\"}\n              type={\"link\"}\n            ></StyledGitButton>\n          </div>\n        </Center>\n        {smallScreenWidth ? null : (\n          <Right>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Chicken Options</StyledTitle>\n              </FlexDivCenter>\n              {chickenSpeed(props, false)}\n            </LeftRightContainer>\n          </Right>\n        )}\n      </Container>\n    )\n  }\n}\n","export const LEVELS = {\n  1: \"chickenSpeed=0&firstRenderChickenLocation=10,3&firstRenderPlayerLocation=1,1&gridHeight=8&gridWidth=24&initialOverLayMapinitialTexturesMapplayerMaxHealth=5&playerSpeed=1&searchPriority=health\",\n  2: \"chickenSpeed=0&firstRenderChickenLocation=30,1&firstRenderPlayerLocation=1,1&gridHeight=8&gridWidth=32&initialOverLayMapinitialTexturesMapplayerMaxHealth=5&playerSpeed=1&searchPriority=health\",\n  3: \"chickenSpeed=0&firstRenderChickenLocation=4,1&firstRenderPlayerLocation=1,1&gridHeight=5&gridWidth=6&initialOverLayMap=13,13,13,13,13,13,13,13,12,12,13,13,13,13,12,12,13,13,13,13,12,12,13,13,13,13,13,13,13,13&initialTexturesMap=22,22,22,22,22,22,22,22,22,22,22,22,22,2,22,22,2,22,22,2,22,22,2,22,22,22,22,22,22,22&playerMaxHealth=5&playerSpeed=1&searchPriority=health\",\n  4: \"chickenSpeed=0&firstRenderChickenLocation=22,1&firstRenderPlayerLocation=1,1&gridHeight=20&gridWidth=24&initialOverLayMapinitialTexturesMapplayerMaxHealth=5&playerSpeed=1&searchPriority=health\",\n  5: \"chickenSpeed=0&firstRenderChickenLocation=22,1&firstRenderPlayerLocation=1,1&gridHeight=8&gridWidth=24&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMapplayerMaxHealth=5&playerSpeed=1&searchPriority=health\"\n}\n","import React, { Component } from \"react\"\nimport Grid from \"./Grid\"\nimport Footer from \"./Footer\"\nimport { CONFIG } from \"../Constants/Config\"\nimport styled from \"styled-components\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport queryString from \"query-string\"\nimport { LEVELS } from \"../Constants/Levels\"\nimport { message, Modal } from \"antd\"\nimport { deviceIsTooSmall } from \"../HelperFunctions\"\nimport \"antd/dist/antd.css\"\nconst MainContainer = styled.div`\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n`\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    let params = this.parseLevelData(this.props.location.search)\n    this.state = {\n      textureSize: null,\n      selectedEditTexture: null,\n      editing: false,\n      selectedLevel: CONFIG.DEFAULT_SELECTED_LEVEL,\n      inProgress: false,\n      URLParams: this.props.location.search === \"\" ? null : params,\n      paused: false,\n      reRenderGrid: false,\n      ready: false,\n      followCursor: false,\n      // allowDiagonalActions: params.allowDiagonalActions ? params.allowDiagonalActions : false,\n      playerSpeed: params.playerSpeed ? params.playerSpeed : CONFIG.DEFAULT_PLAYER_SPEED,\n      playerMaxHealth: params.playerMaxHealth\n        ? params.playerMaxHealth\n        : CONFIG.DEFAULT_PLAYER_HEALTH,\n      searchPriority: params.searchPriority\n        ? params.searchPriority\n        : CONFIG.DEFAULT_SEARCH_PRIORITY,\n      chickenSpeed: params.chickenSpeed ? params.chickenSpeed : CONFIG.DEFAULT_CHICKEN_SPEED\n    }\n    this.onClickUndo = this.onClickUndo.bind(this)\n    this.setTextureSize = this.setTextureSize.bind(this)\n    this.setSelectedEditTexture = this.setSelectedEditTexture.bind(this)\n    this.setEditing = this.setEditing.bind(this)\n    this.onClickStart = this.onClickStart.bind(this)\n    this.onClickRestart = this.onClickRestart.bind(this)\n    this.onClickPause = this.onClickPause.bind(this)\n    this.onClickResume = this.onClickResume.bind(this)\n    this.setCharacterSpeed = this.setCharacterSpeed.bind(this)\n    this.envIsReady = this.envIsReady.bind(this)\n    this.enableFollowCursor = this.enableFollowCursor.bind(this)\n    this.setCharacterMaxHealth = this.setCharacterMaxHealth.bind(this)\n    this.setSearchPriority = this.setSearchPriority.bind(this)\n    this.onFinishGame = this.onFinishGame.bind(this)\n    this.generateLink = this.generateLink.bind(this)\n    this.setAllowDiagonalActions = this.setAllowDiagonalActions.bind(this)\n    this.setSelectedLevel = this.setSelectedLevel.bind(this)\n    this.parseLevelData = this.parseLevelData.bind(this)\n  }\n  parseLevelData(value) {\n    return queryString.parse(value, {\n      arrayFormat: \"comma\",\n      parseNumbers: true,\n      parseBooleans: true\n    })\n  }\n  setSelectedLevel(level) {\n    let levelData = this.parseLevelData(LEVELS[level])\n    this.setState({ selectedLevel: level, ...levelData }, () => {\n      this.grid.onSelectCustomLevel(levelData)\n    })\n  }\n\n  componentDidMount() {\n    if (deviceIsTooSmall(window)) this.setState({ deviceIsTooSmall: true })\n    else {\n      message.info(\"Click on The Help Icon At Bottom To Help You Start!\")\n      window.addEventListener(\"keydown\", e => {\n        if (e.key.toLowerCase() === \" \") {\n          if (!this.state.inProgress && this.state.ready) this.onClickStart()\n          else if (this.state.inProgress && this.state.paused) this.onClickResume()\n          else if (this.state.inProgress && !this.state.paused) this.onClickPause()\n        }\n      })\n    }\n  }\n  setAllowDiagonalActions(value) {\n    this.setState({ allowDiagonalActions: value })\n  }\n  onFinishGame() {\n    this.setState({ inProgress: false })\n  }\n  generateLink() {\n    this.grid.updateURL()\n  }\n  setCharacterMaxHealth(type, value) {\n    this.setState({ [type + \"MaxHealth\"]: value })\n  }\n  enableFollowCursor() {\n    if (this.state.ready) {\n      this.setState({ followCursor: true, inProgress: true })\n    }\n  }\n  setCharacterSpeed(type, speed) {\n    this.setState({ [type + \"Speed\"]: speed })\n  }\n  onClickUndo() {\n    this.grid.undoEdit()\n  }\n  setTextureSize(size, reRender) {\n    this.setState({ textureSize: size, reRenderGrid: reRender })\n    if (reRender) {\n      this.onClickRestart()\n    }\n  }\n  envIsReady() {\n    this.setState({ ready: true })\n  }\n  setEditing(value) {\n    this.setState({ editing: value })\n  }\n  setSelectedEditTexture(texture) {\n    let isEditing =\n      texture !== null && texture !== TEXTURES.PLAYER_IDLE && texture !== TEXTURES.CHICKEN_IDLE\n    this.setState({\n      selectedEditTexture: texture,\n      editing: isEditing\n    })\n  }\n  onClickStart() {\n    this.setState({ inProgress: true })\n  }\n  onClickRestart() {\n    this.setState({\n      paused: false,\n      inProgress: false,\n      selectedEditTexture: null,\n      editing: false,\n      followCursor: false\n    })\n    if (this.grid !== undefined) this.grid.onClickRestart()\n  }\n  onClickPause() {\n    this.setState({ paused: true })\n  }\n  onClickResume() {\n    this.setState({ paused: false })\n  }\n  setSearchPriority(value) {\n    this.setState({ searchPriority: value })\n  }\n  render() {\n    return this.state.deviceIsTooSmall ? (\n      <Modal footer={null} visible={true} closable={false}>\n        This Device is Too Small for This Website, Please Use a Bigger Device.\n      </Modal>\n    ) : (\n      <MainContainer>\n        <Grid onRef={ref => (this.grid = ref)} {...this.state} {...this}></Grid>\n        <Footer {...this} {...this.state}></Footer>\n      </MainContainer>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport AppRoute from \"./Components/AppRoute\"\n\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<AppRoute />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport App from \"./App\"\nexport default function AppRoute() {\n  return (\n    <Router>\n      <Route path={\"/\"} component={App}></Route>\n    </Router>\n  )\n}\n"],"sourceRoot":""}