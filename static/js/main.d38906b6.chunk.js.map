{"version":3,"sources":["Constants/Textures.js","Components/Texture.js","Constants/Constants.js","Constants/Config.js","Components/Character.js","HelperFunctions.js","AStar.js","Components/Grid.js","Constants/BreakPoints.js","Components/Footer.js","Constants/Levels.js","Components/App.js","serviceWorker.js","index.js","Components/AppRoute.js"],"names":["TEXTURES","FIRE","CHICKEN_RUNNING","CHICKEN_IDLE","CHICKEN_UP","CHICKEN_DOWN","PLAYER_IDLE","PLAYER_UP","PLAYER_DOWN","PLAYER_RUNNING","WALL","HEALTH_PACK","TRANSPARENT","FLOOR_BOTTOM","FLOOR_TOP","FLOOR_RIGHT","FLOOR_LEFT","FLOOR_TOP_LEFT","FLOOR_TOP_RIGHT","FLOOR_BOTTOM_RIGHT","FLOOR_BOTTOM_LEFT","FLOOR","TEXTURE_DATA","2","animationSpeed","animated","numberOfSprites","src","icon","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","Sprite","styled","div","props","textureData","translationTo","keyframes","getAnimation","ProgressBarUnder","textureSize","ProgressBarOver","healthBarPercentage","Texture","state","nextProps","texture","this","x","y","xOffset","yOffset","onMouseDown","onMouseUp","onMouseHoverTextureEnter","onMouseHoverTextureLeave","zIndex","style","position","height","width","top","left","overflow","userSelect","undefined","onMouseEnter","onMouseLeave","onTouchMove","onTouchEnd","onTouchStart","Component","CONSTANTS","CONFIG","DEFAULT_PLAYER_SPEED","DEFAULT_CHICKEN_SPEED","DEFAULT_PLAYER_HEALTH","DEFAULT_CHICKEN_HEALTH","MAIN_APP_COLOR","SECONDARY_APP_COLOR","DEFAULT_SELECTED_LEVEL","DEFAULT_SEARCH_PRIORITY","EDITING_BORDER","CharacterSprite","Character","walking","currentTexture","type","toUpperCase","currentMovementSpeed","movementSpeed","takeAction","bind","setCorrectTexture","setCorrectDirection","doNextAction","action","getNextAction","typeUpperCase","setState","nextState","inProgress","paused","currentHealth","initialCharacterLocation","maxHealth","renderOnScreen","onRef","character","document","getElementById","direction","entity","transform","firstChild","stepsCount","Math","floor","remainder","counter","id","setInterval","offsetLeft","offsetTop","clearInterval","onCharacterFinishMove","onPlaceCharacter","healthBar","calculateBestTextureSize","window","screen","calculateMaxTextureSize","min","calculateMinTextureSize","max","isSide","costToLocation","from","to","dx","dy","sqrt","isLegalAction","destinationPos","actionType","abs","getActionType","isOutOfBoundaries","gridWidth","gridHeight","isDestinationWall","texturesMap","isHorizontalWall","isVerticalWall","addToOpen","nodeToAdd","open","added","index","length","node","g","health","nodeToAddF","h","splice","push","getPath","parent","BFSFromPlayer","actions","connected","Array","fill","closed","chickenLocation","currentChickenLocation","Node","shift","forEach","newLocation","isCloseToPlayerX","currentPlayerLocation","isCloseToPlayerY","calculateChickenCollectedPaths","playerLocation","currentPlayerHealth","values","indexOf","pop","isFire","newCost","newHealth","newNode","characterType","allowDiagonalActions","concat","chickenSpeed","start","goal","isPlayerLocation","getNextChickenAction","foundPath","bestPathNode","bestPathFoundHealth","actionsCost","map","playerMaxHealth","searchPriority","healthPackOnLocation","overLayMap","isLava","Container","EditorDoneButton","Button","EditorContainer","expanded","EditorArrow","TextureLabel","Typography","Text","Image","img","Grid","edits","modalMessage","showModal","editorExpanded","finishAfterNextAnimation","initialPlayerLocation","initialChickenLocation","currentChickenHealth","chickenMaxHealth","mouseOverX","mouseOverY","mouseDown","handleHoverWhilePlacingCharacter","getNextCharacterAction","setCharacterCurrentHealth","updateURL","value","capitalized","charAt","slice","e","persist","setSelectedEditTexture","resetCharactersLocation","player","chicken","newURLObject","playerSpeed","initialTexturesMap","initialOverLayMap","minHeight","minWidth","firstRenderPlayerLocation","firstRenderChickenLocation","history","replaceState","queryString","stringify","arrayFormat","selectedEditTexture","editing","followCursor","side","touchX","touches","pageX","touchY","pageY","target","parentElement","border","newOverLayMap","newTexturesMap","handleFollowCursor","prevProps","initializeGridWithTextureSize","tMap","oMap","useURL","container","offsetWidth","offsetHeight","envIsReady","newPosition","editsCopy","editToUndo","texturesMapCopy","overLayMapCopy","validTextureSize","mapCanFit","URLParams","addEventListener","characterLocation","currentCharacterHealth","onFinishGame","onClickRestart","levelData","setEditing","isEditingOverLay","ref","el","closable","footer","onClick","title","visible","size","shape","onClickTexture","right","bottom","floorTexture","textureToRenderIfSide","isBeingEdited","key","overLayTexture","BREAKPOINTS","TutorialImage","TutorialButtonContainer","FlexDivCenter","StyledText","StyledGitButton","StyledButton","Left","Center","Right","Label","StyledSlider","Slider","SliderContainer","StyledTitle","Title","LeftRightContainer","PlayButton","margin","fontSize","smallScreen","component","onChange","setCharacterMaxHealth","disabled","step","tooltipPlacement","placement","item","speed","setCharacterSpeed","Footer","minTextureSize","maxTextureSize","showTutorial","select","setSelectionRange","execCommand","smallScreenWidth","parseInt","smallScreenHeight","onCancel","textAlign","level","ghost","carousel","prev","next","defaultValue","location","href","copyLinkToClipBoard","enableFollowCursor","onClickUndo","ready","onClickResume","onClickPause","onClickStart","getPlayButton","generateLink","setTextureSize","Group","selectedLevel","setSelectedLevel","setSearchPriority","LEVELS","1","MainContainer","App","params","parseLevelData","search","setAllowDiagonalActions","parse","parseNumbers","parseBooleans","grid","onSelectCustomLevel","message","error","info","undoEdit","isEditing","Boolean","hostname","match","ReactDOM","render","path","navigator","serviceWorker","then","registration","unregister"],"mappings":"4TAAaA,EAAW,CACtBC,KAAM,EACNC,gBAAiB,EACjBC,aAAc,EACdC,WAAY,EACZC,aAAc,EACdC,YAAa,EACbC,UAAW,EACXC,YAAa,EACbC,eAAgB,GAChBC,KAAM,GACNC,YAAa,GACbC,YAAa,GACbC,aAAc,GACdC,UAAW,GACXC,YAAa,GACbC,WAAY,GACZC,eAAgB,GAChBC,gBAAiB,GACjBC,mBAAoB,GACpBC,kBAAmB,GACnBC,MAAO,IAEIC,EAAe,CAC1BC,EAAG,CACDC,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,eACLC,KAAM,oBAERC,EAAG,CACDL,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,oBAEPG,EAAG,CACDN,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,mBAEPI,EAAG,CACDP,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,iBAEPK,EAAG,CACDR,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,mBAEPM,EAAG,CACDT,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,kBAEPO,EAAG,CACDV,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,gBAEPQ,EAAG,CACDX,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,kBAEPS,GAAI,CACFZ,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,mBAEPU,GAAI,CACFb,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,YAEPW,GAAI,CACFd,eAAgB,OAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,uBAEPY,GAAI,CACFf,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,mBAEPa,GAAI,CACFhB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,mBAEPc,GAAI,CACFjB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,gBAEPe,GAAI,CACFlB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,kBAEPgB,GAAI,CACFnB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,iBAEPiB,GAAI,CACFpB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,oBAEPkB,GAAI,CACFrB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,qBAEPmB,GAAI,CACFtB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,wBAEPoB,GAAI,CACFvB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,uBAEPqB,GAAI,CACFxB,eAAgB,KAChBC,UAAU,EACVC,gBAAiB,EACjBC,IAAK,c,s7BCjJT,IAaMsB,EAASC,IAAOC,IAAV,KACD,SAAAC,GAAK,OAAwC,IAApCA,EAAMC,YAAY3B,mBAEZ,SAAA0B,GAAK,OAAIA,EAAMC,YAAY1B,OAE9B,SAAAyB,GAAK,OAAKA,EAAMC,YAAY5B,SAAW,YAAc,WAC7D,SAAA2B,GAAK,OAnBC,SAAA1B,GACnB,IAAM4B,GAAkB5B,EAAkB,GAAKA,EAAmB,IAUlE,OATkB6B,YAAH,IAKYD,GAYLE,CAAaJ,EAAMC,YAAY3B,oBACjD,SAAA0B,GAAK,OAAIA,EAAMC,YAAY7B,kBACrB,SAAA4B,GAAK,OAAIA,EAAMC,YAAY3B,gBAAkB,KACnD,SAAA0B,GAAK,OAAKA,EAAMC,YAAY5B,SAAW,WAAa,KAOpDgC,EAAmBP,IAAOC,IAAV,KAMV,SAAAC,GAAK,MAAwB,GAApBA,EAAMM,eAGrBC,EAAkBT,IAAOC,IAAV,KAOV,SAAAC,GAAK,OAAI,IAAMA,EAAMQ,uBACpB,SAAAR,GAAK,MAAwB,GAApBA,EAAMM,eAuEZG,EArEf,YACE,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,GAFI,EADrB,mFAKwBC,GACpB,OACEA,EAAUC,UAAYC,KAAKb,MAAMY,SACjCD,EAAUL,cAAgBO,KAAKb,MAAMM,aACrCK,EAAUG,IAAMD,KAAKb,MAAMc,GAC3BH,EAAUI,IAAMF,KAAKb,MAAMe,GAC3BJ,EAAUK,UAAYH,KAAKb,MAAMgB,SACjCL,EAAUM,UAAYJ,KAAKb,MAAMiB,SACjCN,EAAUH,sBAAwBK,KAAKb,MAAMQ,sBAbnD,+BAiBY,IAAD,EAcHK,KAAKb,MAZPiB,EAFK,EAELA,QACAD,EAHK,EAGLA,QACAD,EAJK,EAILA,EACAD,EALK,EAKLA,EACAI,EANK,EAMLA,YACAC,EAPK,EAOLA,UACAC,EARK,EAQLA,yBACAC,EATK,EASLA,yBACAT,EAVK,EAULA,QACAU,EAXK,EAWLA,OACAhB,EAZK,EAYLA,YACAE,EAbK,EAaLA,oBAEIP,EAAc/B,EAAa0C,GACjC,OACE,yBACEW,MAAO,CACLC,SAAU,WACVC,OAAQnB,EAAc,KACtBoB,MAAOpB,EAAc,KACrBqB,IAAKV,EAAUF,EAAIT,EAAcW,EAAUF,EAAIT,EAC/CsB,KAAMZ,EAAUF,EAAIR,EAAcU,EAAUF,EAAIR,EAChDgB,OAAQA,EACRO,SAAU,SACVC,WAAY,cAGWC,IAAxBvB,EACC,kBAACH,EAAD,CAAkBC,YAAaA,GAC7B,kBAACC,EAAD,CACEC,oBAAqBA,EACrBF,YAAaA,KAGf,KACJ,kBAACT,EAAD,CACEI,YAAaA,EACbiB,YAAaA,EACbC,UAAWA,EACXa,aAAcZ,EACda,aAAcZ,EACda,YAAad,EACbe,WAAYhB,EACZiB,aAAclB,SA9DxB,GAA6BmB,aCpDhBC,EACH,SADGA,EAEF,UAFEA,EAGF,UAHEA,EAIF,UAJEA,EAKH,SALGA,EAMJ,QCJIC,EAAS,CACpBC,qBAAsB,EACtBC,sBAAuB,EACvBC,sBAAuB,EACvBC,uBAAwB,IACxBC,eAAgB,UAChBC,oBAAqB,UACrBC,uBAAwB,EACxBC,wBAAyBT,EACzBU,eAAgB,oB,qGCJlB,IAAMC,EAAkBnD,IAAOC,IAAV,KA6JNmD,EA1Jf,YACE,WAAYlD,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXyC,SAAS,EACTC,eAAgBxG,EAASoD,EAAMqD,KAAKC,cAAgB,SACpDC,qBAAsB,EAAKvD,MAAMwD,eAEnC,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,gBAC3B,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAVH,EADrB,4EAeI,IAAII,EAASjD,KAAKb,MAAM+D,cAAclD,KAAKb,MAAMqD,MAC7CW,EAAgBnD,KAAKb,MAAMqD,KAAKC,cAClB,IAAdQ,EAAO,IAA0B,IAAdA,EAAO,IAC5BjD,KAAKoD,SAAS,CAAEd,SAAS,IACzBtC,KAAK4C,WAAWK,IACPjD,KAAKH,MAAM0C,iBAAmBxG,EAASoH,EAAgB,UAChEnD,KAAKoD,SAAS,CAAEb,eAAgBxG,EAASoH,EAAgB,aArB/D,4CAwBwBrD,EAAWuD,GAAY,IAAD,EAYtCrD,KAAKb,MAVPgB,EAFwC,EAExCA,QACAC,EAHwC,EAGxCA,QACAX,EAJwC,EAIxCA,YACAkD,EALwC,EAKxCA,cACAW,EANwC,EAMxCA,WACAC,EAPwC,EAOxCA,OACAC,EARwC,EAQxCA,cACAC,EATwC,EASxCA,yBACAC,EAVwC,EAUxCA,UACAC,EAXwC,EAWxCA,eAEF,OACE7D,EAAUK,UAAYA,GACtBL,EAAUM,UAAYA,GACtBN,EAAUL,cAAgBA,GAC1BK,EAAU6C,gBAAkBA,GAC5B7C,EAAUwD,aAAeA,GACzBxD,EAAUyD,SAAWA,GACrBzD,EAAU0D,gBAAkBA,GAC5B1D,EAAU4D,YAAcA,GACxB5D,EAAU6D,iBAAmBA,GAC7B7D,EAAU2D,2BAA6BA,IACvC,IAhDN,0CAqDIzD,KAAKb,MAAMyE,MAAM5D,QArDrB,uCAwDI,IAAI6D,EAAYC,SAASC,eAAe/D,KAAKb,MAAMqD,MACnDqB,EAAUnD,MAAMK,KAAO,EACvB8C,EAAUnD,MAAMI,IAAM,EACtBd,KAAKoD,SAAS,CAAEb,eAAgBxG,EAASiE,KAAKb,MAAMqD,KAAKC,cAAgB,aA3D7E,4CA+DOzC,KAAKH,MAAMyC,SACZtC,KAAKb,MAAMmE,aACVtD,KAAKb,MAAMoE,QACZvD,KAAKb,MAAMwE,gBAGX3D,KAAKgD,iBArEX,wCAwEoBgB,GAChB,IAAIb,EAAgBnD,KAAKb,MAAMqD,KAAKC,cAChC1C,GACgB,IAAlBiE,EAAU,IAA8B,IAAjBA,EAAU,GAC7BjI,EAASoH,EAAgB,OACR,IAAjBa,EAAU,IAA6B,IAAjBA,EAAU,GAChCjI,EAASoH,EAAgB,SACzBpH,EAASoH,EAAgB,YAC3BnD,KAAKH,MAAM0C,iBAAmBxC,GAASC,KAAKoD,SAAS,CAAEb,eAAgBxC,MAhF/E,0CAkFsBkE,EAAQD,GACX,OAAXC,KACoB,IAAlBD,EAAU,GACZC,EAAOvD,MAAMwD,UAAY,aAEzBD,EAAOvD,MAAMwD,UAAY,eAvFjC,iCA2FaF,GACThE,KAAK8C,kBAAkBkB,GACvB,IAAIH,EAAYC,SAASC,eAAe/D,KAAKb,MAAMqD,MACnDxC,KAAK+C,oBAAoBc,EAAUM,WAAYH,GAC/C,IAAII,EAAaC,KAAKC,MAAMtE,KAAKb,MAAMM,YAAcO,KAAKb,MAAMwD,eAC5D4B,EAAYvE,KAAKb,MAAMM,YAAcO,KAAKb,MAAMwD,cAEhD6B,EAAU,EACVxE,KAAKH,MAAM6C,uBAAyB1C,KAAKb,MAAMwD,eACjD3C,KAAKoD,SAAS,CAAEV,qBAAsB1C,KAAKb,MAAMwD,gBACnD,IAAI8B,EAAKC,YACT,WACMF,IAAYJ,GAAepE,KAAKb,MAAMmE,YAOxCkB,IACAX,EAAUnD,MAAMK,KACd8C,EAAUc,WAAaX,EAAU,GAAKhE,KAAKH,MAAM6C,qBAAuB,KAC1EmB,EAAUnD,MAAMI,IACd+C,EAAUe,UAAYZ,EAAU,GAAKhE,KAAKH,MAAM6C,qBAAuB,OAVzEmC,cAAcJ,GACdZ,EAAUnD,MAAMK,KAAO8C,EAAUc,WAAaX,EAAU,GAAKO,EAAY,KACzEV,EAAUnD,MAAMI,IAAM+C,EAAUe,UAAYZ,EAAU,GAAKO,EAAY,KACvEvE,KAAKb,MAAM2F,sBAAsB9E,KAAKb,MAAMqD,KAAMwB,GAClDhE,KAAKoD,SAAS,CAAEd,SAAS,MAPFO,KAAK7C,MAAO,KArG3C,+BAsHY,IAAD,EAaHA,KAAKb,MAXPsE,EAFK,EAELA,yBACAjB,EAHK,EAGLA,KACA/C,EAJK,EAILA,YACAU,EALK,EAKLA,QACAC,EANK,EAMLA,QACA2E,EAPK,EAOLA,iBACApB,EARK,EAQLA,eACAqB,EATK,EASLA,UACAxB,EAVK,EAULA,cACA/C,EAXK,EAWLA,OACAiD,EAZK,EAYLA,UAEE/D,EAAsBqF,EAAaxB,EAAgBE,EAAa,SAAMxC,EAC1E,OACE,kBAACkB,EAAD,CAAiBqC,GAAIjC,GACW,OAA7BiB,GAAqCE,EACpC,kBAAC,EAAD,CACE1D,EAAGwD,EAAyB,GAC5BvD,EAAGuD,EAAyB,GAC5B9D,oBAAqBA,EACrBF,YAAaA,EACbU,QAASA,EACTC,QAASA,EACToC,KAAMA,EACN/B,OAAQA,EACRJ,YAAa,kBAAM0E,EAAiBvC,IACpCzC,QAASC,KAAKH,MAAM0C,iBAEpB,UApJZ,GAA+Bf,aCVzByD,EAA2B,SAAAC,GAC/B,IAAMtE,EAASsE,EAAOC,OAAOvE,OAAS,IAChCC,EAAQqE,EAAOC,OAAOtE,MAG5B,OAFmBD,EAASC,EAAQA,EAAQD,GAExB,IAEhBwE,EAA0B,SAAAF,GAC9B,IAAMtE,EAASsE,EAAOC,OAAOvE,OAAS,IAChCC,EAAQqE,EAAOC,OAAOtE,MAC5B,OAAOwD,KAAKC,MAAMD,KAAKgB,IAAL,MAAAhB,KAAY,CAACzD,EAAS,EAAGC,EAAQ,MAE/CyE,EAA0B,SAAAJ,GAC9B,IAAMtE,EAASsE,EAAOC,OAAOvE,OAAS,IAChCC,EAAQqE,EAAOC,OAAOtE,MAE5B,OAAOwD,KAAKC,MAAMD,KAAKkB,IAAL,MAAAlB,KAAY,CAACzD,EAAS,GAAIC,EAAQ,OAEhD2E,EAAS,SAACvF,EAAGC,EAAGW,EAAOD,GAK3B,OADeV,IAAMU,EAAS,GADZ,IAANV,GADED,IAAMY,EAAQ,GADT,IAANZ,GCfTwF,EAAiB,SAACC,EAAMC,GAC5B,IAAIC,EAAKD,EAAG,GAAKD,EAAK,GAClBG,EAAKF,EAAG,GAAKD,EAAK,GAEtB,OAAkB,IADHrB,KAAKyB,KAAKF,EAAKA,EAAKC,EAAKA,IAQpCE,EAAgB,SAAC9F,EAAGC,EAAG+C,EAAQpD,GACnC,IAAMmG,EAAiB,CAAE/F,EAAGA,EAAIgD,EAAO,GAAI/C,EAAGA,EAAI+C,EAAO,IACnDgD,EAPc,SAAAhD,GACpB,OAAOA,EAAO,GAAKA,EAAO,KAAO,GAAyC,IAApCoB,KAAK6B,IAAIjD,EAAO,GAAKA,EAAO,IAC9D,WACA,WAIekD,CAAclD,GACjC,GAAImD,EAAkBJ,EAAgBnG,EAAMwG,UAAWxG,EAAMyG,YAAa,OAAO,EACjF,GAAId,EAAOQ,EAAe/F,EAAG+F,EAAe9F,EAAGL,EAAMwG,UAAWxG,EAAMyG,YAAa,OAAO,EAC1F,IAAMC,EACJ1G,EAAM2G,YAAYR,EAAe9F,EAAIL,EAAMwG,UAAYL,EAAe/F,KAAOlE,EAASU,KACxF,GAAmB,aAAfwJ,EAA2B,CAC7B,IAAMQ,EACJ5G,EAAM2G,YAAYtG,EAAIL,EAAMwG,UAAYL,EAAe/F,KAAOlE,EAASU,KACnEiK,EACJ7G,EAAM2G,YAAYR,EAAe9F,EAAIL,EAAMwG,UAAYpG,KAAOlE,EAASU,KAEzE,QAASgK,GAAoBC,GAAkBH,GAE/C,OAAQA,GAGNI,EAAY,SAACC,EAAWC,GAG5B,IAFA,IAAIC,GAAQ,EAEHC,EAAQ,EAAGA,EAAQF,EAAKG,OAAQD,IAAS,CAChD,IAAIE,EAAOJ,EAAKE,GAChB,GACEH,EAAU3G,IAAMgH,EAAKhH,GACrB2G,EAAU1G,IAAM+G,EAAK/G,GACrB0G,EAAUM,GAAKD,EAAKC,GACpBN,EAAUO,QAAUF,EAAKE,OACzB,CACAL,GAAQ,EACR,OAIJ,IAAKA,EAGH,IAFA,IAAMM,EAAaR,EAAUM,EAAIN,EAAUS,EAElCN,EAAQ,EAAGA,EAAQF,EAAKG,OAAQD,IAAS,CAChD,IAAME,EAAOJ,EAAKE,GAElB,GAAIK,GADUH,EAAKC,EAAID,EAAKI,EACH,CACvBP,GAAQ,EACRD,EAAKS,OAAOP,EAAO,EAAGH,GACtB,OAKDE,GACHD,EAAKU,KAAKX,IAIRY,EAAU,SAAAP,GAGd,IAFA,IAAIhE,EAASgE,EAAKhE,OACdwE,EAASR,EAAKQ,OACA,OAAXA,GAAqC,OAAlBA,EAAOxE,QAC/BA,EAASwE,EAAOxE,OAChBwE,EAASA,EAAOA,OAGlB,OAAOxE,GAoEHyE,EAAgB,SAAC7H,EAAOV,EAAOwI,GACnC,IAAIC,EAnEiC,SAAC/H,EAAO8H,GAC7C,IAAIC,EAAY,IAAIC,MAAMhI,EAAMyG,WAAazG,EAAMwG,WAAWyB,MAAK,GAC/DC,EAAS,IAAIF,MAAMhI,EAAMyG,WAAazG,EAAMwG,WAAWyB,MAAK,GAC5DjB,EAAO,GACPmB,EAAkBnI,EAAMoI,uBAC5BpB,EAAKU,KAAK,IAAIW,EAAKF,EAAgB,GAAIA,EAAgB,GAAI,KAAM,KAAM,KAAM,EAAG,IAChF,IANyD,iBAOvD,GAAoB,IAAhBnB,EAAKG,OACP,MAAM,CAAN,EAAOY,GAET,IAAIX,EAAOJ,EAAKsB,QACVpB,EAAQE,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,EAE9C,GAAI8H,EAAOhB,GACT,iBAEFgB,EAAOhB,IAAS,EAChBa,EAAUb,IAAS,EACnBY,EAAQS,SAAQ,SAAAnF,GACd,GAAI8C,EAAckB,EAAKhH,EAAGgH,EAAK/G,EAAG+C,EAAQpD,GAAQ,CAChD,IAAMwI,EAAc,CAAEpI,EAAGgH,EAAKhH,EAAIgD,EAAO,GAAI/C,EAAG+G,EAAK/G,EAAI+C,EAAO,IAC1DqF,EACyD,IAA7DjE,KAAK6B,IAAImC,EAAYpI,EAAIJ,EAAM0I,sBAAsB,KACrDF,EAAYnI,IAAML,EAAM0I,sBAAsB,GAC1CC,EACyD,IAA7DnE,KAAK6B,IAAImC,EAAYnI,EAAIL,EAAM0I,sBAAsB,KACrDF,EAAYpI,IAAMJ,EAAM0I,sBAAsB,GAG9CF,EAAYpI,IAAMJ,EAAM0I,sBAAsB,IAC9CF,EAAYnI,IAAML,EAAM0I,sBAAsB,IACtBD,GAAqBE,GAC7C3B,EAAKU,KAAK,IAAIW,EAAKG,EAAYpI,EAAGoI,EAAYnI,EAAG,KAAM+G,EAAMhE,EAAQ,EAAG,WA1BnE,CAAC,IAAD,+BAQT,SARS,4CA6DGwF,CAA+B5I,EAAO8H,GAElDd,EAAO,GACP6B,EAAiB7I,EAAM0I,sBAC3B1B,EAAKU,KACH,IAAIW,EAAKQ,EAAe,GAAIA,EAAe,GAAI7I,EAAM8I,oBAAqB,KAAM,KAAM,EAAG,IAI3F,IAFA,IAAIZ,EAAS,IAAIF,MAAMhI,EAAMyG,WAAazG,EAAMwG,WAAWyB,MAAK,GAC5Dc,EAAS,IAAIf,MAAMhI,EAAMwG,UAAYxG,EAAMyG,YAAYwB,KAAK,GATjB,aAW7C,GAAoB,IAAhBjB,EAAKG,OAAc,CACrB,IAAID,EAAQ6B,EAAOC,QAAQxE,KAAKkB,IAAL,MAAAlB,KAAI,YAAQuE,KAGnC1I,EAAImE,KAAKC,MAAMyC,EAAQlH,EAAMwG,WAGjC,MAAM,CAAN,EAAO,CAFChC,KAAKC,MAAMyC,EAAQlH,EAAMwG,WAEtBnG,IAEb,IAAI+G,EAAOJ,EAAKiC,MACV/B,EAAQE,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,EAE9C,GAAI8H,EAAOhB,GACT,iBAGFgB,EAAOhB,IAAS,EAChB6B,EAAO7B,GAASE,EAAKC,EAErBS,EAAQS,SAAQ,SAAAnF,GACd,GAAI8C,EAAckB,EAAKhH,EAAGgH,EAAK/G,EAAG+C,EAAQpD,GAAQ,CAChD,IAAMwI,EAAc,CAACpB,EAAKhH,EAAIgD,EAAO,GAAIgE,EAAK/G,EAAI+C,EAAO,IACnD8D,EAAQsB,EAAY,GAAKxI,EAAMwG,UAAYgC,EAAY,GAC7D,GACET,EAAUb,IACTE,EAAKhH,IAAMJ,EAAM0I,sBAAsB,IAAMtB,EAAK/G,IAAML,EAAM0I,sBAAsB,GACrF,CACA,IAAMQ,EAASlJ,EAAM2G,YAAYO,KAAWhL,EAASC,KACjDgN,EAAU/B,EAAKC,EAAI,IACvB8B,EAAUD,EAASC,EAAU,IAAMA,EACnC,IAAMC,EAAYF,EAAS9B,EAAKE,OAAS,EAAIF,EAAKE,OAC9C8B,GAAa,IAAGD,EAAU,IAAYA,GAC1C,IAAIE,EAAU,IAAIhB,EAChBG,EAAY,GACZA,EAAY,GACZY,EACAhC,EACAhE,EACA+F,EACA,GAEFrC,EAAUuC,EAASrC,WA1Cd,CAAC,IAAD,+BAcT,SAdS,6CAgDTT,EAAoB,SAACzF,EAAU0F,EAAWC,GAC9C,OAAO3F,EAASV,EAAI,GAAKU,EAAST,EAAI,GAAKS,EAASV,GAAKoG,GAAa1F,EAAST,GAAKoG,GAiKhF4B,EACJ,WAAYjI,EAAGC,EAAGiH,EAAQM,EAAQxE,EAAQiE,EAAGG,GAAI,oBAC/CrH,KAAKC,EAAIA,EACTD,KAAKE,EAAIA,EACTF,KAAKmH,OAASA,EACdnH,KAAKiD,OAASA,EACdjD,KAAKyH,OAASA,EACdzH,KAAKkH,EAAIA,EACTlH,KAAKqH,EAAIA,GAGEnE,EAxGO,SAACrD,EAAOV,EAAOgK,GAEnC,IAAIxB,EAAU,CACZ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,EAAE,EAAG,IASP,GADIxI,EAAMiK,uBAAsBzB,EAAUA,EAAQ0B,OAN5B,CACpB,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,GACL,EAAE,GAAI,MAGJF,IAAkB1H,EAAmB,OAjFd,SAACkG,EAAS9H,EAAOV,GAiB5C,GAA2B,IAAvBA,EAAMmK,aAAoB,MAAO,CAAC,EAAG,GACzC,IAAMC,EAAQ1J,EAAMoI,uBACduB,EAAO9B,EAAc7H,EAAOV,EAAOwI,GACzC,GAAI4B,EAAM,KAAOC,EAAK,IAAMD,EAAM,KAAOC,EAAK,GAC5C,MAAO,CAAC,EAAG,GAGb,IAAIzB,EAAS,IAAIF,MAAMhI,EAAMyG,WAAazG,EAAMwG,WAAWyB,MAAK,GAC5DjB,EAAO,GACXA,EAAKU,KAAK,IAAIW,EAAKqB,EAAM,GAAIA,EAAM,GAAI,EAAG,KAAM,KAAM,EAAG9D,EAAe8D,EAAOC,KAC/E,IA3BsD,iBA4BpD,GAAoB,IAAhB3C,EAAKG,OACP,MAAM,CAAN,EAAO,CAAC,EAAG,IAEb,IAAIC,EAAOJ,EAAKiC,MAChB,OAAI7B,EAAKhH,IAAMuJ,EAAK,IAAMvC,EAAK/G,IAAMsJ,EAAK,GAClC,CAAN,EAAOhC,EAAQP,IAEbc,EAAOd,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,GACzC,YAEF8H,EAAOd,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,IAAK,OAC5C0H,EAAQS,SAAQ,SAAAnF,GACd,GAAI8C,EAAckB,EAAKhH,EAAGgH,EAAK/G,EAAG+C,EAAQpD,GAAQ,CAChD,IAAMwI,EAAc,CAAEpI,EAAGgH,EAAKhH,EAAIgD,EAAO,GAAI/C,EAAG+G,EAAK/G,EAAI+C,EAAO,IAC1DqF,EACyD,IAA7DjE,KAAK6B,IAAImC,EAAYpI,EAAIJ,EAAM0I,sBAAsB,KACrDF,EAAYnI,IAAML,EAAM0I,sBAAsB,GAC1CC,EACyD,IAA7DnE,KAAK6B,IAAImC,EAAYnI,EAAIL,EAAM0I,sBAAsB,KACrDF,EAAYpI,IAAMJ,EAAM0I,sBAAsB,GAE1CkB,EACJpB,EAAYpI,IAAMJ,EAAM0I,sBAAsB,IAC9CF,EAAYnI,IAAML,EAAM0I,sBAAsB,GAChD,IAAMD,IAAoBE,IACnBiB,EAAkB,CACrB,IAAMvC,EAAID,EAAKC,EAAI,IACbG,EAAI5B,EAAe,CAAC4C,EAAYpI,EAAGoI,EAAYnI,GAAIsJ,GACnDN,EAAU,IAAIhB,EAAKG,EAAYpI,EAAGoI,EAAYnI,EAAG,EAAG+G,EAAMhE,EAAQiE,EAAGG,GAC3EV,EAAUuC,EAASrC,YA9BhB,CAAC,IAAD,+BAST,SATS,4CAsDmC6C,CAAqB/B,EAAS9H,EAAOV,GACrF,IAAIoK,EAAQ1J,EAAM0I,sBACdiB,EAAO3J,EAAMoI,uBACb0B,GAAY,EACZC,EAAe,KACfC,EAAsB,EAE1B,GAAIN,EAAM,KAAOC,EAAK,IAAMD,EAAM,KAAOC,EAAK,GAC5C,MAAO,CAAC,EAAG,GAGb,IAAIM,EAAc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAClD/B,EAAS,YAAI,IAAIF,MAAMhI,EAAMwG,UAAYxG,EAAMyG,aAAayD,KAAI,kBAClE,IAAIlC,MAAM1I,EAAM6K,iBAAiBlC,MAAK,MAGpCjB,EAAO,GACXA,EAAKU,KACH,IAAIW,EACFqB,EAAM,GACNA,EAAM,GACN1J,EAAM8I,oBACN,KACA,KACA,EACAlD,EAAe8D,EAAOC,KAG1B,IA3CqD,iBA4CnD,GAAoB,IAAhB3C,EAAKG,OACP,OAAI2C,EACI,CAAN,EAAOnC,EAAQoC,IAEX,CAAN,EAAO,CAAC,EAAG,IAGb,IAAI3C,EAAOJ,EAAKiC,MAChB,GAAI7B,EAAKhH,IAAMuJ,EAAK,IAAMvC,EAAK/G,IAAMsJ,EAAK,GAAI,CAC5C,GAAIvC,EAAKE,SAAWhI,EAAM6K,iBAAmB7K,EAAM8K,iBAAmBxI,EACpE,MAAM,CAAN,EAAO+F,EAAQP,IACNA,EAAKE,OAAS0C,IACvBF,GAAY,EACZE,EAAsB5C,EAAKE,OAC3ByC,EAAe3C,GAKnB,OAAIc,EAAOd,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,GAAGgH,EAAKE,OAAS,GAC1D,YAGFY,EAAOd,EAAK/G,EAAIL,EAAMwG,UAAYY,EAAKhH,GAAGgH,EAAKE,OAAS,IAAK,EACzDF,EAAKE,QAAU,EAAG,gBACtBQ,EAAQS,SAAQ,SAACnF,EAAQ8D,GACvB,GAAIhB,EAAckB,EAAKhH,EAAGgH,EAAK/G,EAAG+C,EAAQpD,GAAQ,CAChD,IAAMwI,EAAc,CAAEpI,EAAGgH,EAAKhH,EAAIgD,EAAO,GAAI/C,EAAG+G,EAAK/G,EAAI+C,EAAO,IAC5DiE,EAAID,EAAKC,EAAI4C,EAAY/C,GACvBM,EAAI5B,EAAe,CAAC4C,EAAYpI,EAAGoI,EAAYnI,GAAIsJ,GACnDU,EACJrK,EAAMsK,WAAW9B,EAAYnI,EAAIL,EAAMwG,UAAYgC,EAAYpI,KAAOlE,EAASW,YAC3E0N,EACJvK,EAAM2G,YAAY6B,EAAYnI,EAAIL,EAAMwG,UAAYgC,EAAYpI,KAAOlE,EAASC,KAE5EmL,EAAS+C,EACX/K,EAAM6K,gBACNI,EACAnD,EAAKE,OAAS,EACdF,EAAKE,OACLiD,IAAWF,IAAsBhD,GAAK,IAE1C,IAAMgC,EAAU,IAAIhB,EAAKG,EAAYpI,EAAGoI,EAAYnI,EAAGiH,EAAQF,EAAMhE,EAAQiE,EAAGG,GAChFV,EAAUuC,EAASrC,WA5CZ,CAAC,IAAD,+BAyBW,SAzBX,6C,8oCC7Sf,IAAMwD,GAAYpL,IAAOC,IAAV,MAMToL,GAAmBrL,YAAOsL,IAAPtL,CAAH,MAGhBuL,GAAkBvL,IAAOC,IAAV,MASX,SAAAC,GAAK,OAAKA,EAAMsL,SAAW,GAAK,MAEjC,SAAAtL,GAAK,OAAIA,EAAM2B,MAGFY,EAAOM,qBAEvB0I,GAAczL,YAAOsL,IAAPtL,CAAH,MAEF,SAAAE,GAAK,MAAwB,SAAnBA,EAAMsL,SAAsB,mBAAqB,MAKpEE,GAAe1L,YAAO2L,IAAWC,KAAlB5L,CAAH,MAIZ6L,GAAQ7L,IAAO8L,IAAV,MAsjBIC,GAhjBf,YACE,WAAY7L,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACX2G,YAAa,GACb2D,WAAY,GACZc,MAAO,GACPC,aAAc,GACdC,WAAW,EACX9E,UAAW,EACX+E,gBAAgB,EAChBC,0BAA0B,EAC1B/E,WAAY,EACZnG,QAAS,EACTC,QAAS,EACTkL,sBAAuB,KACvB/C,sBAAuB,KACvBgD,uBAAwB,KACxBtD,uBAAwB,KACxBU,oBAAqBxJ,EAAM6K,gBAC3BwB,qBAAsBrM,EAAMsM,iBAC5BC,WAAY,KACZC,WAAY,KACZC,WAAW,GAEb,EAAKvL,YAAc,EAAKA,YAAYwC,KAAjB,gBACnB,EAAKvC,UAAY,EAAKA,UAAUuC,KAAf,gBACjB,EAAKtC,yBAA2B,EAAKA,yBAAyBsC,KAA9B,gBAChC,EAAKrC,yBAA2B,EAAKA,yBAAyBqC,KAA9B,gBAChC,EAAKkC,iBAAmB,EAAKA,iBAAiBlC,KAAtB,gBACxB,EAAKgJ,iCAAmC,EAAKA,iCAAiChJ,KAAtC,gBACxC,EAAKiJ,uBAAyB,EAAKA,uBAAuBjJ,KAA5B,gBAC9B,EAAKkJ,0BAA4B,EAAKA,0BAA0BlJ,KAA/B,gBACjC,EAAKiC,sBAAwB,EAAKA,sBAAsBjC,KAA3B,gBAC7B,EAAKmJ,UAAY,EAAKA,UAAUnJ,KAAf,gBAjCA,EADrB,uFAqC4BgB,EAAWoI,GACnC,IAAIC,EAAcrI,EAAUsI,OAAO,GAAG1J,cAAgBoB,EAAUuI,MAAM,GACtEpM,KAAKoD,SAAL,eAAiB,UAAY8I,EAAc,SAAWD,MAvC1D,kCAyCcI,EAAGpM,EAAGC,GAAI,IAAD,OACnBmM,EAAEC,UACFtM,KAAKoD,SAAS,CAAEwI,WAAW,IAAQ,WACjC,EAAKrL,yBAAyB8L,EAAGpM,EAAGC,QA5C1C,yCAgDIF,KAAKb,MAAMoN,uBAAuB,QAhDtC,kCAmDIvM,KAAKoD,SAAS,CAAEwI,WAAW,MAnD/B,uDAqDmCzC,EAAelJ,EAAGC,GAC7CiJ,IAAkBpN,EAASG,eAC7B8D,KAAKwM,wBAAwB/K,GAC7BzB,KAAKoD,SAAS,CAAEmI,uBAAwB,CAACtL,EAAGC,GAAI+H,uBAAwB,CAAChI,EAAGC,MAE1EiJ,IAAkBpN,EAASM,cAC7B2D,KAAKwM,wBAAwB/K,GAC7BzB,KAAKoD,SAAS,CAAEkI,sBAAuB,CAACrL,EAAGC,GAAIqI,sBAAuB,CAACtI,EAAGC,QA5DhF,8CA+D0B2D,GACtB,GAAIA,IAAcpC,EAAkB,CAClC,IAAIgL,EAAS3I,SAASC,eAAetC,GACrCgL,EAAO/L,MAAMK,KAAO,EACpB0L,EAAO/L,MAAMI,IAAM,MACd,CACL,IAAI4L,EAAU5I,SAASC,eAAetC,GACtCiL,EAAQhM,MAAMK,KAAO,EACrB2L,EAAQhM,MAAMI,IAAM,KAvE1B,yCA0EqBb,EAAGC,GACpBF,KAAKwM,wBAAwB/K,GAC7BzB,KAAKoD,SAAS,CAAEmI,uBAAwB,CAACtL,EAAGC,GAAI+H,uBAAwB,CAAChI,EAAGC,OA5EhF,kCAgFI,IAAIyM,EAAe,CACjBC,YAAa5M,KAAKb,MAAMyN,YACxB5C,gBAAiBhK,KAAKb,MAAM6K,gBAC5B6C,mBAAoB7M,KAAKH,MAAM2G,YAC/ByD,eAAgBjK,KAAKb,MAAM8K,eAC3Bb,qBAAsBpJ,KAAKb,MAAMiK,qBACjC0D,kBAAmB9M,KAAKH,MAAMsK,WAC9B4C,UAAW7H,OAAOC,OAAOvE,OACzBoM,SAAU9H,OAAOC,OAAOtE,MACxByI,aAActJ,KAAKb,MAAMmK,aACzB7J,YAAaO,KAAKb,MAAMM,YACxBwN,0BAA2BjN,KAAKH,MAAMyL,sBACtC4B,2BAA4BlN,KAAKH,MAAM0L,wBAGzCrG,OAAOiI,QAAQC,aACb,GACA,KACA,IACEC,KAAYC,UAAUX,EAAc,CAClCY,YAAa,aApGvB,+CAyG2BlB,EAAGpM,EAAGC,GAAI,IAAD,EACoCF,KAAKb,MAAjEqO,EADwB,EACxBA,oBAAqBC,EADG,EACHA,QAASC,EADN,EACMA,aAAcjO,EADpB,EACoBA,YADpB,EAW5BO,KAAKH,MARP2G,EAH8B,EAG9BA,YACAoF,EAJ8B,EAI9BA,UACAX,EAL8B,EAK9BA,MACAd,EAN8B,EAM9BA,WACAhK,EAP8B,EAO9BA,QACAC,EAR8B,EAQ9BA,QACAiG,EAT8B,EAS9BA,UACAC,EAV8B,EAU9BA,WAEES,EAAQ7G,EAAImG,EAAYpG,EAExB0N,EAAOnI,EAAOvF,EAAGC,EAAGmG,EAAWC,GACnC,GAAe,cAAX+F,EAAE7J,KAAsB,CAC1B,IAAIoL,EAASvJ,KAAKC,OAAO+H,EAAEwB,QAAQ,GAAGC,MAAQ3N,GAAWV,GACrDsO,EAAS1J,KAAKC,OAAO+H,EAAEwB,QAAQ,GAAGG,MAAQ5N,GAAWX,GACzD,GAAImO,GAAUvH,GAAa0H,GAAUzH,EAAY,OACjDS,EAAQgH,EAAS1H,EAAYuH,EAE/B,IAAKD,EACH,GACEH,IAAwBzR,EAASM,aACjCmR,IAAwBzR,EAASG,aAEjC8D,KAAK6L,iCAAiC2B,EAAqBvN,EAAGC,QACzD,GAAIuN,GAIT,GAHiB,OAAbpB,EAAE4B,QAAqB,iBAAkB/I,SAC3CmH,EAAE4B,OAAOC,cAAcxN,MAAMyN,OAASzM,EAAOS,gBAE3CqL,IAAwBzR,EAASW,YACnC,GAAIkP,EAAW,CACb,IAAIwC,EAAgBjE,EAAWiC,QAC/BgC,EAAcrH,GACZoD,EAAWpD,KAAWhL,EAASW,YAC3BX,EAASY,YACT6Q,EACNxN,KAAKoD,SAAS,CACZ+G,WAAYiE,EACZ1C,WAAYzL,EACZ0L,WAAYzL,EACZ0L,WAAW,EACXX,MAAM,GAAD,mBAAMA,GAAN,CAAa,CAAEzI,KAAMf,EAAmB1B,QAASoK,EAAWpD,GAAQ9G,IAAGC,cAG9EF,KAAKoD,SAAS,CAAEsI,WAAYzL,EAAG0L,WAAYzL,SAExC,GAAIsG,EAAYO,KAAWyG,EAChC,GAAI5B,EAAW,CACb,IAAIyC,EAAiB7H,EAAY4F,QACjCiC,EAAetH,GAASyG,EACxBxN,KAAKoD,SAAS,CACZoD,YAAa6H,EACb3C,WAAYzL,EACZ0L,WAAYzL,EACZ+K,MAAM,GAAD,mBAAMA,GAAN,CAAa,CAAEzI,KAAMf,EAAmB1B,QAASyG,EAAYO,GAAQ9G,IAAGC,cAG/EF,KAAKoD,SAAS,CAAEsI,WAAYzL,EAAG0L,WAAYzL,SAGtCwN,GACT1N,KAAKsO,mBAAmBrO,EAAGC,KAxKnC,+CA4K2BmM,GACnBrM,KAAKb,MAAMsO,UACbzN,KAAKoD,SAAS,CAAEsI,WAAY,KAAMC,WAAY,OAC9CU,EAAE4B,OAAOC,cAAcxN,MAAMyN,OAAS,OA/K5C,yCAkLqBI,GACbA,EAAU9O,cAAgBO,KAAKb,MAAMM,aACvCO,KAAKwO,8BAA8BxO,KAAKb,MAAMM,aAE5C8O,EAAUvE,kBAAoBhK,KAAKb,MAAM6K,iBAC3ChK,KAAKoD,SAAS,CAAEuF,oBAAqB3I,KAAKb,MAAM6K,oBAvLtD,oDA2LgCvK,EAAagP,EAAMC,EAAMC,GACrD,IAAItI,EAAYhC,KAAKC,MAAMtE,KAAK4O,UAAUC,YAAcpP,GACpD6G,EAAajC,KAAKC,MAAMtE,KAAK4O,UAAUE,aAAerP,GACtDU,EAAWH,KAAK4O,UAAUC,YAAcpP,EAAe,EACvDW,EAAWJ,KAAK4O,UAAUE,aAAerP,EAAe,EACxDiJ,OACSxH,IAAXyN,GAAiE,OAAzC3O,KAAKb,MAAM8N,0BAC/BjN,KAAKb,MAAM8N,0BACX,CAAC,EAAG,GACNjF,OACS9G,IAAXyN,GAAkE,OAA1C3O,KAAKb,MAAM+N,2BAC/BlN,KAAKb,MAAM+N,2BACX,CAAC7G,EAAY,EAAG,GAClBG,OACOtF,IAATuN,EACI,IAAI5G,MAAMxB,EAAYC,GAAYwB,KAAK/L,EAASqB,OAChD,IAAIyK,MAAMxB,EAAYC,GAAYwB,KAAK/L,EAASqB,OAAO2M,KAAI,SAACkC,EAAOlF,GACjE,YAAuB7F,IAAhBuN,EAAK1H,GAAuB0H,EAAK1H,GAASkF,KAErD9B,OACOjJ,IAATwN,EACI,IAAI7G,MAAMxB,EAAYC,GAAYwB,KAAK/L,EAASY,aAChD,IAAIkL,MAAMxB,EAAYC,GAAYwB,KAAK/L,EAASY,aAAaoN,KAAI,SAACkC,EAAOlF,GACvE,YAAuB7F,IAAhBwN,EAAK3H,GAAuB2H,EAAK3H,GAASkF,KAGzDjM,KAAKoD,SAAS,CACZoD,YAAaA,EACb2D,WAAYA,EACZ9D,YACAC,aACAnG,UACAC,UACAkL,sBAAuB5C,EACvB6C,uBAAwBvD,EACxBO,sBAAuBG,EACvBT,uBAAwBD,EACxBW,oBAAqB3I,KAAKb,MAAM6K,gBAChCwB,qBAAsBxL,KAAKb,MAAMsM,iBACjCR,MAAO,KAETjL,KAAKb,MAAM4P,eApOf,6CAuOyBvM,GAErB,IAAIS,EAASC,EAAclD,KAAKH,MAAOG,KAAKb,MAAOqD,GACnD,GAAkB,IAAdS,EAAO,IAA0B,IAAdA,EAAO,GAC5B,GAAIT,IAASf,EAAkB,CAC7B,IAAIuN,EAAc,CAChBhP,KAAKH,MAAM0I,sBAAsB,GAAKtF,EAAO,GAC7CjD,KAAKH,MAAM0I,sBAAsB,GAAKtF,EAAO,IAE/CjD,KAAKoD,SAAS,CAAEmF,sBAAuByG,QAClC,CACL,IAAIA,EAAc,CAChBhP,KAAKH,MAAMoI,uBAAuB,GAAKhF,EAAO,GAC9CjD,KAAKH,MAAMoI,uBAAuB,GAAKhF,EAAO,IAEhDjD,KAAKoD,SAAS,CAAE6E,uBAAwB+G,IAI5C,OAAO/L,IA1PX,iCA6PI,GAAIjD,KAAKH,MAAMoL,MAAMjE,OAAS,EAAG,CAC/B,IAAIiI,EAAYjP,KAAKH,MAAMoL,MAAMmB,QAC7B8C,EAAaD,EAAUnG,MACvB/B,EAAQmI,EAAWhP,EAAIF,KAAKH,MAAMwG,UAAY6I,EAAWjP,EAC7D,GAAIiP,EAAW1M,OAASf,EAAmB,CACzC,IAAI0N,EAAkBnP,KAAKH,MAAM2G,YAAY4F,QAC7C+C,EAAgBpI,GAASmI,EAAWnP,QACpCC,KAAKoD,SAAS,CAAEoD,YAAa2I,EAAiBlE,MAAOgE,SAChD,GAAIC,EAAW1M,OAASf,EAAmB,CAChD,IAAI2N,EAAiBpP,KAAKH,MAAMsK,WAAWiC,QAC3CgD,EAAerI,GAASmI,EAAWnP,QACnCC,KAAKoD,SAAS,CAAE+G,WAAYiF,EAAgBnE,MAAOgE,QAxQ3D,0CA4QuB,IAAD,OACdI,EACFrP,KAAKb,MAAMM,aAAe6F,EAAwBJ,SAClDlF,KAAKb,MAAMM,aAAe2F,EAAwBF,QAChDoK,EACFtP,KAAKb,MAAMoQ,UAAUxC,WAAa7H,OAAOC,OAAOvE,QAChDZ,KAAKb,MAAMoQ,UAAUvC,UAAY9H,OAAOC,OAAOtE,MAC7CwO,GAAoBC,EAClBtP,KAAKb,MAAM0N,mBAAmB7F,OAAS,GAAKhH,KAAKb,MAAM2N,kBAAkB9F,OAAS,EACpFhH,KAAKwO,8BACHxO,KAAKb,MAAMM,YACXO,KAAKb,MAAM0N,mBACX7M,KAAKb,MAAM2N,mBACX,GAGF9M,KAAKwO,8BAA8BxO,KAAKb,MAAMM,cAG3C6P,QAAyDpO,IAA5ClB,KAAKb,MAAMoQ,UAAU1C,oBACrC7M,KAAKoD,SAAS,CACZ+H,WAAW,EACXD,aACE,2JAGNlL,KAAKwO,8BAA8BxO,KAAKb,MAAMM,cAEhDO,KAAKb,MAAMyE,MAAM5D,MACjBkF,OAAOsK,iBAAiB,UAAU,SAAAnD,GAAC,OACjC,EAAKmC,8BAA8B,EAAKrP,MAAMM,kBA1SpD,4CA6SwB0J,EAAelG,GAAQ,MAqBwCjD,KAAKH,MAAhFsK,EArBmC,EAqBnCA,WAAY5B,EArBuB,EAqBvBA,sBAAuBN,EArBA,EAqBAA,uBAAwBzB,EArBxB,EAqBwBA,YAC/D0F,EAAc/C,EAAcgD,OAAO,GAAG1J,cAAgB0G,EAAciD,MAAM,GAC1EqD,EAAoBzP,KAAKH,MAAM,UAAYqM,EAAc,YACzDwD,EAAyB1P,KAAKH,MAAM,UAAYqM,EAAc,UAC9DnF,EAAQ0I,EAAkB,GAAKzP,KAAKH,MAAMwG,UAAYoJ,EAAkB,GAI5E,GAHIjJ,EAAYO,KAAWhL,EAASC,MAClCgE,KAAK+L,0BAA0B5C,EAAeuG,EAAyB,GAErEvF,EAAWpD,KAAWhL,EAASW,YAAa,CAC9C,IAAI0R,EAAgBjE,EAAWiC,QAC/BgC,EAAcrH,GAAShL,EAASY,YAChCqD,KAAKoD,SAAS,CACZ+G,WAAYiE,IAEdpO,KAAK+L,0BAA0B5C,EAAenJ,KAAKb,MAAM6K,iBAEvDhK,KAAKH,MAAMwL,2BACbrL,KAAKb,MAAMwQ,eACX3P,KAAKb,MAAMyQ,kBAGXrH,EAAsB,KAAON,EAAuB,IACpDM,EAAsB,KAAON,EAAuB,IACnDjI,KAAKb,MAAMuO,eAEoB,IAA5B1N,KAAKb,MAAMmK,cACbtJ,KAAKb,MAAMwQ,eACX3P,KAAKb,MAAMyQ,kBACFzG,IAAkB1H,IAE3BzB,KAAKb,MAAMwQ,eACX3P,KAAKb,MAAMyQ,qBAjWnB,0CAqWsBC,GAClB7P,KAAKwO,8BACHqB,EAAUpQ,YACVoQ,EAAUhD,mBACVgD,EAAU/C,mBACV,KA1WN,qCA6WiB/M,GACbC,KAAKb,MAAM2Q,YAAW,GACtB9P,KAAKb,MAAMoN,uBAAuBxM,KA/WtC,uCAkXIC,KAAKyM,OAAOmD,iBACZ5P,KAAK0M,QAAQkD,iBACb5P,KAAKoD,SAAS,CACZmF,sBAAuBvI,KAAKH,MAAMyL,sBAClCrD,uBAAwBjI,KAAKH,MAAM0L,uBACnC5C,oBAAqB3I,KAAKb,MAAM6K,gBAChCwB,qBAAsBxL,KAAKb,MAAMsM,iBACjCJ,0BAA0B,MAzXhC,+BA4XY,IAAD,SAgBHrL,KAAKH,MAdPwG,EAFK,EAELA,UACAC,EAHK,EAGLA,WACAnG,EAJK,EAILA,QACAC,EALK,EAKLA,QACAoG,EANK,EAMLA,YACA2D,EAPK,EAOLA,WACAuB,EARK,EAQLA,WACAC,EATK,EASLA,WACAL,EAVK,EAULA,sBACAC,EAXK,EAWLA,uBACAJ,EAZK,EAYLA,UACAD,EAbK,EAaLA,aACAvC,EAdK,EAcLA,oBACAyC,EAfK,EAeLA,eAfK,EA4BHpL,KAAKb,MAVPM,EAlBK,EAkBLA,YACA6D,EAnBK,EAmBLA,WACAC,EApBK,EAoBLA,OACAmK,EArBK,EAqBLA,aACAD,EAtBK,EAsBLA,QACAD,EAvBK,EAuBLA,oBACAZ,EAxBK,EAwBLA,YACAkD,EAzBK,EAyBLA,WACA9F,EA1BK,EA0BLA,gBACAV,EA3BK,EA2BLA,aAEEyG,EAAmBvC,IAAwBzR,EAASW,YACxD,OACE,kBAAC2N,GAAD,CAAWjJ,aAAcpB,KAAKM,UAAW0P,IAAK,SAAAC,GAAE,OAAK,EAAKrB,UAAYqB,IACpE,kBAAC,IAAD,CACEC,UAAU,EACVC,OAAQ,CACN,kBAAC,IAAD,CAAQ3N,KAAK,UAAU4N,QAAS,kBAAM,EAAKhN,SAAS,CAAE+H,WAAW,MAAjE,OAIFkF,MAAO,QACPC,QAASnF,GAERD,GAEH,kBAACV,GAAD,CACE1J,SAAwBI,IAAnBlB,KAAK4O,UAA0B5O,KAAK4O,UAAUE,aAAe,EAAI,EACtErE,SAAUW,GAEV,kBAACV,GAAD,CACED,SAAUW,EAAiB,OAAS,QACpCgF,QAAS,kBAAM,EAAKhN,SAAS,CAAEgI,gBAAiBA,KAChDmF,KAAK,QACLC,MAAM,SACN7S,KAAK,gBAEP,kBAACmN,GAAD,CACEsF,QAAS,kBAAM,EAAKK,eAAe,KACnC/S,IAAKL,EAAatB,EAASqB,OAAOM,MAEpC,kBAACiN,GAAD,cACA,kBAACG,GAAD,CACEsF,QAAS,kBAAM,EAAKK,eAAe1U,EAASC,OAC5C0B,IAAKL,EAAatB,EAASC,MAAM2B,OAEnC,kBAACgN,GAAD,aACA,kBAACG,GAAD,CACEsF,QAAS,kBAAM,EAAKK,eAAe1U,EAASU,OAC5CiB,IAAKL,EAAatB,EAASU,MAAMiB,MAEnC,kBAACiN,GAAD,aACA,kBAACG,GAAD,CACEsF,QAAS,kBAAM,EAAKK,eAAe1U,EAASW,cAC5CgB,IAAKL,EAAatB,EAASU,MAAMiB,MAEnC,kBAACiN,GAAD,eACA,kBAACL,GAAD,CACE8F,QAAS,WACPN,GAAW,GACX,EAAK1M,SAAS,CAAEgI,gBAAgB,KAElCmF,KAAK,SALP,SAUD/J,EAAYuD,KAAI,SAAChK,EAASgH,GACzB,IAAM9G,EAAI8G,EAAQV,EACZnG,EAAImE,KAAKC,MAAMyC,EAAQV,GACvBtF,EAAa,IAANd,EACPyQ,EAAQzQ,IAAMoG,EAAY,EAC1BvF,EAAY,IAANZ,EACNyQ,EAASzQ,IAAMoG,EAAa,EAC9BqH,EAAOnI,EAAOvF,EAAGC,EAAGmG,EAAWC,GAC/BsK,EAAe,QACf9P,IAAK8P,GAAgB,QACrBD,IAAQC,GAAgB,WACxB7P,IAAM6P,GAAgB,SACtBF,IAAOE,GAAgB,UAC3B,IAAIC,EAAwB9U,EAAS6U,GACjCE,EAAgBrD,GAAW/B,IAAezL,GAAK0L,IAAezL,EAClE,OACE,kBAAC,EAAD,CACED,EAAGA,EACHC,EAAGA,EACH6Q,IAAKhK,EACLtH,YAAaA,EACbU,QAASA,EACTM,OAAQ,EACRL,QAASA,EACTL,QACE+Q,IAAkBf,EACdvC,EACAG,EACAkD,EACA9Q,OAKXoK,EAAWJ,KAAI,SAACiH,EAAgBjK,GAC/B,IAAM9G,EAAI8G,EAAQV,EACZnG,EAAImE,KAAKC,MAAMyC,EAAQV,GACzByK,EAAgBrD,GAAW/B,IAAezL,GAAK0L,IAAezL,EAClE,OACE,kBAAC,EAAD,CACED,EAAGA,EACHC,EAAGA,EACH6Q,IAAKhK,EACLxG,yBAA0B,SAAA8L,GAAC,OAAI,EAAK9L,yBAAyB8L,EAAGpM,EAAGC,IACnEM,yBAA0B,SAAA6L,GAAC,OAAI,EAAK7L,yBAAyB6L,IAC7D5M,YAAaA,EACbY,YAAa,SAAAgM,GAAC,OAAI,EAAKhM,YAAYgM,EAAGpM,EAAGC,IACzCO,OAAQ,EACRH,UAAW,EAAKA,UAChBH,QAASA,EACTC,QAASA,EACTL,QAAS+Q,GAAiBf,EAAmBvC,EAAsBwD,OAIzE,kBAAC,EAAD,CACE7Q,QAASA,EACTC,QAASA,EACTwD,MAAO,SAAAoM,GAAG,OAAK,EAAKtD,QAAUsD,GAC9BjL,iBAAkB/E,KAAK+E,iBACvBtB,yBAA0B8H,EAC1B9L,YAAaA,EACbkD,cAAe2G,EACfxE,sBAAuB9E,KAAK8E,sBAC5BxB,WAAYA,EACZC,OAAQA,EACRL,cAAelD,KAAK8L,uBACpBnI,gBAAiB+J,EACjBlL,KAAMf,EACNhB,OAAQ,IAEV,kBAAC,EAAD,CACEN,QAASA,EACTC,QAASA,EACTwD,MAAO,SAAAoM,GAAG,OAAK,EAAKvD,OAASuD,GAC7BjL,iBAAkB/E,KAAK+E,iBACvBtB,yBAA0B6H,EAC1B7L,YAAaA,EACbkD,cAAeiK,EACftJ,WAAYA,EACZC,OAAQA,EACRL,cAAelD,KAAK8L,uBACpBhH,sBAAuB9E,KAAK8E,sBAC5BtB,cAAemF,EACfjF,UAAWsG,EACXrG,gBAAgB,EAChBqB,WAAW,EACXxC,KAAMf,EACNhB,OAAQ,SAziBlB,GAA0Be,a,iDCvDbyP,GACG,SADHA,GAEE,QAFFA,GAGO,QAHPA,GAII,QAJJA,GAKG,QALHA,GAMQ,Q,o8GCGrB,IAAM5G,GAAYpL,IAAOC,IAAV,KAGOwC,EAAOK,eAKLkP,GAGDA,IAIjBC,GAAgBjS,IAAO8L,IAAV,MAIboG,GAA0BlS,IAAOC,IAAV,MASvBkS,GAAgBnS,IAAOC,IAAV,KAMK+R,GAGAA,GAGAA,IAIlBI,GAAapS,YAAO2L,IAAWC,KAAlB5L,CAAH,MAGVqS,GAAkBrS,YAAOsL,IAAPtL,CAAH,MAGfsS,GAAetS,YAAOsL,IAAPtL,CAAH,KACMgS,GAGAA,GAGAA,IAMlBO,GAAOvS,IAAOC,IAAV,MAUJuS,GAASxS,IAAOC,IAAV,MASNwS,GAAQzS,IAAOC,IAAV,MAWLyS,GAAQ1S,YAAO2L,IAAWC,KAAlB5L,CAAH,MAOL2S,GAAe3S,YAAO4S,KAAP5S,CAAH,MAMZ6S,GAAkB7S,IAAOC,IAAV,KAGE+R,IAMjBc,GAAc9S,YAAO2L,IAAWoH,MAAlB/S,CAAH,MAGXgT,GAAqBhT,IAAOC,IAAV,KAED+R,IAMjBiB,GAAajT,YAAOsL,IAAPtL,CAAH,MACJ,SAAAE,GAAK,OAAIA,EAAMgT,UACZ,SAAAhT,GAAK,OAAIA,EAAMiT,SAAW,kBACjBnB,IAalBjH,GAAkB,SAAC7K,EAAOkT,GAC9B,IAAMC,EAAY,CAChB,kBAACX,GAAD,CAAOZ,IAAI,wBAAwBsB,EAAc,oBAAsB,cACvE,kBAACT,GAAD,CACEb,IAAI,wBACJwB,SAAU,SAAAtG,GAAK,OAAI9M,EAAMqT,sBAAsB/Q,EAAkBwK,IACjEA,MAAO9M,EAAM6K,gBACbyI,SAAUtT,EAAMmE,WAChB+B,IAAK,EACLE,IAAK,GACLmN,KAAM,EACNC,iBAAkB,SAGtB,OAAON,EACLC,EAEA,kBAAC,KAAD,CAASM,UAAU,UAAUvC,MAAM,kCACjC,kBAACyB,GAAD,KAAkBQ,EAAUvI,KAAI,SAAA8I,GAAI,OAAIA,QAIxCjG,GAAc,SAACzN,EAAOkT,GAC1B,IAAMC,EAAY,CAChB,kBAACX,GAAD,CAAOZ,IAAI,oBAAoBsB,EAAc,eAAiB,SAC9D,kBAACT,GAAD,CACEb,IAAI,oBACJwB,SAAU,SAAAO,GAAK,OAAI3T,EAAM4T,kBAAkBtR,EAAkBqR,IAC7D7G,MAAO9M,EAAMyN,YACbvH,IAAK,EACLE,IAAK,EACLmN,KAAM,EACNC,iBAAkB,SAItB,OAAON,EACLC,EAEA,kBAAC,KAAD,CAASM,UAAU,UAAUvC,MAAM,qCACjC,kBAACyB,GAAD,KAAkBQ,EAAUvI,KAAI,SAAA8I,GAAI,OAAIA,QAIxCvJ,GAAe,SAACnK,EAAOkT,GAC3B,IAAMC,EAAY,CAChB,kBAACX,GAAD,CAAOZ,IAAI,qBAAqBsB,EAAc,gBAAkB,SAChE,kBAACT,GAAD,CACEb,IAAI,qBACJwB,SAAU,SAAAO,GAAK,OAAI3T,EAAM4T,kBAAkBtR,EAAmBqR,IAC9D7G,MAAO9M,EAAMmK,aACbjE,IAAK,EACLE,IAAK,EACLkN,UAAU,EACVC,KAAM,EACNC,iBAAkB,SAItB,OAAON,EACLC,EAEA,kBAAC,KAAD,CAASM,UAAU,UAAUvC,MAAM,2BACjC,kBAACyB,GAAD,KAAkBQ,EAAUvI,KAAI,SAAA8I,GAAI,OAAIA,QAsCzBG,G,YACnB,WAAY7T,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXoT,eAAgB3N,EAAwBJ,QACxCgO,eAAgB9N,EAAwBF,QACxCiO,cAAc,EACdhI,WAAW,GANI,E,iFASE,IAAD,OAClBjG,OAAOsK,iBAAiB,UAAU,SAAAnD,GAChC,EAAKjJ,SAAS,CACZ6P,eAAgB3N,EAAwBJ,QACxCgO,eAAgB9N,EAAwBF,e,4CAK5C,IAAI+K,EAAKnM,SAASC,eAAe,kBACjCkM,EAAGmD,SACHnD,EAAGoD,kBAAkB,EAAG,OACxBvP,SAASwP,YAAY,U,+BAEb,IAAD,OACDC,EAAmBrO,OAAOC,OAAOtE,OAAS2S,SAASvC,GAA8B,IACjFwC,EAAoBvO,OAAOC,OAAOvE,QAAU4S,SAASvC,GAA0B,IAC/E9R,EAAQa,KAAKb,MAHZ,EAI6Da,KAAKH,MAAjEoT,EAJD,EAICA,eAAgBC,EAJjB,EAIiBA,eAAgB/H,EAJjC,EAIiCA,UAAWgI,EAJ5C,EAI4CA,aACnD,OACE,kBAAC,GAAD,KACE,kBAAC,IAAD,CACEO,SAAU,kBAAM,EAAKtQ,SAAS,CAAE+P,cAAc,KAC9CjD,UAAU,EACVC,OAAQ,KACRG,QAAS6C,EACT9C,MAAO,MAEP,kBAAC,IAAW2B,MAAZ,CAAkBtR,MAAO,CAAEiT,UAAW,UAAYC,MAAO,GAAzD,iBAGA,kBAACzC,GAAD,KACE,kBAAC,IAAD,CACEzQ,MAAO,CAAED,OAAQ,GACjBoT,OAAO,EACPrR,KAAK,OACLgO,MAAM,SACNJ,QAAS,kBAAM,EAAK0D,SAASC,QAC7BpW,KAAK,SAEP,kBAAC,IAAD,CACE+C,MAAO,CAAED,OAAQ,GACjBoT,OAAO,EACPzD,QAAS,kBAAM,EAAK0D,SAASE,QAC7BxR,KAAK,OACLgO,MAAM,SACN7S,KAAK,WAIT,kBAAC,KAAD,CAAUqS,IAAK,SAAA/I,GAAI,OAAK,EAAK6M,SAAW7M,IACtC,kBAACiK,GAAD,CACExQ,MAAO,CAAEG,MAAO,OAAQD,OAAQ,SAChClD,IAAI,mBAEN,kBAACwT,GAAD,CACExQ,MAAO,CAAEG,MAAO,OAAQD,OAAQ,SAChClD,IAAI,mBAGN,kBAACwT,GAAD,CACExQ,MAAO,CAAEG,MAAO,OAAQD,OAAQ,SAChClD,IAAI,mBAEN,6BACE,kBAACwT,GAAD,CACExQ,MAAO,CAAEG,MAAO,OAAQD,OAAQ,SAChClD,IAAI,mBAEN,kBAAC,IAAWmN,KAAZ,uTAQJ,+BAGF,kBAAC,IAAD,CACEqF,UAAU,EACVC,OAAQ,CACN,kBAAC,IAAD,CAAQY,IAAK,EAAGvO,KAAK,UAAU4N,QAAS,kBAAM,EAAKhN,SAAS,CAAE+H,WAAW,MAAzE,OAIFmF,QAASnF,EACTkF,MAAO,mBAEP,kBAAC,IAAWxF,KAAZ,mDACA,6BACE,kBAAC,KAAD,CACEpG,GAAI,iBACJ/D,MAAO,CAAEyR,OAAQ,mBAAoBtR,MAAO,OAC5CoT,aAAc/O,OAAOgP,SAASC,OAEhC,kBAAC,IAAD,CAAQ/D,QAAS,kBAAM,EAAKgE,uBAAuB5R,KAAK,aAAxD,SAIF,kBAAC,IAAWqI,KAAZ,CAAiBrI,KAAM,aAAvB,gHAKD+Q,EAAmB,KAClB,kBAAC/B,GAAD,KACE,kBAACS,GAAD,KACE,kBAACb,GAAD,KACE,kBAACW,GAAD,CAAa6B,MAAO,GAApB,mBAED5J,GAAgB7K,GAAO,GACvByN,GAAYzN,GAAO,KAK1B,kBAACsS,GAAD,KACE,kBAACL,GAAD,KACE,kBAAC,KAAD,CAASwB,UAAU,MAAMvC,MAAM,yDAC7B,kBAACkB,GAAD,CAAcnB,QAAS,kBAAMjR,EAAMkV,sBAAsB3T,MAAO,CAAEyR,OAAQ,MAA1E,mBAKJ,kBAACf,GAAD,KACE,kBAAC,KAAD,CAASwB,UAAU,OAAOvC,MAAM,iCAC9B,kBAACkB,GAAD,CAAcnB,QAAS,kBAAMjR,EAAMmV,eAAe5T,MAAO,CAAEyR,OAAQ,eAAnE,cA5KQ,SAAAhT,GACpB,OAAOA,EAAMmE,WACX,6BACE,kBAAC4O,GAAD,CACEO,UAAWtT,EAAMoV,MACjB/R,KAAM,OACN4P,SAAU,GACVhC,QAAS,kBAAOjR,EAAMoE,OAASpE,EAAMqV,gBAAkBrV,EAAMsV,gBAC7DZ,OAAO,EACP1B,OAAQ,eACRxU,KAAMwB,EAAMoE,OAAS,cAAgB,iBAEvC,kBAAC2O,GAAD,CACEO,UAAWtT,EAAMoV,MACjB/R,KAAM,OACN4P,SAAU,GACVhC,QAAS,kBAAMjR,EAAMyQ,kBACrBuC,OAAQ,eACR0B,OAAO,EACPlW,KAAM,UAIV,kBAACuU,GAAD,CACEO,UAAWtT,EAAMoV,MACjB/R,KAAM,OACNqR,OAAO,EACPzB,SAAU,GACVD,OAAQ,gBACR/B,QAAS,kBAAMjR,EAAMuV,gBACrB/W,KAAM,gBAkJCgX,CAAcxV,GACf,kBAAC,KAAD,CAASyT,UAAU,QAAQvC,MAAM,gCAC/B,kBAACkB,GAAD,CACEnB,QAAS,WACPjR,EAAMyV,eACN,EAAKxR,SAAS,CAAE+H,WAAW,KAE7BzK,MAAO,CAAEyR,OAAQ,eALnB,eAWJ,kBAACf,GAAD,KACE,kBAAC,KAAD,CAASwB,UAAU,OAAOvC,MAAM,6CAC9B,kBAACkB,GAAD,CACEnB,QAAS,kBAAMjR,EAAMoN,uBAAuBxQ,EAASM,cACrDqE,MAAO,CAAEyR,OAAQ,eAFnB,iBAOF,kBAAC,KAAD,CAASS,UAAU,QAAQvC,MAAM,8CAC/B,kBAACkB,GAAD,CACEnB,QAAS,kBAAMjR,EAAMoN,uBAAuBxQ,EAASG,eACrDwE,MAAO,CAAEyR,OAAQ,eAFnB,mBAQJ,kBAAC,KAAD,CAASS,UAAU,QAAQvC,MAAM,yBAC/B,kBAACe,GAAD,KACE,kBAACO,GAAD,kBACA,kBAACC,GAAD,CACEvM,IAAK4N,EACL1N,IAAK2N,EACLX,SAAUpT,EAAM0V,eAChBpC,SAAUtT,EAAMmE,WAChB2I,MAAO9M,EAAMM,YACbkT,iBAAkB,UAIvBY,EACG,CACE,kBAAC,KAAD,CAASxC,IAAK,EAAG6B,UAAU,UAAUvC,MAAM,iCACzC,kBAACe,GAAD,KAAgBpH,GAAgB7K,GAAO,KAEzC,kBAAC,KAAD,CAAS4R,IAAK,EAAG6B,UAAU,UAAUvC,MAAM,qCACzC,kBAACe,GAAD,KAAgBxE,GAAYzN,GAAO,KAErC,kBAAC,KAAD,CAAS4R,IAAK,EAAG6B,UAAU,UAAUvC,MAAM,2BACzC,kBAACe,GAAD,KAAgB9H,GAAanK,GAAO,MAGxC,KAEJ,kBAAC,KAAD,CAASyT,UAAU,QAAQvC,MAAM,mDAC/B,kBAACe,GAAD,KACE,kBAACO,GAAD,CAAOjR,MAAO,CAAEG,MAAO,QAAvB,mBACA,kBAAC,KAAMiU,MAAP,CACE7I,MAAO9M,EAAM4V,cACbxE,KAAMkD,GAAqBF,EAAmB,QAAU,UACxDhB,SAAU,SAAAlG,GAAC,OAAIlN,EAAM6V,iBAAiB3I,EAAE4B,OAAOhC,SAE/C,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,KACA,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,KACA,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,KACA,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,KACA,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,KACA,kBAAC,KAAM1B,OAAP,CAAc0B,MAAO,GAArB,QAIN,kBAAC,KAAD,CACE2G,UAAU,QACVvC,MAAM,oEAEN,kBAACe,GAAD,KACE,kBAACO,GAAD,CAAOjR,MAAO,CAAEG,MAAO,QAAvB,mBACA,kBAAC,KAAMiU,MAAP,CACEvE,KAAMkD,GAAqBF,EAAmB,QAAU,UACxDtH,MAAO9M,EAAM8K,eACbsI,SAAU,SAAAlG,GAAC,OAAIlN,EAAM8V,kBAAkB5I,EAAE4B,OAAOhC,SAEhD,kBAAC,KAAM1B,OAAP,CAAc0B,MAAOxK,GAArB,UACA,kBAAC,KAAM8I,OAAP,CAAc0B,MAAOxK,GAArB,YAIN,kBAAC4P,GAAD,yCACA,6BACE,kBAACC,GAAD,CACEd,MAAO,SACPqD,OAAO,EACPlW,KAAM,kBACN6E,KAAM,OACN4N,QAAS,kBAAM,EAAKhN,SAAS,CAAE+P,cAAc,OAE/C,kBAAC7B,GAAD,CACE6C,KAAM,6CACNlG,OAAQ,SACRuC,MAAO,SACPqD,OAAO,EACPlW,KAAM,SACN6E,KAAM,WAIX+Q,EAAmB,KAClB,kBAAC7B,GAAD,KACE,kBAACO,GAAD,KACE,kBAACb,GAAD,KACE,kBAACW,GAAD,CAAa6B,MAAO,GAApB,oBAEDtK,GAAanK,GAAO,U,GAlQCqC,aC5PvB0T,GAAS,CACpBC,EAAG,qYACH7X,EAAG,+wDACHM,EAAG,sXACHC,EAAG,2bACHC,EAAG,6V,kXCOL,IAAMsX,GAAgBnW,IAAOC,IAAV,MAsJJmW,GAjJf,YACE,WAAYlW,GAAQ,IAAD,sBAEjB,IAAImW,GADJ,4CAAMnW,KACYoW,eAAe,EAAKpW,MAAM+U,SAASsB,QAFpC,OAGjB,EAAK3V,MAAQ,CACXJ,YAAa6V,EAAO7V,YAAc6V,EAAO7V,YAAcwF,EAAyBC,QAChFsI,oBAAqB,KACrBC,SAAS,EACTsH,cAAerT,EAAOO,uBACtBqB,YAAY,EACZiM,UAAW+F,EACX/R,QAAQ,EACRgR,OAAO,EACP7G,cAAc,EAEdb,mBAAoByI,EAAOzI,mBAAqByI,EAAOzI,mBAAqB,GAC5EC,kBAAmBwI,EAAOxI,kBAAoBwI,EAAOxI,kBAAoB,GACzEF,YAAa0I,EAAO1I,YAAc0I,EAAO1I,YAAclL,EAAOC,qBAC9DsL,0BAA2BqI,EAAOrI,0BAC9BqI,EAAOrI,0BACP,KACJC,2BAA4BoI,EAAOpI,2BAC/BoI,EAAOpI,2BACP,KACJlD,gBAAiBsL,EAAOtL,gBACpBsL,EAAOtL,gBACPtI,EAAOG,sBACXoI,eAAgBqL,EAAOrL,eACnBqL,EAAOrL,eACPvI,EAAOQ,wBACXoH,aAAcgM,EAAOhM,aAAegM,EAAOhM,aAAe5H,EAAOE,uBAEnE,EAAK0S,YAAc,EAAKA,YAAYzR,KAAjB,gBACnB,EAAKgS,eAAiB,EAAKA,eAAehS,KAApB,gBACtB,EAAK0J,uBAAyB,EAAKA,uBAAuB1J,KAA5B,gBAC9B,EAAKiN,WAAa,EAAKA,WAAWjN,KAAhB,gBAClB,EAAK6R,aAAe,EAAKA,aAAa7R,KAAlB,gBACpB,EAAK+M,eAAiB,EAAKA,eAAe/M,KAApB,gBACtB,EAAK4R,aAAe,EAAKA,aAAa5R,KAAlB,gBACpB,EAAK2R,cAAgB,EAAKA,cAAc3R,KAAnB,gBACrB,EAAKkQ,kBAAoB,EAAKA,kBAAkBlQ,KAAvB,gBACzB,EAAKkM,WAAa,EAAKA,WAAWlM,KAAhB,gBAClB,EAAKwR,mBAAqB,EAAKA,mBAAmBxR,KAAxB,gBAC1B,EAAK2P,sBAAwB,EAAKA,sBAAsB3P,KAA3B,gBAC7B,EAAKoS,kBAAoB,EAAKA,kBAAkBpS,KAAvB,gBACzB,EAAK8M,aAAe,EAAKA,aAAa9M,KAAlB,gBACpB,EAAK+R,aAAe,EAAKA,aAAa/R,KAAlB,gBACpB,EAAK4S,wBAA0B,EAAKA,wBAAwB5S,KAA7B,gBAC/B,EAAKmS,iBAAmB,EAAKA,iBAAiBnS,KAAtB,gBACxB,EAAK0S,eAAiB,EAAKA,eAAe1S,KAApB,gBAhDL,EADrB,4EAmDiBoJ,GACb,OAAOoB,KAAYqI,MAAMzJ,EAAO,CAC9BsB,YAAa,QACboI,cAAc,EACdC,eAAe,MAvDrB,uCA0DmBhC,GAAQ,IAAD,OAClB/D,EAAY7P,KAAKuV,eAAeL,GAAOtB,IAEvC/D,EAAU9C,WAAa7H,OAAOC,OAAOvE,QAAUiP,EAAU7C,UAAY9H,OAAOC,OAAOtE,MACrFb,KAAKoD,S,2VAAL,EAAgB2R,cAAenB,GAAU/D,IAAa,WACpD,EAAKgG,KAAKC,oBAAoBjG,MAGhCkG,KAAQC,MAAM,4CAlEpB,0CAsEID,KAAQE,KAAK,yDAtEjB,8CAwE0BhK,GACtBjM,KAAKoD,SAAS,CAAEgG,qBAAsB6C,MAzE1C,qCA4EIjM,KAAKoD,SAAS,CAAEE,YAAY,MA5EhC,qCA+EItD,KAAK6V,KAAK7J,cA/Ed,4CAiFwBxJ,EAAMyJ,GAC1BjM,KAAKoD,SAAL,eAAiBZ,EAAO,YAAcyJ,MAlF1C,2CAqFQjM,KAAKH,MAAM0U,OACbvU,KAAKoD,SAAS,CAAEsK,cAAc,EAAMpK,YAAY,MAtFtD,wCAyFoBd,EAAMsQ,GACtB9S,KAAKoD,SAAL,eAAiBZ,EAAO,QAAUsQ,MA1FtC,oCA6FI9S,KAAK6V,KAAKK,aA7Fd,qCA+FiB3F,GACbvQ,KAAKoD,SAAS,CAAE3D,YAAa8Q,IAC7BvQ,KAAK4P,mBAjGT,mCAoGI5P,KAAKoD,SAAS,CAAEmR,OAAO,MApG3B,iCAsGatI,GACTjM,KAAKoD,SAAS,CAAEqK,QAASxB,MAvG7B,6CAyGyBlM,GACrB,IAAIoW,EACU,OAAZpW,GAAoBA,IAAYhE,EAASM,aAAe0D,IAAYhE,EAASG,aAC/E8D,KAAKoD,SAAS,CACZoK,oBAAqBzN,EACrB0N,QAAS0I,MA9Gf,qCAkHInW,KAAKoD,SAAS,CAAEE,YAAY,MAlHhC,uCAqHItD,KAAKoD,SAAS,CACZG,QAAQ,EACRD,YAAY,EACZkK,oBAAqB,KACrBC,SAAS,EACTC,cAAc,IAEhB1N,KAAK6V,KAAKjG,mBA5Hd,qCA+HI5P,KAAKoD,SAAS,CAAEG,QAAQ,MA/H5B,sCAkIIvD,KAAKoD,SAAS,CAAEG,QAAQ,MAlI5B,wCAoIoB0I,GAChBjM,KAAKoD,SAAS,CAAE6G,eAAgBgC,MArIpC,+BAuIY,IAAD,OACP,OACE,kBAACmJ,GAAD,KACE,kBAAC,GAAD,eAAMxR,MAAO,SAAAoM,GAAG,OAAK,EAAK6F,KAAO7F,IAAUhQ,KAAKH,MAAWG,OAC3D,kBAAC,GAAD,iBAAYA,KAAUA,KAAKH,aA3InC,GAAyB2B,aCLL4U,QACW,cAA7BlR,OAAOgP,SAASmC,UAEe,UAA7BnR,OAAOgP,SAASmC,UAEhBnR,OAAOgP,SAASmC,SAASC,MAAM,2DCVnCC,IAASC,OAAO,mBCJD,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,IAAKnE,UAAW+C,QDCnB,MAAcvR,SAASC,eAAe,SDsHhD,kBAAmB2S,WACrBA,UAAUC,cAAcpC,MAAMqC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d38906b6.chunk.js","sourcesContent":["export const TEXTURES = {\n  FIRE: 2,\n  CHICKEN_RUNNING: 3,\n  CHICKEN_IDLE: 4,\n  CHICKEN_UP: 5,\n  CHICKEN_DOWN: 6,\n  PLAYER_IDLE: 7,\n  PLAYER_UP: 8,\n  PLAYER_DOWN: 9,\n  PLAYER_RUNNING: 10,\n  WALL: 11,\n  HEALTH_PACK: 12,\n  TRANSPARENT: 13,\n  FLOOR_BOTTOM: 14,\n  FLOOR_TOP: 15,\n  FLOOR_RIGHT: 16,\n  FLOOR_LEFT: 17,\n  FLOOR_TOP_LEFT: 18,\n  FLOOR_TOP_RIGHT: 19,\n  FLOOR_BOTTOM_RIGHT: 20,\n  FLOOR_BOTTOM_LEFT: 21,\n  FLOOR: 22\n}\nexport const TEXTURE_DATA = {\n  2: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"campFire.png\",\n    icon: \"campFireIcon.png\"\n  },\n  3: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenRight.png\"\n  },\n  4: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"ChickenIdle.png\"\n  },\n  5: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenUp.png\"\n  },\n  6: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 3,\n    src: \"ChickenDown.png\"\n  },\n  7: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"PlayerIdle.png\"\n  },\n  8: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerUp.png\"\n  },\n  9: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerDown.png\"\n  },\n  10: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"PlayerRight.png\"\n  },\n  11: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Rock.png\"\n  },\n  12: {\n    animationSpeed: \"0.3s\",\n    animated: true,\n    numberOfSprites: 4,\n    src: \"Character_Right.png\"\n  },\n  13: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Transparent.png\"\n  },\n  14: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottom.png\"\n  },\n  15: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTop.png\"\n  },\n  16: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorRight.png\"\n  },\n  17: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorLeft.png\"\n  },\n  18: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTopLeft.png\"\n  },\n  19: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorTopRight.png\"\n  },\n  20: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottomRight.png\"\n  },\n  21: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"FloorBottomLeft.png\"\n  },\n  22: {\n    animationSpeed: null,\n    animated: false,\n    numberOfSprites: 1,\n    src: \"Floor.png\"\n  }\n}\n","import React, { Component } from \"react\"\nimport { TEXTURE_DATA } from \"../Constants/Textures\"\nimport styled, { keyframes } from \"styled-components\"\n\nconst getAnimation = numberOfSprites => {\n  const translationTo = ((numberOfSprites - 1) / numberOfSprites) * 100\n  const transform = keyframes`\n  from { \n    transform: translateX(0); \n  }\n  to { \n    transform: translateX(-${translationTo}%); \n  }\n}\n`\n  return transform\n}\nconst Sprite = styled.div`\n  width: ${props => props.textureData.numberOfSprites * 100}%;\n  height: 100%;\n  background-image: url(${props => props.textureData.src});\n  background-size: 100%, 100%;\n  background-repeat: ${props => (props.textureData.animated ? \"no-repeat\" : \"unset\")};\n  animation: ${props => getAnimation(props.textureData.numberOfSprites)}\n    ${props => props.textureData.animationSpeed}\n    steps(${props => props.textureData.numberOfSprites - 1})\n    ${props => (props.textureData.animated ? \"infinite\" : 0)};\n  position: absolute;\n  user-select: none;\n\n  left: 0;\n  top: 0;\n`\nconst ProgressBarUnder = styled.div`\n  width: 80%;\n  position: relative;\n  background-color: #661918;\n  margin: auto;\n  border-radius: 10px;\n  height: ${props => props.textureSize * 0.1}px;\n  overflow: hidden;\n`\nconst ProgressBarOver = styled.div`\n  width: 100%;\n  position: relative;\n  background-color: #e03836;\n  margin: auto;\n  border-radius: 10px;\n  transition: right 0.5s;\n  right: ${props => 100 - props.healthBarPercentage}%;\n  height: ${props => props.textureSize * 0.1}px;\n`\nexport class Texture extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  shouldComponentUpdate(nextProps) {\n    return (\n      nextProps.texture !== this.props.texture ||\n      nextProps.textureSize !== this.props.textureSize ||\n      nextProps.x !== this.props.x ||\n      nextProps.y !== this.props.y ||\n      nextProps.xOffset !== this.props.xOffset ||\n      nextProps.yOffset !== this.props.yOffset ||\n      nextProps.healthBarPercentage !== this.props.healthBarPercentage\n    )\n  }\n\n  render() {\n    const {\n      yOffset,\n      xOffset,\n      y,\n      x,\n      onMouseDown,\n      onMouseUp,\n      onMouseHoverTextureEnter,\n      onMouseHoverTextureLeave,\n      texture,\n      zIndex,\n      textureSize,\n      healthBarPercentage\n    } = this.props\n    const textureData = TEXTURE_DATA[texture]\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          height: textureSize + \"px\",\n          width: textureSize + \"px\",\n          top: yOffset ? y * textureSize + yOffset : y * textureSize,\n          left: xOffset ? x * textureSize + xOffset : x * textureSize,\n          zIndex: zIndex,\n          overflow: \"hidden\",\n          userSelect: \"none\"\n        }}\n      >\n        {healthBarPercentage !== undefined ? (\n          <ProgressBarUnder textureSize={textureSize}>\n            <ProgressBarOver\n              healthBarPercentage={healthBarPercentage}\n              textureSize={textureSize}\n            ></ProgressBarOver>\n          </ProgressBarUnder>\n        ) : null}\n        <Sprite\n          textureData={textureData}\n          onMouseDown={onMouseDown}\n          onMouseUp={onMouseUp}\n          onMouseEnter={onMouseHoverTextureEnter}\n          onMouseLeave={onMouseHoverTextureLeave}\n          onTouchMove={onMouseHoverTextureEnter}\n          onTouchEnd={onMouseUp}\n          onTouchStart={onMouseDown}\n        ></Sprite>\n      </div>\n    )\n  }\n}\n\nexport default Texture\n","export const CONSTANTS = {\n  PLAYER: \"player\",\n  CHICKEN: \"chicken\",\n  OVERLAY: \"overLay\",\n  TEXTURE: \"texture\",\n  HEALTH: \"health\",\n  SPEED: \"speed\"\n}\n","import { CONSTANTS } from \"./Constants\"\n\nexport const CONFIG = {\n  DEFAULT_PLAYER_SPEED: 1,\n  DEFAULT_CHICKEN_SPEED: 0,\n  DEFAULT_PLAYER_HEALTH: 5,\n  DEFAULT_CHICKEN_HEALTH: 100,\n  MAIN_APP_COLOR: \"#274029\",\n  SECONDARY_APP_COLOR: \"#012622\",\n  DEFAULT_SELECTED_LEVEL: 1,\n  DEFAULT_SEARCH_PRIORITY: CONSTANTS.HEALTH,\n  EDITING_BORDER: \"5px solid purple\"\n}\n","import React, { Component } from \"react\"\nimport Texture from \"./Texture\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport styled from \"styled-components\"\nimport shallowCompare from \"react-addons-shallow-compare\"\nimport { CONSTANTS } from \"../Constants/Constants\"\n\nconst CharacterSprite = styled.div`\n  position: absolute;\n`\nexport class Character extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      walking: false,\n      currentTexture: TEXTURES[props.type.toUpperCase() + \"_IDLE\"],\n      currentMovementSpeed: this.props.movementSpeed\n    }\n    this.takeAction = this.takeAction.bind(this)\n    this.setCorrectTexture = this.setCorrectTexture.bind(this)\n    this.setCorrectDirection = this.setCorrectDirection.bind(this)\n    this.doNextAction = this.doNextAction.bind(this)\n  }\n\n  doNextAction() {\n    let action = this.props.getNextAction(this.props.type)\n    let typeUpperCase = this.props.type.toUpperCase()\n    if (action[0] !== 0 || action[1] !== 0) {\n      this.setState({ walking: true })\n      this.takeAction(action)\n    } else if (this.state.currentTexture !== TEXTURES[typeUpperCase + \"_IDLE\"]) {\n      this.setState({ currentTexture: TEXTURES[typeUpperCase + \"_IDLE\"] })\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    const {\n      xOffset,\n      yOffset,\n      textureSize,\n      movementSpeed,\n      inProgress,\n      paused,\n      currentHealth,\n      initialCharacterLocation,\n      maxHealth,\n      renderOnScreen\n    } = this.props\n    return (\n      nextProps.xOffset !== xOffset ||\n      nextProps.yOffset !== yOffset ||\n      nextProps.textureSize !== textureSize ||\n      nextProps.movementSpeed !== movementSpeed ||\n      nextProps.inProgress !== inProgress ||\n      nextProps.paused !== paused ||\n      nextProps.currentHealth !== currentHealth ||\n      nextProps.maxHealth !== maxHealth ||\n      nextProps.renderOnScreen !== renderOnScreen ||\n      nextProps.initialCharacterLocation !== initialCharacterLocation ||\n      true ||\n      nextState !== this.state\n    )\n  }\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n  onClickRestart() {\n    let character = document.getElementById(this.props.type)\n    character.style.left = 0\n    character.style.top = 0\n    this.setState({ currentTexture: TEXTURES[this.props.type.toUpperCase() + \"_IDLE\"] })\n  }\n  componentDidUpdate() {\n    if (\n      !this.state.walking &&\n      this.props.inProgress &&\n      !this.props.paused &&\n      this.props.renderOnScreen\n    ) {\n      // console.log(\"will do next action for\", this.props.type)\n      this.doNextAction()\n    }\n  }\n  setCorrectTexture(direction) {\n    let typeUpperCase = this.props.type.toUpperCase()\n    let texture =\n      direction[1] === -1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_UP\"]\n        : direction[1] === 1 && direction[0] === 0\n        ? TEXTURES[typeUpperCase + \"_DOWN\"]\n        : TEXTURES[typeUpperCase + \"_RUNNING\"]\n    if (this.state.currentTexture !== texture) this.setState({ currentTexture: texture })\n  }\n  setCorrectDirection(entity, direction) {\n    if (entity !== null) {\n      if (direction[0] === -1) {\n        entity.style.transform = \"scaleX(-1)\"\n      } else {\n        entity.style.transform = \"scaleX(1)\"\n      }\n    }\n  }\n  takeAction(direction) {\n    this.setCorrectTexture(direction)\n    let character = document.getElementById(this.props.type)\n    this.setCorrectDirection(character.firstChild, direction)\n    let stepsCount = Math.floor(this.props.textureSize / this.props.movementSpeed)\n    let remainder = this.props.textureSize % this.props.movementSpeed\n\n    let counter = 0\n    if (this.state.currentMovementSpeed !== this.props.movementSpeed)\n      this.setState({ currentMovementSpeed: this.props.movementSpeed })\n    var id = setInterval(frame.bind(this), 0)\n    function frame() {\n      if (counter === stepsCount || !this.props.inProgress) {\n        clearInterval(id)\n        character.style.left = character.offsetLeft + direction[0] * remainder + \"px\"\n        character.style.top = character.offsetTop + direction[1] * remainder + \"px\"\n        this.props.onCharacterFinishMove(this.props.type, direction)\n        this.setState({ walking: false })\n      } else {\n        counter++\n        character.style.left =\n          character.offsetLeft + direction[0] * this.state.currentMovementSpeed + \"px\"\n        character.style.top =\n          character.offsetTop + direction[1] * this.state.currentMovementSpeed + \"px\"\n      }\n    }\n  }\n  render() {\n    const {\n      initialCharacterLocation,\n      type,\n      textureSize,\n      xOffset,\n      yOffset,\n      onPlaceCharacter,\n      renderOnScreen,\n      healthBar,\n      currentHealth,\n      zIndex,\n      maxHealth\n    } = this.props\n    let healthBarPercentage = healthBar ? (currentHealth / maxHealth) * 100 : undefined\n    return (\n      <CharacterSprite id={type}>\n        {initialCharacterLocation !== null && renderOnScreen ? (\n          <Texture\n            x={initialCharacterLocation[0]}\n            y={initialCharacterLocation[1]}\n            healthBarPercentage={healthBarPercentage}\n            textureSize={textureSize}\n            xOffset={xOffset}\n            yOffset={yOffset}\n            type={type}\n            zIndex={zIndex}\n            onMouseDown={() => onPlaceCharacter(type)}\n            texture={this.state.currentTexture}\n          ></Texture>\n        ) : null}\n      </CharacterSprite>\n    )\n  }\n}\n\nexport default Character\n","const calculateBestTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  const lowerValue = height > width ? width : height\n\n  return lowerValue / 10\n}\nconst calculateMaxTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n  return Math.floor(Math.min(...[height / 4, width / 4]))\n}\nconst calculateMinTextureSize = window => {\n  const height = window.screen.height - 300\n  const width = window.screen.width\n\n  return Math.floor(Math.max(...[height / 50, width / 50]))\n}\nconst isSide = (x, y, width, height) => {\n  const left = x === 0\n  const right = x === width - 1\n  const top = y === 0\n  const bottom = y === height - 1\n  return bottom || top || right || left\n}\n\nexport { calculateMinTextureSize, calculateBestTextureSize, calculateMaxTextureSize, isSide }\n","import { TEXTURES } from \"./Constants/Textures\"\nimport { CONSTANTS } from \"./Constants/Constants\"\nimport { CONFIG } from \"./Constants/Config\"\nimport { isSide } from \"./HelperFunctions\"\nconst costToLocation = (from, to) => {\n  let dx = to[0] - from[0]\n  let dy = to[1] - from[1]\n  let distance = Math.sqrt(dx * dx + dy * dy)\n  return distance * 100\n}\nconst getActionType = action => {\n  return action[0] + action[1] === 0 || Math.abs(action[0] + action[1]) === 2\n    ? \"diagonal\"\n    : \"cardinal\"\n}\nconst isLegalAction = (x, y, action, state) => {\n  const destinationPos = { x: x + action[0], y: y + action[1] }\n  const actionType = getActionType(action)\n  if (isOutOfBoundaries(destinationPos, state.gridWidth, state.gridHeight)) return false\n  if (isSide(destinationPos.x, destinationPos.y, state.gridWidth, state.gridHeight)) return false\n  const isDestinationWall =\n    state.texturesMap[destinationPos.y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n  if (actionType === \"diagonal\") {\n    const isHorizontalWall =\n      state.texturesMap[y * state.gridWidth + destinationPos.x] === TEXTURES.WALL\n    const isVerticalWall =\n      state.texturesMap[destinationPos.y * state.gridWidth + x] === TEXTURES.WALL\n\n    return !(isHorizontalWall || isVerticalWall || isDestinationWall)\n  } else {\n    return !isDestinationWall\n  }\n}\nconst addToOpen = (nodeToAdd, open) => {\n  let added = false\n  // check if its already in the open list.\n  for (let index = 0; index < open.length; index++) {\n    let node = open[index]\n    if (\n      nodeToAdd.x === node.x &&\n      nodeToAdd.y === node.y &&\n      nodeToAdd.g >= node.g &&\n      nodeToAdd.health <= node.health\n    ) {\n      added = true\n      break\n    }\n  }\n  // if its not already in the open list add where it belongs based on the f value.\n  if (!added) {\n    const nodeToAddF = nodeToAdd.g + nodeToAdd.h\n    // keep going until the f value is more than or qrual to the one in the open list and that where you add the node.\n    for (let index = 0; index < open.length; index++) {\n      const node = open[index]\n      const nodeF = node.g + node.h\n      if (nodeToAddF >= nodeF) {\n        added = true\n        open.splice(index, 0, nodeToAdd)\n        break\n      }\n    }\n  }\n  // if was not added because it the smallest f then add it to the end..\n  if (!added) {\n    open.push(nodeToAdd)\n  }\n}\n\nconst getPath = node => {\n  let action = node.action\n  let parent = node.parent\n  while (parent !== null && parent.action !== null) {\n    action = parent.action\n    parent = parent.parent\n  }\n\n  return action\n}\nconst calculateChickenCollectedPaths = (state, actions) => {\n  let connected = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let open = []\n  let chickenLocation = state.currentChickenLocation\n  open.push(new Node(chickenLocation[0], chickenLocation[1], null, null, null, 0, 0))\n  while (true) {\n    if (open.length === 0) {\n      return connected\n    }\n    let node = open.shift()\n    const index = node.y * state.gridWidth + node.x\n\n    if (closed[index]) {\n      continue\n    }\n    closed[index] = true\n    connected[index] = true\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        const isCloseToPlayerX =\n          Math.abs(newLocation.x - state.currentPlayerLocation[0]) === 1 &&\n          newLocation.y === state.currentPlayerLocation[1]\n        const isCloseToPlayerY =\n          Math.abs(newLocation.y - state.currentPlayerLocation[1]) === 1 &&\n          newLocation.x === state.currentPlayerLocation[0]\n\n        const isPlayerLocation =\n          newLocation.x === state.currentPlayerLocation[0] &&\n          newLocation.y === state.currentPlayerLocation[1]\n        if (!isPlayerLocation && !isCloseToPlayerX && !isCloseToPlayerY) {\n          open.push(new Node(newLocation.x, newLocation.y, null, node, action, 0, 0))\n        }\n      }\n    })\n  }\n}\nconst debug = (array, state, props, printValue) => {\n  array.forEach((value, index) => {\n    const y = Math.floor(index / state.gridWidth)\n    const x = Math.floor(index % state.gridWidth)\n    // console.log(x, y, state.xOffset)\n    if (value) {\n      let div = document.createElement(\"div\")\n      div.style.position = \"absolute\"\n      div.style.top = state.yOffset\n        ? y * props.textureSize + state.yOffset + \"px\"\n        : y * props.textureSize + \"px\"\n      div.style.left = state.xOffset\n        ? x * props.textureSize + state.xOffset + \"px\"\n        : x * props.textureSize + \"px\"\n      div.style.zIndex = \"4\"\n      div.style.height = props.textureSize + \"px\"\n      div.style.width = props.textureSize + \"px\"\n      div.style.border = CONFIG.EDITING_BORDER\n\n      if (printValue) {\n        let h3 = document.createElement(\"h3\")\n        h3.innerText = value\n        div.appendChild(h3)\n      }\n      document.body.appendChild(div)\n    }\n  })\n}\nconst BFSFromPlayer = (state, props, actions) => {\n  let connected = calculateChickenCollectedPaths(state, actions)\n  // debug(connected, state, props, false)\n  let open = []\n  let playerLocation = state.currentPlayerLocation\n  open.push(\n    new Node(playerLocation[0], playerLocation[1], state.currentPlayerHealth, null, null, 0, 0)\n  )\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let values = new Array(state.gridWidth * state.gridHeight).fill(0)\n  while (true) {\n    if (open.length === 0) {\n      let index = values.indexOf(Math.max(...values))\n      // console.log(values)\n      // debug(values, state, props, true)\n      let y = Math.floor(index / state.gridWidth)\n      let x = Math.floor(index % state.gridWidth)\n      // console.log(x, y)\n      return [x, y]\n    }\n    let node = open.pop()\n    const index = node.y * state.gridWidth + node.x\n\n    if (closed[index]) {\n      continue\n    }\n\n    closed[index] = true\n    values[index] = node.g\n\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = [node.x + action[0], node.y + action[1]]\n        const index = newLocation[1] * state.gridWidth + newLocation[0]\n        if (\n          connected[index] ||\n          (node.x === state.currentPlayerLocation[0] && node.y === state.currentPlayerLocation[1])\n        ) {\n          const isFire = state.texturesMap[index] === TEXTURES.FIRE\n          let newCost = node.g + 100\n          newCost = isFire ? newCost + 500 : newCost\n          const newHealth = isFire ? node.health - 1 : node.health\n          if (newHealth <= 0) newCost = 100000000 + newCost\n          let newNode = new Node(\n            newLocation[0],\n            newLocation[1],\n            newHealth,\n            node,\n            action,\n            newCost,\n            0\n          )\n          addToOpen(newNode, open)\n        }\n      }\n    })\n  }\n}\nconst isOutOfBoundaries = (position, gridWidth, gridHeight) => {\n  return position.x < 0 || position.y < 0 || position.x >= gridWidth || position.y >= gridHeight\n}\nconst getNextChickenAction = (actions, state, props) => {\n  // if (props.chickenSpeed === 0) return [0, 0]\n  // let bestAction = [0, 0]\n  // let chickenLocation = state.currentChickenLocation\n  // let playerLocation = state.currentPlayerLocation\n  // let leastDistance = costToLocation(chickenLocation, playerLocation)\n  // for (let i = 0; i < actions.length; i++) {\n  //   let action = actions[i]\n  //   if (!isLegalAction(chickenLocation[0], chickenLocation[1], action, state)) continue\n  //   let newChickenLocation = [chickenLocation[0] + action[0], chickenLocation[1] + action[1]]\n  //   let distance = costToLocation(newChickenLocation, playerLocation)\n  //   if (distance > leastDistance) {\n  //     leastDistance = distance\n  //     bestAction = action\n  //   }\n  // }\n  // return bestAction\n  if (props.chickenSpeed === 0) return [0, 0]\n  const start = state.currentChickenLocation\n  const goal = BFSFromPlayer(state, props, actions)\n  if (start[0] === goal[0] && start[1] === goal[1]) {\n    return [0, 0]\n  }\n\n  let closed = new Array(state.gridHeight * state.gridWidth).fill(false)\n  let open = []\n  open.push(new Node(start[0], start[1], 0, null, null, 0, costToLocation(start, goal)))\n  while (true) {\n    if (open.length === 0) {\n      return [0, 0]\n    }\n    let node = open.pop()\n    if (node.x === goal[0] && node.y === goal[1]) {\n      return getPath(node)\n    }\n    if (closed[node.y * state.gridWidth + node.x]) {\n      continue\n    }\n    closed[node.y * state.gridWidth + node.x] = true\n    actions.forEach(action => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        const isCloseToPlayerX =\n          Math.abs(newLocation.x - state.currentPlayerLocation[0]) === 1 &&\n          newLocation.y === state.currentPlayerLocation[1]\n        const isCloseToPlayerY =\n          Math.abs(newLocation.y - state.currentPlayerLocation[1]) === 1 &&\n          newLocation.x === state.currentPlayerLocation[0]\n\n        const isPlayerLocation =\n          newLocation.x === state.currentPlayerLocation[0] &&\n          newLocation.y === state.currentPlayerLocation[1]\n        if (!(isCloseToPlayerX || isCloseToPlayerY)) {\n          if (!isPlayerLocation) {\n            const g = node.g + 100\n            const h = costToLocation([newLocation.x, newLocation.y], goal)\n            const newNode = new Node(newLocation.x, newLocation.y, 0, node, action, g, h)\n            addToOpen(newNode, open)\n          } else {\n          }\n        } else {\n        }\n      }\n    })\n  }\n}\nconst getNextAction = (state, props, characterType) => {\n  // console.log(state.currentChickenLocation, state.currentPlayerLocation)\n  let actions = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0]\n  ]\n  let diagonalActions = [\n    [1, 1],\n    [-1, 1],\n    [1, -1],\n    [-1, -1]\n  ]\n  if (props.allowDiagonalActions) actions = actions.concat(diagonalActions)\n  if (characterType === CONSTANTS.CHICKEN) return getNextChickenAction(actions, state, props)\n  let start = state.currentPlayerLocation\n  let goal = state.currentChickenLocation\n  let foundPath = false\n  let bestPathNode = null\n  let bestPathFoundHealth = 0\n  //edge case when start is the goal.\n  if (start[0] === goal[0] && start[1] === goal[1]) {\n    return [0, 0]\n  }\n\n  let actionsCost = [100, 100, 100, 100, 144, 141, 141, 141]\n  let closed = [...new Array(state.gridWidth * state.gridHeight)].map(() =>\n    new Array(props.playerMaxHealth).fill(false)\n  )\n\n  let open = []\n  open.push(\n    new Node(\n      start[0],\n      start[1],\n      state.currentPlayerHealth,\n      null,\n      null,\n      0,\n      costToLocation(start, goal)\n    )\n  )\n  while (true) {\n    if (open.length === 0) {\n      if (foundPath) {\n        return getPath(bestPathNode)\n      }\n      return [0, 0]\n    }\n\n    let node = open.pop()\n    if (node.x === goal[0] && node.y === goal[1]) {\n      if (node.health === props.playerMaxHealth || props.searchPriority === CONSTANTS.SPEED) {\n        return getPath(node)\n      } else if (node.health > bestPathFoundHealth) {\n        foundPath = true\n        bestPathFoundHealth = node.health\n        bestPathNode = node\n      }\n    }\n\n    // checks if node in closed, where closed is an array with true false values for any state at x,y by accessing index at y * the with + x\n    if (closed[node.y * state.gridWidth + node.x][node.health - 1]) {\n      continue\n    }\n\n    closed[node.y * state.gridWidth + node.x][node.health - 1] = true\n    if (node.health <= 0) continue\n    actions.forEach((action, index) => {\n      if (isLegalAction(node.x, node.y, action, state)) {\n        const newLocation = { x: node.x + action[0], y: node.y + action[1] }\n        let g = node.g + actionsCost[index]\n        const h = costToLocation([newLocation.x, newLocation.y], goal)\n        const healthPackOnLocation =\n          state.overLayMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.HEALTH_PACK\n        const isLava =\n          state.texturesMap[newLocation.y * state.gridWidth + newLocation.x] === TEXTURES.FIRE\n\n        const health = healthPackOnLocation\n          ? props.playerMaxHealth\n          : isLava\n          ? node.health - 1\n          : node.health\n        if (isLava && !healthPackOnLocation) g += 20\n\n        const newNode = new Node(newLocation.x, newLocation.y, health, node, action, g, h)\n        addToOpen(newNode, open)\n      }\n    })\n  }\n}\n\nclass Node {\n  constructor(x, y, health, parent, action, g, h) {\n    this.x = x\n    this.y = y\n    this.health = health\n    this.action = action\n    this.parent = parent\n    this.g = g\n    this.h = h\n  }\n}\nexport default getNextAction\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport Texture from \"./Texture\"\nimport { TEXTURES, TEXTURE_DATA } from \"../Constants/Textures\"\nimport { CONFIG } from \"../Constants/Config\"\nimport Character from \"./Character\"\nimport getNextAction from \"../AStar.js\"\nimport { Modal, Button, Typography } from \"antd\"\n\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport queryString from \"query-string\"\nimport { isSide, calculateMaxTextureSize, calculateMinTextureSize } from \"../HelperFunctions\"\n\nconst Container = styled.div`\n  flex: 1;\n  position: relative;\n  // background-image: url(\"background2.png\");\n  background: #f6d688;\n`\nconst EditorDoneButton = styled(Button)`\n  border-radius: 20px !important;\n`\nconst EditorContainer = styled.div`\n  width: 80px;\n  height: 380px;\n  position: absolute;\n  display: flex;\n  padding: 15px 0;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  left: ${props => (props.expanded ? 0 : -70)}px;\n  transition: left 1s;\n  top: ${props => props.top}px;\n  border-radius: 10px;\n  z-index: 6;\n  background-color: ${CONFIG.SECONDARY_APP_COLOR};\n`\nconst EditorArrow = styled(Button)`\n  position: absolute !important;\n  transform: ${props => (props.expanded === \"true\" ? \"rotateZ(-180deg)\" : \"\")};\n  transition: transform 1s;\n  left: 68px;\n  top: 25px;\n`\nconst TextureLabel = styled(Typography.Text)`\n  color: white !important;\n  margin-bottom: 5px;\n`\nconst Image = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 10px;\n  cursor: pointer;\n`\nexport class Grid extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      texturesMap: [],\n      overLayMap: [],\n      edits: [],\n      modalMessage: \"\",\n      showModal: false,\n      gridWidth: 0,\n      editorExpanded: true,\n      finishAfterNextAnimation: false,\n      gridHeight: 0,\n      xOffset: 0,\n      yOffset: 0,\n      initialPlayerLocation: null,\n      currentPlayerLocation: null,\n      initialChickenLocation: null,\n      currentChickenLocation: null,\n      currentPlayerHealth: props.playerMaxHealth,\n      currentChickenHealth: props.chickenMaxHealth,\n      mouseOverX: null,\n      mouseOverY: null,\n      mouseDown: false\n    }\n    this.onMouseDown = this.onMouseDown.bind(this)\n    this.onMouseUp = this.onMouseUp.bind(this)\n    this.onMouseHoverTextureEnter = this.onMouseHoverTextureEnter.bind(this)\n    this.onMouseHoverTextureLeave = this.onMouseHoverTextureLeave.bind(this)\n    this.onPlaceCharacter = this.onPlaceCharacter.bind(this)\n    this.handleHoverWhilePlacingCharacter = this.handleHoverWhilePlacingCharacter.bind(this)\n    this.getNextCharacterAction = this.getNextCharacterAction.bind(this)\n    this.setCharacterCurrentHealth = this.setCharacterCurrentHealth.bind(this)\n    this.onCharacterFinishMove = this.onCharacterFinishMove.bind(this)\n    this.updateURL = this.updateURL.bind(this)\n  }\n\n  setCharacterCurrentHealth(character, value) {\n    let capitalized = character.charAt(0).toUpperCase() + character.slice(1)\n    this.setState({ [\"current\" + capitalized + \"Health\"]: value })\n  }\n  onMouseDown(e, x, y) {\n    e.persist()\n    this.setState({ mouseDown: true }, () => {\n      this.onMouseHoverTextureEnter(e, x, y)\n    })\n  }\n  onPlaceCharacter() {\n    this.props.setSelectedEditTexture(null)\n  }\n  onMouseUp() {\n    this.setState({ mouseDown: false })\n  }\n  handleHoverWhilePlacingCharacter(characterType, x, y) {\n    if (characterType === TEXTURES.CHICKEN_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.CHICKEN)\n      this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n    }\n    if (characterType === TEXTURES.PLAYER_IDLE) {\n      this.resetCharactersLocation(CONSTANTS.PLAYER)\n      this.setState({ initialPlayerLocation: [x, y], currentPlayerLocation: [x, y] })\n    }\n  }\n  resetCharactersLocation(character) {\n    if (character === CONSTANTS.PLAYER) {\n      let player = document.getElementById(CONSTANTS.PLAYER)\n      player.style.left = 0\n      player.style.top = 0\n    } else {\n      let chicken = document.getElementById(CONSTANTS.CHICKEN)\n      chicken.style.left = 0\n      chicken.style.top = 0\n    }\n  }\n  handleFollowCursor(x, y) {\n    this.resetCharactersLocation(CONSTANTS.CHICKEN)\n    this.setState({ initialChickenLocation: [x, y], currentChickenLocation: [x, y] })\n  }\n\n  updateURL() {\n    let newURLObject = {\n      playerSpeed: this.props.playerSpeed,\n      playerMaxHealth: this.props.playerMaxHealth,\n      initialTexturesMap: this.state.texturesMap,\n      searchPriority: this.props.searchPriority,\n      allowDiagonalActions: this.props.allowDiagonalActions,\n      initialOverLayMap: this.state.overLayMap,\n      minHeight: window.screen.height,\n      minWidth: window.screen.width,\n      chickenSpeed: this.props.chickenSpeed,\n      textureSize: this.props.textureSize,\n      firstRenderPlayerLocation: this.state.initialPlayerLocation,\n      firstRenderChickenLocation: this.state.initialChickenLocation\n    }\n\n    window.history.replaceState(\n      {},\n      null,\n      \"?\" +\n        queryString.stringify(newURLObject, {\n          arrayFormat: \"comma\"\n        })\n    )\n  }\n\n  onMouseHoverTextureEnter(e, x, y) {\n    const { selectedEditTexture, editing, followCursor, textureSize } = this.props\n    const {\n      texturesMap,\n      mouseDown,\n      edits,\n      overLayMap,\n      xOffset,\n      yOffset,\n      gridWidth,\n      gridHeight\n    } = this.state\n    let index = y * gridWidth + x\n\n    let side = isSide(x, y, gridWidth, gridHeight)\n    if (e.type === \"touchmove\") {\n      let touchX = Math.floor((e.touches[0].pageX - xOffset) / textureSize)\n      let touchY = Math.floor((e.touches[0].pageY - yOffset) / textureSize)\n      if (touchX >= gridWidth || touchY >= gridHeight) return\n      index = touchY * gridWidth + touchX\n    }\n    if (!side) {\n      if (\n        selectedEditTexture === TEXTURES.PLAYER_IDLE ||\n        selectedEditTexture === TEXTURES.CHICKEN_IDLE\n      ) {\n        this.handleHoverWhilePlacingCharacter(selectedEditTexture, x, y)\n      } else if (editing) {\n        if (e.target !== null && !(\"ontouchstart\" in window)) {\n          e.target.parentElement.style.border = CONFIG.EDITING_BORDER\n        }\n        if (selectedEditTexture === TEXTURES.HEALTH_PACK) {\n          if (mouseDown) {\n            let newOverLayMap = overLayMap.slice()\n            newOverLayMap[index] =\n              overLayMap[index] === TEXTURES.HEALTH_PACK\n                ? TEXTURES.TRANSPARENT\n                : selectedEditTexture\n            this.setState({\n              overLayMap: newOverLayMap,\n              mouseOverX: x,\n              mouseOverY: y,\n              mouseDown: false,\n              edits: [...edits, { type: CONSTANTS.OVERLAY, texture: overLayMap[index], x, y }]\n            })\n          } else {\n            this.setState({ mouseOverX: x, mouseOverY: y })\n          }\n        } else if (texturesMap[index] !== selectedEditTexture) {\n          if (mouseDown) {\n            let newTexturesMap = texturesMap.slice()\n            newTexturesMap[index] = selectedEditTexture\n            this.setState({\n              texturesMap: newTexturesMap,\n              mouseOverX: x,\n              mouseOverY: y,\n              edits: [...edits, { type: CONSTANTS.TEXTURE, texture: texturesMap[index], x, y }]\n            })\n          } else {\n            this.setState({ mouseOverX: x, mouseOverY: y })\n          }\n        }\n      } else if (followCursor) {\n        this.handleFollowCursor(x, y)\n      }\n    }\n  }\n  onMouseHoverTextureLeave(e) {\n    if (this.props.editing) {\n      this.setState({ mouseOverX: null, mouseOverY: null })\n      e.target.parentElement.style.border = \"0\"\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.textureSize !== this.props.textureSize) {\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    }\n    if (prevProps.playerMaxHealth !== this.props.playerMaxHealth) {\n      this.setState({ currentPlayerHealth: this.props.playerMaxHealth })\n    }\n  }\n\n  initializeGridWithTextureSize(textureSize, tMap, oMap, useURL) {\n    let gridWidth = Math.floor(this.container.offsetWidth / textureSize)\n    let gridHeight = Math.floor(this.container.offsetHeight / textureSize)\n    let xOffset = (this.container.offsetWidth % textureSize) / 2\n    let yOffset = (this.container.offsetHeight % textureSize) / 2\n    let playerLocation =\n      useURL !== undefined && this.props.firstRenderPlayerLocation !== null\n        ? this.props.firstRenderPlayerLocation\n        : [1, 1]\n    let chickenLocation =\n      useURL !== undefined && this.props.firstRenderChickenLocation !== null\n        ? this.props.firstRenderChickenLocation\n        : [gridWidth - 2, 1]\n    let texturesMap =\n      tMap === undefined\n        ? new Array(gridWidth * gridHeight).fill(TEXTURES.FLOOR)\n        : new Array(gridWidth * gridHeight).fill(TEXTURES.FLOOR).map((value, index) => {\n            return tMap[index] !== undefined ? tMap[index] : value\n          })\n    let overLayMap =\n      oMap === undefined\n        ? new Array(gridWidth * gridHeight).fill(TEXTURES.TRANSPARENT)\n        : new Array(gridWidth * gridHeight).fill(TEXTURES.TRANSPARENT).map((value, index) => {\n            return oMap[index] !== undefined ? oMap[index] : value\n          })\n\n    this.setState({\n      texturesMap: texturesMap,\n      overLayMap: overLayMap,\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      initialPlayerLocation: playerLocation,\n      initialChickenLocation: chickenLocation,\n      currentPlayerLocation: playerLocation,\n      currentChickenLocation: chickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      edits: []\n    })\n    this.props.envIsReady()\n  }\n\n  getNextCharacterAction(type) {\n    // console.log(\"fetching action for \", type)\n    let action = getNextAction(this.state, this.props, type)\n    if (action[0] !== 0 || action[1] !== 0) {\n      if (type === CONSTANTS.PLAYER) {\n        let newPosition = [\n          this.state.currentPlayerLocation[0] + action[0],\n          this.state.currentPlayerLocation[1] + action[1]\n        ]\n        this.setState({ currentPlayerLocation: newPosition })\n      } else {\n        let newPosition = [\n          this.state.currentChickenLocation[0] + action[0],\n          this.state.currentChickenLocation[1] + action[1]\n        ]\n        this.setState({ currentChickenLocation: newPosition })\n      }\n    }\n\n    return action\n  }\n  undoEdit() {\n    if (this.state.edits.length > 0) {\n      let editsCopy = this.state.edits.slice()\n      let editToUndo = editsCopy.pop()\n      let index = editToUndo.y * this.state.gridWidth + editToUndo.x\n      if (editToUndo.type === CONSTANTS.TEXTURE) {\n        let texturesMapCopy = this.state.texturesMap.slice()\n        texturesMapCopy[index] = editToUndo.texture\n        this.setState({ texturesMap: texturesMapCopy, edits: editsCopy })\n      } else if (editToUndo.type === CONSTANTS.OVERLAY) {\n        let overLayMapCopy = this.state.overLayMap.slice()\n        overLayMapCopy[index] = editToUndo.texture\n        this.setState({ overLayMap: overLayMapCopy, edits: editsCopy })\n      }\n    }\n  }\n  componentDidMount() {\n    let validTextureSize =\n      this.props.textureSize >= calculateMinTextureSize(window) &&\n      this.props.textureSize <= calculateMaxTextureSize(window)\n    let mapCanFit =\n      this.props.URLParams.minHeight <= window.screen.height &&\n      this.props.URLParams.minWidth <= window.screen.width\n    if (validTextureSize && mapCanFit) {\n      if (this.props.initialTexturesMap.length > 0 && this.props.initialOverLayMap.length > 0) {\n        this.initializeGridWithTextureSize(\n          this.props.textureSize,\n          this.props.initialTexturesMap,\n          this.props.initialOverLayMap,\n          true\n        )\n      } else {\n        this.initializeGridWithTextureSize(this.props.textureSize)\n      }\n    } else {\n      if (!mapCanFit && this.props.URLParams.initialTexturesMap !== undefined) {\n        this.setState({\n          showModal: true,\n          modalMessage:\n            \"We could not load the map from the link, the map was created on a screen bigger than the one you are using currently. Try again using a bigger screen.\"\n        })\n      }\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    }\n    this.props.onRef(this)\n    window.addEventListener(\"resize\", e =>\n      this.initializeGridWithTextureSize(this.props.textureSize)\n    )\n  }\n  onCharacterFinishMove(characterType, action) {\n    // if (action[0] !== 0 || action[1] !== 0) {\n    //   if (characterType === CONSTANTS.PLAYER) {\n    //     let newPosition = [\n    //       this.state.currentPlayerLocation[0] + action[0],\n    //       this.state.currentPlayerLocation[1] + action[1]\n    //     ]\n    //     this.setState({ currentPlayerLocation: newPosition }, () =>\n    //       console.log(\"updated playerLocation\")\n    //     )\n    //   } else {\n    //     let newPosition = [\n    //       this.state.currentChickenLocation[0] + action[0],\n    //       this.state.currentChickenLocation[1] + action[1]\n    //     ]\n    //     this.setState({ currentChickenLocation: newPosition }, () =>\n    //       console.log(\"updated chicken location\")\n    //     )\n    //   }\n    // }\n    // console.log(characterType, \" finished moving\")\n    const { overLayMap, currentPlayerLocation, currentChickenLocation, texturesMap } = this.state\n    let capitalized = characterType.charAt(0).toUpperCase() + characterType.slice(1)\n    let characterLocation = this.state[\"current\" + capitalized + \"Location\"]\n    let currentCharacterHealth = this.state[\"current\" + capitalized + \"Health\"]\n    let index = characterLocation[1] * this.state.gridWidth + characterLocation[0]\n    if (texturesMap[index] === TEXTURES.FIRE) {\n      this.setCharacterCurrentHealth(characterType, currentCharacterHealth - 1)\n    }\n    if (overLayMap[index] === TEXTURES.HEALTH_PACK) {\n      let newOverLayMap = overLayMap.slice()\n      newOverLayMap[index] = TEXTURES.TRANSPARENT\n      this.setState({\n        overLayMap: newOverLayMap\n      })\n      this.setCharacterCurrentHealth(characterType, this.props.playerMaxHealth)\n    }\n    if (this.state.finishAfterNextAnimation) {\n      this.props.onFinishGame()\n      this.props.onClickRestart()\n    }\n    if (\n      currentPlayerLocation[0] === currentChickenLocation[0] &&\n      currentPlayerLocation[1] === currentChickenLocation[1] &&\n      !this.props.followCursor\n    ) {\n      if (this.props.chickenSpeed === 0) {\n        this.props.onFinishGame()\n        this.props.onClickRestart()\n      } else if (characterType === CONSTANTS.PLAYER) {\n        // this.setState({ finishAfterNextAnimation: true })\n        this.props.onFinishGame()\n        this.props.onClickRestart()\n      }\n    }\n  }\n  onSelectCustomLevel(levelData) {\n    this.initializeGridWithTextureSize(\n      levelData.textureSize,\n      levelData.initialTexturesMap,\n      levelData.initialOverLayMap,\n      true\n    )\n  }\n  onClickTexture(texture) {\n    this.props.setEditing(true)\n    this.props.setSelectedEditTexture(texture)\n  }\n  onClickRestart() {\n    this.player.onClickRestart()\n    this.chicken.onClickRestart()\n    this.setState({\n      currentPlayerLocation: this.state.initialPlayerLocation,\n      currentChickenLocation: this.state.initialChickenLocation,\n      currentPlayerHealth: this.props.playerMaxHealth,\n      currentChickenHealth: this.props.chickenMaxHealth,\n      finishAfterNextAnimation: false\n    })\n  }\n  render() {\n    const {\n      gridWidth,\n      gridHeight,\n      xOffset,\n      yOffset,\n      texturesMap,\n      overLayMap,\n      mouseOverX,\n      mouseOverY,\n      initialPlayerLocation,\n      initialChickenLocation,\n      showModal,\n      modalMessage,\n      currentPlayerHealth,\n      editorExpanded\n    } = this.state\n    const {\n      textureSize,\n      inProgress,\n      paused,\n      followCursor,\n      editing,\n      selectedEditTexture,\n      playerSpeed,\n      setEditing,\n      playerMaxHealth,\n      chickenSpeed\n    } = this.props\n    let isEditingOverLay = selectedEditTexture === TEXTURES.HEALTH_PACK\n    return (\n      <Container onMouseLeave={this.onMouseUp} ref={el => (this.container = el)}>\n        <Modal\n          closable={false}\n          footer={[\n            <Button type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          title={\"Sorry\"}\n          visible={showModal}\n        >\n          {modalMessage}\n        </Modal>\n        <EditorContainer\n          top={this.container !== undefined ? this.container.offsetHeight / 2 : 0}\n          expanded={editorExpanded}\n        >\n          <EditorArrow\n            expanded={editorExpanded ? \"true\" : \"false\"}\n            onClick={() => this.setState({ editorExpanded: !editorExpanded })}\n            size=\"small\"\n            shape=\"circle\"\n            icon=\"arrow-right\"\n          ></EditorArrow>\n          <Image\n            onClick={() => this.onClickTexture(22)}\n            src={TEXTURE_DATA[TEXTURES.FLOOR].src}\n          ></Image>\n          <TextureLabel>Floor</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.FIRE)}\n            src={TEXTURE_DATA[TEXTURES.FIRE].icon}\n          ></Image>\n          <TextureLabel>Fire</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.WALL)}\n            src={TEXTURE_DATA[TEXTURES.WALL].src}\n          ></Image>\n          <TextureLabel>Rock</TextureLabel>\n          <Image\n            onClick={() => this.onClickTexture(TEXTURES.HEALTH_PACK)}\n            src={TEXTURE_DATA[TEXTURES.WALL].src}\n          ></Image>\n          <TextureLabel>Health</TextureLabel>\n          <EditorDoneButton\n            onClick={() => {\n              setEditing(false)\n              this.setState({ editorExpanded: false })\n            }}\n            size=\"small\"\n          >\n            Done\n          </EditorDoneButton>\n        </EditorContainer>\n        {texturesMap.map((texture, index) => {\n          const x = index % gridWidth\n          const y = Math.floor(index / gridWidth)\n          const left = x === 0\n          const right = x === gridWidth - 1\n          const top = y === 0\n          const bottom = y === gridHeight - 1\n          let side = isSide(x, y, gridWidth, gridHeight)\n          let floorTexture = \"FLOOR\"\n          if (top) floorTexture += \"_TOP\"\n          if (bottom) floorTexture += \"_BOTTOM\"\n          if (left) floorTexture += \"_LEFT\"\n          if (right) floorTexture += \"_RIGHT\"\n          let textureToRenderIfSide = TEXTURES[floorTexture]\n          let isBeingEdited = editing && mouseOverX === x && mouseOverY === y\n          return (\n            <Texture\n              x={x}\n              y={y}\n              key={index}\n              textureSize={textureSize}\n              xOffset={xOffset}\n              zIndex={1}\n              yOffset={yOffset}\n              texture={\n                isBeingEdited && !isEditingOverLay\n                  ? selectedEditTexture\n                  : side\n                  ? textureToRenderIfSide\n                  : texture\n              }\n            ></Texture>\n          )\n        })}\n        {overLayMap.map((overLayTexture, index) => {\n          const x = index % gridWidth\n          const y = Math.floor(index / gridWidth)\n          let isBeingEdited = editing && mouseOverX === x && mouseOverY === y\n          return (\n            <Texture\n              x={x}\n              y={y}\n              key={index}\n              onMouseHoverTextureEnter={e => this.onMouseHoverTextureEnter(e, x, y)}\n              onMouseHoverTextureLeave={e => this.onMouseHoverTextureLeave(e)}\n              textureSize={textureSize}\n              onMouseDown={e => this.onMouseDown(e, x, y)}\n              zIndex={2}\n              onMouseUp={this.onMouseUp}\n              xOffset={xOffset}\n              yOffset={yOffset}\n              texture={isBeingEdited && isEditingOverLay ? selectedEditTexture : overLayTexture}\n            ></Texture>\n          )\n        })}\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.chicken = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialChickenLocation}\n          textureSize={textureSize}\n          movementSpeed={chickenSpeed}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          inProgress={inProgress}\n          paused={paused}\n          getNextAction={this.getNextCharacterAction}\n          renderOnScreen={!followCursor}\n          type={CONSTANTS.CHICKEN}\n          zIndex={4}\n        ></Character>\n        <Character\n          xOffset={xOffset}\n          yOffset={yOffset}\n          onRef={ref => (this.player = ref)}\n          onPlaceCharacter={this.onPlaceCharacter}\n          initialCharacterLocation={initialPlayerLocation}\n          textureSize={textureSize}\n          movementSpeed={playerSpeed}\n          inProgress={inProgress}\n          paused={paused}\n          getNextAction={this.getNextCharacterAction}\n          onCharacterFinishMove={this.onCharacterFinishMove}\n          currentHealth={currentPlayerHealth}\n          maxHealth={playerMaxHealth}\n          renderOnScreen={true}\n          healthBar={true}\n          type={CONSTANTS.PLAYER}\n          zIndex={5}\n        ></Character>\n      </Container>\n    )\n  }\n}\n\nexport default Grid\n","export const BREAKPOINTS = {\n  MEDIUM_WIDTH: \"1100px\",\n  SMALL_WIDTH: \"900px\",\n  VERY_SMALL_WIDTH: \"720px\",\n  MEDIUM_HEIGHT: \"960px\",\n  SMALL_HEIGHT: \"820px\",\n  VERY_SMALL_HEIGHT: \"700px\"\n}\n","import React, { Component } from \"react\"\nimport styled from \"styled-components\"\nimport { Slider, Button, Typography, Radio, Tooltip, Modal, Input, Carousel } from \"antd\"\nimport { CONSTANTS } from \"../Constants/Constants\"\nimport { CONFIG } from \"../Constants/Config\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport { BREAKPOINTS } from \"../Constants/BreakPoints\"\n\nimport { calculateMaxTextureSize, calculateMinTextureSize } from \"../HelperFunctions\"\nconst Container = styled.div`\n  width: 100%;\n  height: fit-content;\n  background-color: ${CONFIG.MAIN_APP_COLOR};\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  padding-top: 15px;\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    font-size: 11px;\n  }\n  @media (max-width: ${BREAKPOINTS.SMALL_WIDTH}) {\n    font-size: 11px;\n  }\n`\nconst TutorialImage = styled.img`\n  width: 100%;\n  height: 200px;\n`\nconst TutorialButtonContainer = styled.div`\n  position: absolute;\n  top: 35%;\n  width: 100%;\n  display: flex;\n  left: 0;\n  padding: 0 24px 0 24px;\n  justify-content: space-between;\n`\nconst FlexDivCenter = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 10px;\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    margin-bottom: 6px;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    margin-bottom: 4px;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    margin-bottom: 2px;\n  }\n`\nconst StyledText = styled(Typography.Text)`\n  color: white !important;\n`\nconst StyledGitButton = styled(Button)`\n  display: inline-block;\n`\nconst StyledButton = styled(Button)`\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    height: 35px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.SMALL_HEIGHT}) {\n    height: 30px !important;\n  }\n  @media (max-height: ${BREAKPOINTS.VERY_SMALL_HEIGHT}) {\n    height: 25px !important;\n  }\n  border-radius: 20px !important;\n  height: 43px !important;\n`\nconst Left = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-end;\n  flex-direction: column;\n  flex-grow: 1;\n  height: 100%;\n  align-self: flex-start;\n  padding-top: 30px;\n`\nconst Center = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n  flex-direction: column;\n  align-self: center;\n  flex-grow: 0.3;\n`\nconst Right = styled.div`\n  display: flex;\n  height: 100%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  margin: auto;\n  flex-direction: column;\n  flex-grow: 1;\n  align-self: flex-end;\n  padding-top: 30px;\n`\nconst Label = styled(Typography.Text)`\n  margin-left: 6px;\n  margin-right: 6px;\n  display: inline-block;\n  width: 20%;\n  color: white !important;\n`\nconst StyledSlider = styled(Slider)`\n  width: 70%;\n  display: inline-block;\n  min-width: 50px;\n  margin: 0 !important;\n`\nconst SliderContainer = styled.div`\n  width: 100%;\n  margin-bottom: 60px;\n  @media (max-width: ${BREAKPOINTS.VERY_SMALL_WIDTH}) {\n    margin-bottom: 0;\n  }\n  display: flex;\n  align-items: center;\n`\nconst StyledTitle = styled(Typography.Title)`\n  color: white !important;\n`\nconst LeftRightContainer = styled.div`\n  width: 60%;\n  @media (max-width: ${BREAKPOINTS.MEDIUM_WIDTH}) {\n    width: 100%;\n  }\n  display: flex;\n  flex-direction: column;\n`\nconst PlayButton = styled(Button)`\n  margin: ${props => props.margin};\n  font-size: ${props => props.fontSize + \"px !important\"};\n  @media (max-height: ${BREAKPOINTS.MEDIUM_HEIGHT}) {\n    font-size: 25px !important;\n  }\n  height: fit-content !important;\n  width: fit-content !important;\n  &:focus,\n  &:active {\n    color: white !important;\n  }\n  &:hover {\n    color: #40a9ff !important;\n  }\n`\nconst playerMaxHealth = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerMaxHealthLabel\">{smallScreen ? \"player Max Health\" : \"Max Health\"}</Label>,\n    <StyledSlider\n      key=\"playerMaxHealthSlider\"\n      onChange={value => props.setCharacterMaxHealth(CONSTANTS.PLAYER, value)}\n      value={props.playerMaxHealth}\n      disabled={props.inProgress}\n      min={1}\n      max={10}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Max Health \">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst playerSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"playerSpeedLabel\">{smallScreen ? \"player Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"playerSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.PLAYER, speed)}\n      value={props.playerSpeed}\n      min={1}\n      max={4}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst chickenSpeed = (props, smallScreen) => {\n  const component = [\n    <Label key=\"chickenSpeedLabel\">{smallScreen ? \"Chicken Speed\" : \"Speed\"}</Label>,\n    <StyledSlider\n      key=\"chickenSpeedSlider\"\n      onChange={speed => props.setCharacterSpeed(CONSTANTS.CHICKEN, speed)}\n      value={props.chickenSpeed}\n      min={0}\n      max={4}\n      disabled={false}\n      step={1}\n      tooltipPlacement={\"top\"}\n    />\n  ]\n\n  return smallScreen ? (\n    component\n  ) : (\n    <Tooltip placement=\"topLeft\" title=\"Chicken AI Coming Soon!\">\n      <SliderContainer>{component.map(item => item)}</SliderContainer>\n    </Tooltip>\n  )\n}\nconst getPlayButton = props => {\n  return props.inProgress ? (\n    <div>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => (props.paused ? props.onClickResume() : props.onClickPause())}\n        ghost={true}\n        margin={\"0 4px 0 15px\"}\n        icon={props.paused ? \"play-circle\" : \"pause-circle\"}\n      ></PlayButton>\n      <PlayButton\n        disabled={!props.ready}\n        type={\"link\"}\n        fontSize={30}\n        onClick={() => props.onClickRestart()}\n        margin={\"0 15px 0 4px\"}\n        ghost={true}\n        icon={\"stop\"}\n      ></PlayButton>\n    </div>\n  ) : (\n    <PlayButton\n      disabled={!props.ready}\n      type={\"link\"}\n      ghost={true}\n      fontSize={35}\n      margin={\"0 15px 0 15px\"}\n      onClick={() => props.onClickStart()}\n      icon={\"play-circle\"}\n    ></PlayButton>\n  )\n}\nexport default class Footer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      minTextureSize: calculateMinTextureSize(window),\n      maxTextureSize: calculateMaxTextureSize(window),\n      showTutorial: false,\n      showModal: false\n    }\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", e => {\n      this.setState({\n        minTextureSize: calculateMinTextureSize(window),\n        maxTextureSize: calculateMaxTextureSize(window)\n      })\n    })\n  }\n  copyLinkToClipBoard() {\n    let el = document.getElementById(\"shareLinkInput\")\n    el.select()\n    el.setSelectionRange(0, 99999)\n    document.execCommand(\"copy\")\n  }\n  render() {\n    const smallScreenWidth = window.screen.width <= parseInt(BREAKPOINTS.VERY_SMALL_WIDTH, 10)\n    const smallScreenHeight = window.screen.height <= parseInt(BREAKPOINTS.SMALL_HEIGHT, 10)\n    const props = this.props\n    const { minTextureSize, maxTextureSize, showModal, showTutorial } = this.state\n    return (\n      <Container>\n        <Modal\n          onCancel={() => this.setState({ showTutorial: false })}\n          closable={true}\n          footer={null}\n          visible={showTutorial}\n          title={null}\n        >\n          <Typography.Title style={{ textAlign: \"center\" }} level={4}>\n            Run Chicken!!\n          </Typography.Title>\n          <TutorialButtonContainer>\n            <Button\n              style={{ zIndex: 1 }}\n              ghost={true}\n              type=\"link\"\n              shape=\"circle\"\n              onClick={() => this.carousel.prev()}\n              icon=\"left\"\n            ></Button>\n            <Button\n              style={{ zIndex: 1 }}\n              ghost={true}\n              onClick={() => this.carousel.next()}\n              type=\"link\"\n              shape=\"circle\"\n              icon=\"right\"\n            ></Button>\n          </TutorialButtonContainer>\n\n          <Carousel ref={node => (this.carousel = node)}>\n            <TutorialImage\n              style={{ width: \"100%\", height: \"200px\" }}\n              src=\"background.png\"\n            ></TutorialImage>\n            <TutorialImage\n              style={{ width: \"100%\", height: \"200px\" }}\n              src=\"background.png\"\n            ></TutorialImage>\n\n            <TutorialImage\n              style={{ width: \"100%\", height: \"200px\" }}\n              src=\"background.png\"\n            ></TutorialImage>\n            <div>\n              <TutorialImage\n                style={{ width: \"100%\", height: \"200px\" }}\n                src=\"background.png\"\n              ></TutorialImage>\n              <Typography.Text>\n                This is the best way to do this i dont htinwdadwdaThis is the best way to do this i\n                dont htinwdadwdaThis is the best way to do this i dont htinwdadwdaThis is the best\n                way to do this i dont htinwdadwdaThis is the best way to do this i dont\n                htinwdadwdaThis is the best way to do this i dont htinwdadwda\n              </Typography.Text>\n            </div>\n          </Carousel>\n          <div></div>\n        </Modal>\n\n        <Modal\n          closable={false}\n          footer={[\n            <Button key={1} type=\"primary\" onClick={() => this.setState({ showModal: false })}>\n              Ok\n            </Button>\n          ]}\n          visible={showModal}\n          title={\"Share Your Map!\"}\n        >\n          <Typography.Text>Copy This Link and Send it To your Friends</Typography.Text>\n          <div>\n            <Input\n              id={\"shareLinkInput\"}\n              style={{ margin: \"20px 20px 20px 0\", width: \"80%\" }}\n              defaultValue={window.location.href}\n            ></Input>\n            <Button onClick={() => this.copyLinkToClipBoard()} type=\"secondary\">\n              Copy\n            </Button>\n          </div>\n          <Typography.Text type={\"secondary\"}>\n            Note that your friend's screen needs to be at least as big as your screen to maintain\n            the shape of the map!\n          </Typography.Text>\n        </Modal>\n        {smallScreenWidth ? null : (\n          <Left>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Player Options</StyledTitle>\n              </FlexDivCenter>\n              {playerMaxHealth(props, false)}\n              {playerSpeed(props, false)}\n            </LeftRightContainer>\n          </Left>\n        )}\n\n        <Center>\n          <FlexDivCenter>\n            <Tooltip placement=\"top\" title=\"The player Will Follow The Mouse Cursor on The Screen\">\n              <StyledButton onClick={() => props.enableFollowCursor()} style={{ margin: \"0\" }}>\n                Follow Cursor\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Undo The Last Edit to The Map\">\n              <StyledButton onClick={() => props.onClickUndo()} style={{ margin: \"0 15px 0 0\" }}>\n                Undo Edit\n              </StyledButton>\n            </Tooltip>\n            {getPlayButton(props)}\n            <Tooltip placement=\"right\" title=\"Share This Map With a Friend\">\n              <StyledButton\n                onClick={() => {\n                  props.generateLink()\n                  this.setState({ showModal: true })\n                }}\n                style={{ margin: \"0 0 0 15px\" }}\n              >\n                Share Map\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <FlexDivCenter>\n            <Tooltip placement=\"left\" title=\"Position The Start Location of The player\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.PLAYER_IDLE)}\n                style={{ margin: \"0 10px 0 0\" }}\n              >\n                Place Player\n              </StyledButton>\n            </Tooltip>\n            <Tooltip placement=\"right\" title=\"Position The Start Location of The Chicken\">\n              <StyledButton\n                onClick={() => props.setSelectedEditTexture(TEXTURES.CHICKEN_IDLE)}\n                style={{ margin: \"0 0 0 10px\" }}\n              >\n                Place Chicken\n              </StyledButton>\n            </Tooltip>\n          </FlexDivCenter>\n          <Tooltip placement=\"right\" title=\"Changes The Grid Size\">\n            <FlexDivCenter>\n              <Label>Map Scale</Label>\n              <StyledSlider\n                min={minTextureSize}\n                max={maxTextureSize}\n                onChange={props.setTextureSize}\n                disabled={props.inProgress}\n                value={props.textureSize}\n                tooltipPlacement={\"top\"}\n              />\n            </FlexDivCenter>\n          </Tooltip>\n          {smallScreenWidth\n            ? [\n                <Tooltip key={1} placement=\"topLeft\" title=\"Changes The player Max Health\">\n                  <FlexDivCenter>{playerMaxHealth(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={2} placement=\"topLeft\" title=\"Changes The player Movement Speed\">\n                  <FlexDivCenter>{playerSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>,\n                <Tooltip key={3} placement=\"topLeft\" title=\"Chicken AI Coming Soon!\">\n                  <FlexDivCenter>{chickenSpeed(props, true)}</FlexDivCenter>\n                </Tooltip>\n              ]\n            : null}\n\n          <Tooltip placement=\"right\" title=\"Loads a Pre Made Level Created By The Developer\">\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Pre made Levels</Label>\n              <Radio.Group\n                value={props.selectedLevel}\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                onChange={e => props.setSelectedLevel(e.target.value)}\n              >\n                <Radio.Button value={1}>1</Radio.Button>\n                <Radio.Button value={2}>2</Radio.Button>\n                <Radio.Button value={3}>3</Radio.Button>\n                <Radio.Button value={4}>4</Radio.Button>\n                <Radio.Button value={5}>5</Radio.Button>\n                <Radio.Button value={6}>6</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <Tooltip\n            placement=\"right\"\n            title=\"Changes Wether The player Maximizes Health or Minimizes Distance\"\n          >\n            <FlexDivCenter>\n              <Label style={{ width: \"30%\" }}>Search Priority</Label>\n              <Radio.Group\n                size={smallScreenHeight || smallScreenWidth ? \"small\" : \"default\"}\n                value={props.searchPriority}\n                onChange={e => props.setSearchPriority(e.target.value)}\n              >\n                <Radio.Button value={CONSTANTS.HEALTH}>HEALTH</Radio.Button>\n                <Radio.Button value={CONSTANTS.SPEED}>SPEED</Radio.Button>\n              </Radio.Group>\n            </FlexDivCenter>\n          </Tooltip>\n          <StyledText>Made By Mark Armanious © 2019</StyledText>\n          <div>\n            <StyledGitButton\n              shape={\"circle\"}\n              ghost={true}\n              icon={\"question-circle\"}\n              type={\"link\"}\n              onClick={() => this.setState({ showTutorial: true })}\n            ></StyledGitButton>\n            <StyledGitButton\n              href={\"https://github.com/markarmanus/path_finder\"}\n              target={\"_blank\"}\n              shape={\"circle\"}\n              ghost={true}\n              icon={\"github\"}\n              type={\"link\"}\n            ></StyledGitButton>\n          </div>\n        </Center>\n        {smallScreenWidth ? null : (\n          <Right>\n            <LeftRightContainer>\n              <FlexDivCenter>\n                <StyledTitle level={4}>Chicken Options</StyledTitle>\n              </FlexDivCenter>\n              {chickenSpeed(props, false)}\n            </LeftRightContainer>\n          </Right>\n        )}\n      </Container>\n    )\n  }\n}\n","export const LEVELS = {\n  1: \"chickenSpeed=0&firstRenderChickenLocation=4,1&firstRenderPlayerLocation=1,1&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=22,22,22,22,22,22,22,22,11,11,22,22,22,2,11,11,22,22,22,2,22,22,22,22,22,22,22,22,22,22&minHeight=640&minWidth=360&playerMaxHealth=4&playerSpeed=1&searchPriority=health&textureSize=52\",\n  2: \"allowDiagonalActions=false&firstRenderPlayerLocation=0,0&firstRenderChickenLocation=28,0&initialOverLayMapinitialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,2,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,2,1,2,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,2,2,2,2,1,2,2,2,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,2,2,1,2,1,1,2,1,2,2,1,1,2,1,2,2,1,1,1,1,1,1,1,1,1,2,1,1,1,2,2,1,2,1,2,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,2,1,2,1,2,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&playerMaxHealth=5&playerSpeed=1&searchPriority=health&textureSize=66&chickenSpeed=1\",\n  3: \"minWidth=1920&minHeight=600&allowDiagonalActions=true&firstRenderPlayerLocation=3,0&firstRenderChickenLocation=5,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&playerMaxHealth=10&playerSpeed=2&searchPriority=speed&textureSize=197&chickenSpeed=3\",\n  4: \"http://localhost:3000/?allowDiagonalActions=true&firstRenderPlayerLocation=0,0&firstRenderChickenLocation=11,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1&minHeight=937&minWidth=1920&playerMaxHealth=10&playerSpeed=3&searchPriority=speed&textureSize=159&chickenSpeed=3\",\n  5: \"allowDiagonalActions=false&firstRenderPlayerLocation=3,2&firstRenderChickenLocation=5,0&initialOverLayMap=13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13&initialTexturesMap=1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1&playerMaxHealth=10&playerSpeed=4&searchPriority=health&textureSize=211&chickenSpeed=1\"\n}\n","import React, { Component } from \"react\"\nimport Grid from \"./Grid\"\nimport Footer from \"./Footer\"\nimport { CONFIG } from \"../Constants/Config\"\nimport styled from \"styled-components\"\nimport { TEXTURES } from \"../Constants/Textures\"\nimport queryString from \"query-string\"\nimport { LEVELS } from \"../Constants/Levels\"\nimport { message } from \"antd\"\nimport { calculateBestTextureSize } from \"../HelperFunctions\"\nimport \"antd/dist/antd.css\"\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n`\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    let params = this.parseLevelData(this.props.location.search)\n    this.state = {\n      textureSize: params.textureSize ? params.textureSize : calculateBestTextureSize(window),\n      selectedEditTexture: null,\n      editing: false,\n      selectedLevel: CONFIG.DEFAULT_SELECTED_LEVEL,\n      inProgress: false,\n      URLParams: params,\n      paused: false,\n      ready: false,\n      followCursor: false,\n      // allowDiagonalActions: params.allowDiagonalActions ? params.allowDiagonalActions : false,\n      initialTexturesMap: params.initialTexturesMap ? params.initialTexturesMap : [],\n      initialOverLayMap: params.initialOverLayMap ? params.initialOverLayMap : [],\n      playerSpeed: params.playerSpeed ? params.playerSpeed : CONFIG.DEFAULT_PLAYER_SPEED,\n      firstRenderPlayerLocation: params.firstRenderPlayerLocation\n        ? params.firstRenderPlayerLocation\n        : null,\n      firstRenderChickenLocation: params.firstRenderChickenLocation\n        ? params.firstRenderChickenLocation\n        : null,\n      playerMaxHealth: params.playerMaxHealth\n        ? params.playerMaxHealth\n        : CONFIG.DEFAULT_PLAYER_HEALTH,\n      searchPriority: params.searchPriority\n        ? params.searchPriority\n        : CONFIG.DEFAULT_SEARCH_PRIORITY,\n      chickenSpeed: params.chickenSpeed ? params.chickenSpeed : CONFIG.DEFAULT_CHICKEN_SPEED\n    }\n    this.onClickUndo = this.onClickUndo.bind(this)\n    this.setTextureSize = this.setTextureSize.bind(this)\n    this.setSelectedEditTexture = this.setSelectedEditTexture.bind(this)\n    this.setEditing = this.setEditing.bind(this)\n    this.onClickStart = this.onClickStart.bind(this)\n    this.onClickRestart = this.onClickRestart.bind(this)\n    this.onClickPause = this.onClickPause.bind(this)\n    this.onClickResume = this.onClickResume.bind(this)\n    this.setCharacterSpeed = this.setCharacterSpeed.bind(this)\n    this.envIsReady = this.envIsReady.bind(this)\n    this.enableFollowCursor = this.enableFollowCursor.bind(this)\n    this.setCharacterMaxHealth = this.setCharacterMaxHealth.bind(this)\n    this.setSearchPriority = this.setSearchPriority.bind(this)\n    this.onFinishGame = this.onFinishGame.bind(this)\n    this.generateLink = this.generateLink.bind(this)\n    this.setAllowDiagonalActions = this.setAllowDiagonalActions.bind(this)\n    this.setSelectedLevel = this.setSelectedLevel.bind(this)\n    this.parseLevelData = this.parseLevelData.bind(this)\n  }\n  parseLevelData(value) {\n    return queryString.parse(value, {\n      arrayFormat: \"comma\",\n      parseNumbers: true,\n      parseBooleans: true\n    })\n  }\n  setSelectedLevel(level) {\n    let levelData = this.parseLevelData(LEVELS[level])\n\n    if (levelData.minHeight <= window.screen.height && levelData.minWidth <= window.screen.width) {\n      this.setState({ selectedLevel: level, ...levelData }, () => {\n        this.grid.onSelectCustomLevel(levelData)\n      })\n    } else {\n      message.error(\"Your Screen is Too Small For This Map!\")\n    }\n  }\n  componentDidMount() {\n    message.info(\"Click on The Help Icon At Bottom To Help You Start!\")\n  }\n  setAllowDiagonalActions(value) {\n    this.setState({ allowDiagonalActions: value })\n  }\n  onFinishGame() {\n    this.setState({ inProgress: false })\n  }\n  generateLink() {\n    this.grid.updateURL()\n  }\n  setCharacterMaxHealth(type, value) {\n    this.setState({ [type + \"MaxHealth\"]: value })\n  }\n  enableFollowCursor() {\n    if (this.state.ready) {\n      this.setState({ followCursor: true, inProgress: true })\n    }\n  }\n  setCharacterSpeed(type, speed) {\n    this.setState({ [type + \"Speed\"]: speed })\n  }\n  onClickUndo() {\n    this.grid.undoEdit()\n  }\n  setTextureSize(size) {\n    this.setState({ textureSize: size })\n    this.onClickRestart()\n  }\n  envIsReady() {\n    this.setState({ ready: true })\n  }\n  setEditing(value) {\n    this.setState({ editing: value })\n  }\n  setSelectedEditTexture(texture) {\n    let isEditing =\n      texture !== null && texture !== TEXTURES.PLAYER_IDLE && texture !== TEXTURES.CHICKEN_IDLE\n    this.setState({\n      selectedEditTexture: texture,\n      editing: isEditing\n    })\n  }\n  onClickStart() {\n    this.setState({ inProgress: true })\n  }\n  onClickRestart() {\n    this.setState({\n      paused: false,\n      inProgress: false,\n      selectedEditTexture: null,\n      editing: false,\n      followCursor: false\n    })\n    this.grid.onClickRestart()\n  }\n  onClickPause() {\n    this.setState({ paused: true })\n  }\n  onClickResume() {\n    this.setState({ paused: false })\n  }\n  setSearchPriority(value) {\n    this.setState({ searchPriority: value })\n  }\n  render() {\n    return (\n      <MainContainer>\n        <Grid onRef={ref => (this.grid = ref)} {...this.state} {...this}></Grid>\n        <Footer {...this} {...this.state}></Footer>\n      </MainContainer>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport AppRoute from \"./Components/AppRoute\"\n\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<AppRoute />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport App from \"./App\"\nexport default function AppRoute() {\n  return (\n    <Router>\n      <Route path={\"/\"} component={App}></Route>\n    </Router>\n  )\n}\n"],"sourceRoot":""}